
build/NixieClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00003756  000037ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003756  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018f  00800110  00800110  000037fa  2**0
                  ALLOC
  3 .stab         00000d14  00000000  00000000  000037fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001f9  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000328  00000000  00000000  00004710  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000057f9  00000000  00000000  00004a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c8b  00000000  00000000  0000a231  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002030  00000000  00000000  0000bebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dc4  00000000  00000000  0000deec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001634  00000000  00000000  0000ecb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ce6  00000000  00000000  000102e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00013fca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 01 	jmp	0x300	; 0x300 <__ctors_end>
       4:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
       8:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
       c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      10:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      14:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__vector_5>
      18:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      1c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      20:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      24:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      28:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      2c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      30:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      34:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      38:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__vector_14>
      3c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      40:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      44:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      48:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__vector_18>
      4c:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__vector_19>
      50:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      54:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      58:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      5c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      60:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      64:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>

00000068 <__c.2061>:
      68:	0d 2a 25 63 25 32 75 7e 2e 2a 25 63 25 30 32 75     .*%c%2u~.*%c%02u
      78:	7e 2e 2a 25 63 25 30 32 75 2a 25 63 25 63 00        ~.*%c%02u*%c%c.

00000087 <__c.2079>:
      87:	0d 2a 25 63 25 30 32 75 2a 25 63 25 30 32 75 2a     .*%c%02u*%c%02u*
      97:	25 63 25 30 32 75 00                                %c%02u.

0000009e <__c.2088>:
      9e:	0d 0a 54 65 72 6d 69 6e 61 6c 20 6d 6f 64 65 20     ..Terminal mode 
      ae:	72 65 61 64 79 2e 0d 0a 00                          ready....

000000b7 <__c.2090>:
      b7:	0b 0c 00                                            ...

000000ba <__c.2094>:
      ba:	0d 0a 54 65 72 6d 69 6e 61 6c 20 6d 6f 64 65 20     ..Terminal mode 
      ca:	65 78 69 74 0d 0a 00                                exit...

000000d1 <__c.2107>:
      d1:	0d 7e 25 32 75 2e 25 30 32 75 2e 25 30 32 75 25     .~%2u.%02u.%02u%
      e1:	63 25 63 00                                         c%c.

000000e5 <__c.2111>:
      e5:	0d 7e 78 25 30 32 75 2e 25 30 32 75 2e 25 30 32     .~x%02u.%02u.%02
      f5:	75 25 63 00                                         u%c.

000000f9 <__c.2114>:
      f9:	0d 7e 60 78 25 30 32 75 25 30 32 75 25 30 32 75     .~`x%02u%02u%02u
     109:	25 63 00                                            %c.

0000010c <__c.2116>:
     10c:	0c 20 20 32 34 00                                   .  24.

00000112 <__c.2118>:
     112:	0c 20 20 31 32 00                                   .  12.

00000118 <player_test>:
     118:	54 51 3a 31 32 30 3a 4d 38 3a 4f 34 3a 43 48 47     TQ:120:M8:O4:CHG
     128:	46 49 45 44 3e 43 48 3c 47 46 49 45 44 3e 43 48     FIED>CH<GFIED>CH
     138:	3c 47 46 49 45 46 44 48 2e 00                       <GFIEFDH..

00000142 <hello>:
     142:	4e 69 78 69 65 43 6c 6f 63 6b 20 76 31 2e 30 30     NixieClock v1.00
     152:	20 28 61 20 44 65 65 70 20 42 6f 6e 64 69 20 74      (a Deep Bondi t
     162:	68 69 6e 67 29 00                                   hing).

00000168 <__c.2113>:
     168:	0d 60 58 59 00                                      .`XY.

0000016d <__c.2115>:
     16d:	0d 3c 3e 78 79 00                                   .<>xy.

00000173 <__c.2126>:
     173:	0d 0a 25 53 0d 0a 00                                ..%S...

0000017a <days_month>:
     17a:	00 1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f              .............

00000187 <nixie_digit_offset>:
     187:	00 0a 15 20 2b 35 14 2a 1f 3f                       ... +5.*.?

00000191 <c_major_scale>:
     191:	09 0b 00 02 04 05 07                                .......

00000198 <note_table>:
     198:	e9 ee 02 88 e1 02 df d4 02 ef c8 02 9f bd 02 05     ................
     1a8:	b3 02 f4 a8 02 6f 9f 02 87 96 02 0b 8e 02 18 86     .....o..........
     1b8:	02 93 7e 02 74 77 02 bb 70 02 68 6a 02 71 64 02     ..~.tw..p.hj.qd.
     1c8:	cf 5e 02 7d 59 02 75 54 02 b7 4f 02 3f 4b 02 05     .^.}Y.uT..O.?K..
     1d8:	47 02 08 43 02 47 3f 02 b7 3b 02 5d 38 02 33 35     G..C.G?..;.]8.35
     1e8:	02 38 32 02 65 2f 02 bc 2c 02 3a 2a 02 db 27 02     .82.e/..,.:*..'.
     1f8:	a1 25 02 82 23 02 87 21 02 08 fd 01 e9 ee 01 77     .%..#..!.......w
     208:	e1 01 df d4 01 d5 c8 01 9f bd 01 fa b2 01 ea a8     ................
     218:	01 6f 9f 01 74 96 01 0b 8e 01 0f 86 01 91 7e 01     .o..t.........~.
     228:	74 77 01 bb 70 01 66 6a 01 72 64 01 cf 5e 01 7d     tw..p.fj.rd..^.}
     238:	59 01 75 54 01 b7 4f 01 3e 4b 01 05 47 01 07 43     Y.uT..O.>K..G..C
     248:	01 45 3f 01 b7 3b 01 5d 38 01 35 35 01 37 32 01     .E?..;.]8.55.72.
     258:	65 2f 01 bc 2c 01 3a 2a 01 db 27 01 9f 25 01 82     e/..,.:*..'..%..
     268:	23 01 84 21 01 a2 1f 01 d7 1d 01 2c 1c 01 97 1a     #..!.......,....
     278:	01 18 19 01 b0 17 01 5d 16 01 1c 15 01 ed 13 01     .......]........
     288:	cf 12 01 c0 11 01 c0 10 01 cf 0f 01 ed 0e 01 17     ................
     298:	0e 01 4c 0d 01 8d 0c 01 d8 0b 01 2e 0b 01 8d 0a     ..L.............
     2a8:	01 f6 09 01 67 09 01 df 08 01 60 08 01 e7 07 01     ....g.....`.....
     2b8:	76 07 01 0b 07 01 a5 06 01 46 06 01 eb 05 01 96     v........F......
     2c8:	05 01 46 05 01 fa 04 01 b2 04 01 6f 04 01 2f 04     ..F........o../.
     2d8:	01 f3 03 01 ba 03 01 84 03 01 52 03 01 22 03 01     ..........R.."..
     2e8:	f5 02 01 ca 02 01 a2 02 01 7c 02 01 58 02 01 37     .........|..X..7
     2f8:	02 01 17 02 01 f9 01 01                             ........

00000300 <__ctors_end>:
     300:	11 24       	eor	r1, r1
     302:	1f be       	out	0x3f, r1	; 63
     304:	cf ef       	ldi	r28, 0xFF	; 255
     306:	d8 e0       	ldi	r29, 0x08	; 8
     308:	de bf       	out	0x3e, r29	; 62
     30a:	cd bf       	out	0x3d, r28	; 61

0000030c <__do_copy_data>:
     30c:	11 e0       	ldi	r17, 0x01	; 1
     30e:	a0 e0       	ldi	r26, 0x00	; 0
     310:	b1 e0       	ldi	r27, 0x01	; 1
     312:	e6 e5       	ldi	r30, 0x56	; 86
     314:	f7 e3       	ldi	r31, 0x37	; 55
     316:	02 c0       	rjmp	.+4      	; 0x31c <__do_copy_data+0x10>
     318:	05 90       	lpm	r0, Z+
     31a:	0d 92       	st	X+, r0
     31c:	a0 31       	cpi	r26, 0x10	; 16
     31e:	b1 07       	cpc	r27, r17
     320:	d9 f7       	brne	.-10     	; 0x318 <__do_copy_data+0xc>

00000322 <__do_clear_bss>:
     322:	12 e0       	ldi	r17, 0x02	; 2
     324:	a0 e1       	ldi	r26, 0x10	; 16
     326:	b1 e0       	ldi	r27, 0x01	; 1
     328:	01 c0       	rjmp	.+2      	; 0x32c <.do_clear_bss_start>

0000032a <.do_clear_bss_loop>:
     32a:	1d 92       	st	X+, r1

0000032c <.do_clear_bss_start>:
     32c:	af 39       	cpi	r26, 0x9F	; 159
     32e:	b1 07       	cpc	r27, r17
     330:	e1 f7       	brne	.-8      	; 0x32a <.do_clear_bss_loop>
     332:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <main>
     336:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <_exit>

0000033a <__bad_interrupt>:
     33a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000033e <SetTime>:
/******************************************************************************
 *
 ******************************************************************************/

uint8_t SetTime(uint8_t mode, time_t *time)
{
     33e:	2f 92       	push	r2
     340:	3f 92       	push	r3
     342:	4f 92       	push	r4
     344:	5f 92       	push	r5
     346:	7f 92       	push	r7
     348:	8f 92       	push	r8
     34a:	9f 92       	push	r9
     34c:	af 92       	push	r10
     34e:	bf 92       	push	r11
     350:	cf 92       	push	r12
     352:	df 92       	push	r13
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	00 d0       	rcall	.+0      	; 0x362 <SetTime+0x24>
     362:	00 d0       	rcall	.+0      	; 0x364 <SetTime+0x26>
     364:	0f 92       	push	r0
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	98 2e       	mov	r9, r24
     36c:	8b 01       	movw	r16, r22
    refresh = 1;
    repeat = REPEAT_OFF;

    // Allocate/init event timers for blinking & button repeat

    blink_timer = timer_start(MS_TO_TICKS(200), 1);
     36e:	8d e7       	ldi	r24, 0x7D	; 125
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <timer_start>
     378:	a8 2e       	mov	r10, r24
    repeat_timer = timer_start(MS_TO_TICKS(100), 1);
     37a:	8e e3       	ldi	r24, 0x3E	; 62
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <timer_start>
     384:	b8 2e       	mov	r11, r24
    uint8_t         repeat_timer;

    selected = SELECT_HOURS;
    blink = BLINK_LOW_INTENSITY;
    refresh = 1;
    repeat = REPEAT_OFF;
     386:	ff 24       	eor	r15, r15
    uint8_t         blink_timer;
    uint8_t         repeat_timer;

    selected = SELECT_HOURS;
    blink = BLINK_LOW_INTENSITY;
    refresh = 1;
     388:	81 e0       	ldi	r24, 0x01	; 1
    button_t        button;
    uint8_t         blink_timer;
    uint8_t         repeat_timer;

    selected = SELECT_HOURS;
    blink = BLINK_LOW_INTENSITY;
     38a:	a1 e3       	ldi	r26, 0x31	; 49
     38c:	ea 2e       	mov	r14, r26
    uint8_t         hour, am_pm;
    button_t        button;
    uint8_t         blink_timer;
    uint8_t         repeat_timer;

    selected = SELECT_HOURS;
     38e:	21 e0       	ldi	r18, 0x01	; 1
            }
            else {
                hour = time->hour;
                am_pm = 'x';
            }
            fprintf_P(&primary, PSTR("\r*%c%2u~.*%c%02u~.*%c%02u*%c%c"),
     390:	b7 e8       	ldi	r27, 0x87	; 135
     392:	4b 2e       	mov	r4, r27
     394:	b2 e0       	ldi	r27, 0x02	; 2
     396:	5b 2e       	mov	r5, r27
     398:	38 e6       	ldi	r19, 0x68	; 104
     39a:	23 2e       	mov	r2, r19
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	33 2e       	mov	r3, r19
                hour_24_to_12(time->hour, &hour, &am_pm);
                am_pm = am_pm ? 'X' : 'x';
            }
            else {
                hour = time->hour;
                am_pm = 'x';
     3a0:	48 e7       	ldi	r20, 0x78	; 120
     3a2:	84 2e       	mov	r8, r20
        // Button 4 : Decrement seconds

        else if (event.event == BUTTON4_PRESSED) {
            time->second--;
            if (time->second & 0x80) {
                time->second = 59;
     3a4:	5b e3       	ldi	r21, 0x3B	; 59
     3a6:	c5 2e       	mov	r12, r21
        // Button 0 : Decrement hours

        else if (event.event == BUTTON0_PRESSED) {
            time->hour--;
            if (time->hour & 0x80) {
                time->hour = 23;
     3a8:	67 e1       	ldi	r22, 0x17	; 23
     3aa:	76 2e       	mov	r7, r22
    do {
        // Display refresh
        // Updated when time is changed, or when blink timer expires
        // Blinks (low-high intensity) the current time element being set

        if (refresh) {
     3ac:	88 23       	and	r24, r24
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <SetTime+0x74>
     3b0:	69 c0       	rjmp	.+210    	; 0x484 <SetTime+0x146>
            refresh = 0;
            hi = (selected == SELECT_HOURS) ? blink : NORMAL_INTENSITY;
     3b2:	21 30       	cpi	r18, 0x01	; 1
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <SetTime+0x84>
            mi = (selected == SELECT_MINUTES) ? blink : NORMAL_INTENSITY;
     3b6:	22 30       	cpi	r18, 0x02	; 2
     3b8:	39 f0       	breq	.+14     	; 0x3c8 <SetTime+0x8a>
            si = (selected == SELECT_SECONDS) ? blink : NORMAL_INTENSITY;
     3ba:	23 30       	cpi	r18, 0x03	; 3
     3bc:	51 f0       	breq	.+20     	; 0x3d2 <SetTime+0x94>
     3be:	39 e3       	ldi	r19, 0x39	; 57
     3c0:	04 c0       	rjmp	.+8      	; 0x3ca <SetTime+0x8c>
        // Updated when time is changed, or when blink timer expires
        // Blinks (low-high intensity) the current time element being set

        if (refresh) {
            refresh = 0;
            hi = (selected == SELECT_HOURS) ? blink : NORMAL_INTENSITY;
     3c2:	9e 2d       	mov	r25, r14
     3c4:	39 e3       	ldi	r19, 0x39	; 57
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <SetTime+0x8e>
            mi = (selected == SELECT_MINUTES) ? blink : NORMAL_INTENSITY;
     3c8:	3e 2d       	mov	r19, r14
        // Updated when time is changed, or when blink timer expires
        // Blinks (low-high intensity) the current time element being set

        if (refresh) {
            refresh = 0;
            hi = (selected == SELECT_HOURS) ? blink : NORMAL_INTENSITY;
     3ca:	99 e3       	ldi	r25, 0x39	; 57
            mi = (selected == SELECT_MINUTES) ? blink : NORMAL_INTENSITY;
            si = (selected == SELECT_SECONDS) ? blink : NORMAL_INTENSITY;
     3cc:	f9 e3       	ldi	r31, 0x39	; 57
     3ce:	df 2e       	mov	r13, r31
     3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <SetTime+0x9a>
     3d2:	de 2c       	mov	r13, r14
     3d4:	39 e3       	ldi	r19, 0x39	; 57
        // Updated when time is changed, or when blink timer expires
        // Blinks (low-high intensity) the current time element being set

        if (refresh) {
            refresh = 0;
            hi = (selected == SELECT_HOURS) ? blink : NORMAL_INTENSITY;
     3d6:	99 e3       	ldi	r25, 0x39	; 57
            mi = (selected == SELECT_MINUTES) ? blink : NORMAL_INTENSITY;
            si = (selected == SELECT_SECONDS) ? blink : NORMAL_INTENSITY;
            if (mode == MODE_CLOCK_12) {
     3d8:	99 20       	and	r9, r9
     3da:	c1 f4       	brne	.+48     	; 0x40c <SetTime+0xce>
                hour_24_to_12(time->hour, &hour, &am_pm);
     3dc:	d8 01       	movw	r26, r16
     3de:	8c 91       	ld	r24, X
     3e0:	be 01       	movw	r22, r28
     3e2:	6e 5f       	subi	r22, 0xFE	; 254
     3e4:	7f 4f       	sbci	r23, 0xFF	; 255
     3e6:	ae 01       	movw	r20, r28
     3e8:	4f 5f       	subi	r20, 0xFF	; 255
     3ea:	5f 4f       	sbci	r21, 0xFF	; 255
     3ec:	2d 83       	std	Y+5, r18	; 0x05
     3ee:	3c 83       	std	Y+4, r19	; 0x04
     3f0:	9b 83       	std	Y+3, r25	; 0x03
     3f2:	0e 94 a3 08 	call	0x1146	; 0x1146 <hour_24_to_12>
                am_pm = am_pm ? 'X' : 'x';
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	2d 81       	ldd	r18, Y+5	; 0x05
     3fa:	3c 81       	ldd	r19, Y+4	; 0x04
     3fc:	9b 81       	ldd	r25, Y+3	; 0x03
     3fe:	88 23       	and	r24, r24
     400:	11 f0       	breq	.+4      	; 0x406 <SetTime+0xc8>
     402:	88 e5       	ldi	r24, 0x58	; 88
     404:	01 c0       	rjmp	.+2      	; 0x408 <SetTime+0xca>
     406:	88 e7       	ldi	r24, 0x78	; 120
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	04 c0       	rjmp	.+8      	; 0x414 <SetTime+0xd6>
            }
            else {
                hour = time->hour;
     40c:	f8 01       	movw	r30, r16
     40e:	80 81       	ld	r24, Z
     410:	8a 83       	std	Y+2, r24	; 0x02
                am_pm = 'x';
     412:	89 82       	std	Y+1, r8	; 0x01
            }
            fprintf_P(&primary, PSTR("\r*%c%2u~.*%c%02u~.*%c%02u*%c%c"),
     414:	4d b7       	in	r20, 0x3d	; 61
     416:	5e b7       	in	r21, 0x3e	; 62
     418:	44 51       	subi	r20, 0x14	; 20
     41a:	50 40       	sbci	r21, 0x00	; 0
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	5e bf       	out	0x3e, r21	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	4d bf       	out	0x3d, r20	; 61
     426:	ed b7       	in	r30, 0x3d	; 61
     428:	fe b7       	in	r31, 0x3e	; 62
     42a:	31 96       	adiw	r30, 0x01	; 1
     42c:	ad b7       	in	r26, 0x3d	; 61
     42e:	be b7       	in	r27, 0x3e	; 62
     430:	12 96       	adiw	r26, 0x02	; 2
     432:	5c 92       	st	X, r5
     434:	4e 92       	st	-X, r4
     436:	11 97       	sbiw	r26, 0x01	; 1
     438:	33 82       	std	Z+3, r3	; 0x03
     43a:	22 82       	std	Z+2, r2	; 0x02
     43c:	94 83       	std	Z+4, r25	; 0x04
     43e:	15 82       	std	Z+5, r1	; 0x05
     440:	8a 81       	ldd	r24, Y+2	; 0x02
     442:	86 83       	std	Z+6, r24	; 0x06
     444:	17 82       	std	Z+7, r1	; 0x07
     446:	30 87       	std	Z+8, r19	; 0x08
     448:	11 86       	std	Z+9, r1	; 0x09
     44a:	d8 01       	movw	r26, r16
     44c:	11 96       	adiw	r26, 0x01	; 1
     44e:	8c 91       	ld	r24, X
     450:	11 97       	sbiw	r26, 0x01	; 1
     452:	82 87       	std	Z+10, r24	; 0x0a
     454:	13 86       	std	Z+11, r1	; 0x0b
     456:	d4 86       	std	Z+12, r13	; 0x0c
     458:	15 86       	std	Z+13, r1	; 0x0d
     45a:	12 96       	adiw	r26, 0x02	; 2
     45c:	8c 91       	ld	r24, X
     45e:	86 87       	std	Z+14, r24	; 0x0e
     460:	17 86       	std	Z+15, r1	; 0x0f
     462:	90 8b       	std	Z+16, r25	; 0x10
     464:	11 8a       	std	Z+17, r1	; 0x11
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	82 8b       	std	Z+18, r24	; 0x12
     46a:	13 8a       	std	Z+19, r1	; 0x13
     46c:	2d 83       	std	Y+5, r18	; 0x05
     46e:	0e 94 87 18 	call	0x310e	; 0x310e <fprintf_P>
     472:	ed b7       	in	r30, 0x3d	; 61
     474:	fe b7       	in	r31, 0x3e	; 62
     476:	74 96       	adiw	r30, 0x14	; 20
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	fe bf       	out	0x3e, r31	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	ed bf       	out	0x3d, r30	; 61
     482:	2d 81       	ldd	r18, Y+5	; 0x05
                                mi, time->minute,
                                si, time->second,
                                hi, am_pm);
        }

        event = wait_next_event(0);
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	2d 83       	std	Y+5, r18	; 0x05
     488:	0e 94 00 0b 	call	0x1600	; 0x1600 <wait_next_event>

        // Check for blink or autorepeat timer expiration

        if (event.event == TIMER_EXPIRED) {
     48c:	2d 81       	ldd	r18, Y+5	; 0x05
     48e:	85 32       	cpi	r24, 0x25	; 37
     490:	09 f0       	breq	.+2      	; 0x494 <SetTime+0x156>
     492:	47 c0       	rjmp	.+142    	; 0x522 <SetTime+0x1e4>
            if (event.data == blink_timer) {
     494:	9a 15       	cp	r25, r10
     496:	41 f4       	brne	.+16     	; 0x4a8 <SetTime+0x16a>
                blink = (blink == BLINK_LOW_INTENSITY) ? 
     498:	f1 e3       	ldi	r31, 0x31	; 49
                        BLINK_HIGH_INTENSITY : BLINK_LOW_INTENSITY;
                refresh = 1;
     49a:	81 e0       	ldi	r24, 0x01	; 1

        // Check for blink or autorepeat timer expiration

        if (event.event == TIMER_EXPIRED) {
            if (event.data == blink_timer) {
                blink = (blink == BLINK_LOW_INTENSITY) ? 
     49c:	ef 16       	cp	r14, r31
     49e:	09 f0       	breq	.+2      	; 0x4a2 <SetTime+0x164>
     4a0:	1c c1       	rjmp	.+568    	; 0x6da <SetTime+0x39c>
     4a2:	e9 e3       	ldi	r30, 0x39	; 57
     4a4:	ee 2e       	mov	r14, r30
     4a6:	23 c1       	rjmp	.+582    	; 0x6ee <SetTime+0x3b0>
            }

            // Auto-repeat button handling
            // Simulates button presses for the time-setting buttons

            else if ((event.data == repeat_timer) &&
     4a8:	9b 15       	cp	r25, r11
     4aa:	09 f0       	breq	.+2      	; 0x4ae <SetTime+0x170>
     4ac:	1f c1       	rjmp	.+574    	; 0x6ec <SetTime+0x3ae>
     4ae:	41 e0       	ldi	r20, 0x01	; 1
     4b0:	f4 16       	cp	r15, r20
     4b2:	09 f0       	breq	.+2      	; 0x4b6 <SetTime+0x178>
     4b4:	1b c1       	rjmp	.+566    	; 0x6ec <SetTime+0x3ae>
                     (repeat == REPEAT_ON)) {
                button = read_button_debounced();
     4b6:	2d 83       	std	Y+5, r18	; 0x05
     4b8:	0e 94 de 07 	call	0xfbc	; 0xfbc <read_button_debounced>
     4bc:	d8 2e       	mov	r13, r24
                if (button.button0) {
     4be:	2d 81       	ldd	r18, Y+5	; 0x05
     4c0:	80 ff       	sbrs	r24, 0
     4c2:	05 c0       	rjmp	.+10     	; 0x4ce <SetTime+0x190>
                    add_event(BUTTON0_PRESSED, 0);
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
     4cc:	2d 81       	ldd	r18, Y+5	; 0x05
                }
                if (button.button1) {
     4ce:	d1 fe       	sbrs	r13, 1
     4d0:	06 c0       	rjmp	.+12     	; 0x4de <SetTime+0x1a0>
                    add_event(BUTTON1_PRESSED, 0);
     4d2:	85 e0       	ldi	r24, 0x05	; 5
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	2d 83       	std	Y+5, r18	; 0x05
     4d8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
     4dc:	2d 81       	ldd	r18, Y+5	; 0x05
                }
                if (button.button2) {
     4de:	d2 fe       	sbrs	r13, 2
     4e0:	06 c0       	rjmp	.+12     	; 0x4ee <SetTime+0x1b0>
                    add_event(BUTTON2_PRESSED, 0);
     4e2:	89 e0       	ldi	r24, 0x09	; 9
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	2d 83       	std	Y+5, r18	; 0x05
     4e8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
     4ec:	2d 81       	ldd	r18, Y+5	; 0x05
                }
                if (button.button3) {
     4ee:	d3 fe       	sbrs	r13, 3
     4f0:	06 c0       	rjmp	.+12     	; 0x4fe <SetTime+0x1c0>
                    add_event(BUTTON3_PRESSED, 0);
     4f2:	8d e0       	ldi	r24, 0x0D	; 13
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	2d 83       	std	Y+5, r18	; 0x05
     4f8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
     4fc:	2d 81       	ldd	r18, Y+5	; 0x05
                }
                if (button.button4) {
     4fe:	d4 fe       	sbrs	r13, 4
     500:	06 c0       	rjmp	.+12     	; 0x50e <SetTime+0x1d0>
                    add_event(BUTTON4_PRESSED, 0);
     502:	81 e1       	ldi	r24, 0x11	; 17
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	2d 83       	std	Y+5, r18	; 0x05
     508:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
     50c:	2d 81       	ldd	r18, Y+5	; 0x05
                }
                if (button.button5) {
     50e:	d5 fe       	sbrs	r13, 5
     510:	ed c0       	rjmp	.+474    	; 0x6ec <SetTime+0x3ae>
                    add_event(BUTTON5_PRESSED, 0);
     512:	85 e1       	ldi	r24, 0x15	; 21
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	2d 83       	std	Y+5, r18	; 0x05
     518:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	2d 81       	ldd	r18, Y+5	; 0x05
     520:	e6 c0       	rjmp	.+460    	; 0x6ee <SetTime+0x3b0>
            }
        }

        // Button 0 : Decrement hours

        else if (event.event == BUTTON0_PRESSED) {
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	41 f4       	brne	.+16     	; 0x536 <SetTime+0x1f8>
            time->hour--;
     526:	d8 01       	movw	r26, r16
     528:	8c 91       	ld	r24, X
     52a:	81 50       	subi	r24, 0x01	; 1
     52c:	8c 93       	st	X, r24
            if (time->hour & 0x80) {
     52e:	87 ff       	sbrs	r24, 7
     530:	13 c1       	rjmp	.+550    	; 0x758 <SetTime+0x41a>
                time->hour = 23;
     532:	7c 92       	st	X, r7
     534:	11 c1       	rjmp	.+546    	; 0x758 <SetTime+0x41a>
            refresh = 1;
        }

        // Button 1 : Increment hours

        else if (event.event == BUTTON1_PRESSED) {
     536:	85 30       	cpi	r24, 0x05	; 5
     538:	49 f4       	brne	.+18     	; 0x54c <SetTime+0x20e>
            time->hour++;
     53a:	f8 01       	movw	r30, r16
     53c:	80 81       	ld	r24, Z
     53e:	8f 5f       	subi	r24, 0xFF	; 255
     540:	80 83       	st	Z, r24
            if (time->hour >= 24) {
     542:	88 31       	cpi	r24, 0x18	; 24
     544:	08 f4       	brcc	.+2      	; 0x548 <SetTime+0x20a>
     546:	08 c1       	rjmp	.+528    	; 0x758 <SetTime+0x41a>
                time->hour = 0;
     548:	10 82       	st	Z, r1
     54a:	06 c1       	rjmp	.+524    	; 0x758 <SetTime+0x41a>
            refresh = 1;
        }

        // Button 2 : Decrement minutes

        else if (event.event == BUTTON2_PRESSED) {
     54c:	89 30       	cpi	r24, 0x09	; 9
     54e:	71 f4       	brne	.+28     	; 0x56c <SetTime+0x22e>
            time->minute--;
     550:	d8 01       	movw	r26, r16
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	8c 91       	ld	r24, X
     556:	11 97       	sbiw	r26, 0x01	; 1
     558:	81 50       	subi	r24, 0x01	; 1
     55a:	11 96       	adiw	r26, 0x01	; 1
     55c:	8c 93       	st	X, r24
     55e:	11 97       	sbiw	r26, 0x01	; 1
            if (time->minute & 0x80) {
     560:	87 ff       	sbrs	r24, 7
     562:	f2 c0       	rjmp	.+484    	; 0x748 <SetTime+0x40a>
                time->minute = 59;
     564:	11 96       	adiw	r26, 0x01	; 1
     566:	cc 92       	st	X, r12
     568:	11 97       	sbiw	r26, 0x01	; 1
     56a:	ee c0       	rjmp	.+476    	; 0x748 <SetTime+0x40a>
            refresh = 1;
        }

        // Button 3 : Increment minutes

        else if (event.event == BUTTON3_PRESSED) {
     56c:	8d 30       	cpi	r24, 0x0D	; 13
     56e:	49 f4       	brne	.+18     	; 0x582 <SetTime+0x244>
            time->minute++;
     570:	f8 01       	movw	r30, r16
     572:	81 81       	ldd	r24, Z+1	; 0x01
     574:	8f 5f       	subi	r24, 0xFF	; 255
     576:	81 83       	std	Z+1, r24	; 0x01
            if (time->minute >= 60) {
     578:	8c 33       	cpi	r24, 0x3C	; 60
     57a:	08 f4       	brcc	.+2      	; 0x57e <SetTime+0x240>
     57c:	e5 c0       	rjmp	.+458    	; 0x748 <SetTime+0x40a>
                time->minute = 0;
     57e:	11 82       	std	Z+1, r1	; 0x01
     580:	e3 c0       	rjmp	.+454    	; 0x748 <SetTime+0x40a>
            refresh = 1;
        }

        // Button 4 : Decrement seconds

        else if (event.event == BUTTON4_PRESSED) {
     582:	81 31       	cpi	r24, 0x11	; 17
     584:	71 f4       	brne	.+28     	; 0x5a2 <SetTime+0x264>
            time->second--;
     586:	d8 01       	movw	r26, r16
     588:	12 96       	adiw	r26, 0x02	; 2
     58a:	8c 91       	ld	r24, X
     58c:	12 97       	sbiw	r26, 0x02	; 2
     58e:	81 50       	subi	r24, 0x01	; 1
     590:	12 96       	adiw	r26, 0x02	; 2
     592:	8c 93       	st	X, r24
     594:	12 97       	sbiw	r26, 0x02	; 2
            if (time->second & 0x80) {
     596:	87 ff       	sbrs	r24, 7
     598:	db c0       	rjmp	.+438    	; 0x750 <SetTime+0x412>
                time->second = 59;
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	cc 92       	st	X, r12
     59e:	12 97       	sbiw	r26, 0x02	; 2
     5a0:	d7 c0       	rjmp	.+430    	; 0x750 <SetTime+0x412>
            refresh = 1;
        }

        // Button 5 : Increment seconds

        else if (event.event == BUTTON5_PRESSED) {
     5a2:	85 31       	cpi	r24, 0x15	; 21
     5a4:	49 f4       	brne	.+18     	; 0x5b8 <SetTime+0x27a>
            time->second++;
     5a6:	f8 01       	movw	r30, r16
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	8f 5f       	subi	r24, 0xFF	; 255
     5ac:	82 83       	std	Z+2, r24	; 0x02
            if (time->second >= 60) {
     5ae:	8c 33       	cpi	r24, 0x3C	; 60
     5b0:	08 f4       	brcc	.+2      	; 0x5b4 <SetTime+0x276>
     5b2:	ce c0       	rjmp	.+412    	; 0x750 <SetTime+0x412>
                time->second = 0;
     5b4:	12 82       	std	Z+2, r1	; 0x02
     5b6:	cc c0       	rjmp	.+408    	; 0x750 <SetTime+0x412>
        // Button 0 + 1 : Reset hours (00 or 12am)
        // Button 2 + 3 : Reset minutes
        // Button 4 + 5 : Reset seconds
        // Button 0 + 5 : Reset time to 00:00:00 or 12:00:00am

        else if (event.event == BUTTON_CHORD) {
     5b8:	82 32       	cpi	r24, 0x22	; 34
     5ba:	f9 f4       	brne	.+62     	; 0x5fa <SetTime+0x2bc>
            if (event.data == 0x03) {       // Button 0+1
     5bc:	93 30       	cpi	r25, 0x03	; 3
     5be:	19 f4       	brne	.+6      	; 0x5c6 <SetTime+0x288>
                time->hour = 0;
     5c0:	d8 01       	movw	r26, r16
     5c2:	1c 92       	st	X, r1
     5c4:	17 c0       	rjmp	.+46     	; 0x5f4 <SetTime+0x2b6>
                repeat = REPEAT_INHIBIT;
                selected = SELECT_HOURS;
                refresh = 1;
            }
            else if (event.data == 0x0C) {  // Button 2+3
     5c6:	9c 30       	cpi	r25, 0x0C	; 12
     5c8:	29 f4       	brne	.+10     	; 0x5d4 <SetTime+0x296>
                time->minute = 0;
     5ca:	f8 01       	movw	r30, r16
     5cc:	11 82       	std	Z+1, r1	; 0x01
                repeat = REPEAT_INHIBIT;
     5ce:	72 e0       	ldi	r23, 0x02	; 2
     5d0:	f7 2e       	mov	r15, r23
     5d2:	ba c0       	rjmp	.+372    	; 0x748 <SetTime+0x40a>
                selected = SELECT_MINUTES;
                refresh = 1;
            }
            else if (event.data == 0x30) {  // Button 4+5
     5d4:	90 33       	cpi	r25, 0x30	; 48
     5d6:	39 f4       	brne	.+14     	; 0x5e6 <SetTime+0x2a8>
                time->second = 0;
     5d8:	d8 01       	movw	r26, r16
     5da:	12 96       	adiw	r26, 0x02	; 2
     5dc:	1c 92       	st	X, r1
     5de:	12 97       	sbiw	r26, 0x02	; 2
                repeat = REPEAT_INHIBIT;
     5e0:	62 e0       	ldi	r22, 0x02	; 2
     5e2:	f6 2e       	mov	r15, r22
     5e4:	b5 c0       	rjmp	.+362    	; 0x750 <SetTime+0x412>
                selected = SELECT_SECONDS;
                refresh = 1;
            }
            else if (event.data == 0x21) {  // Button 0+5
     5e6:	91 32       	cpi	r25, 0x21	; 33
     5e8:	09 f0       	breq	.+2      	; 0x5ec <SetTime+0x2ae>
     5ea:	80 c0       	rjmp	.+256    	; 0x6ec <SetTime+0x3ae>
                time->hour = 0;
     5ec:	f8 01       	movw	r30, r16
     5ee:	10 82       	st	Z, r1
                time->minute = 0;
     5f0:	11 82       	std	Z+1, r1	; 0x01
                time->second = 0;
     5f2:	12 82       	std	Z+2, r1	; 0x02
                repeat = REPEAT_INHIBIT;
     5f4:	52 e0       	ldi	r21, 0x02	; 2
     5f6:	f5 2e       	mov	r15, r21
     5f8:	af c0       	rjmp	.+350    	; 0x758 <SetTime+0x41a>
            }
        }

        // Left rotary movement : Select time element (h,m,s)

        else if (event.event == LEFT_ROTARY_MOVED) {
     5fa:	84 32       	cpi	r24, 0x24	; 36
     5fc:	41 f4       	brne	.+16     	; 0x60e <SetTime+0x2d0>
            selected += event.data;
     5fe:	29 0f       	add	r18, r25
            if ((selected == SELECT_NONE) || (selected & 0x80)) {
     600:	12 16       	cp	r1, r18
     602:	0c f0       	brlt	.+2      	; 0x606 <SetTime+0x2c8>
     604:	a3 c0       	rjmp	.+326    	; 0x74c <SetTime+0x40e>
                selected = SELECT_SECONDS;
            }
            else if (selected > SELECT_SECONDS) {
     606:	24 30       	cpi	r18, 0x04	; 4
     608:	08 f0       	brcs	.+2      	; 0x60c <SetTime+0x2ce>
     60a:	a4 c0       	rjmp	.+328    	; 0x754 <SetTime+0x416>
     60c:	9a c0       	rjmp	.+308    	; 0x742 <SetTime+0x404>
            refresh = 1;
        }

        // Right rotary movement : Change selected time element

        else if (event.event == RIGHT_ROTARY_MOVED) {
     60e:	83 32       	cpi	r24, 0x23	; 35
     610:	09 f0       	breq	.+2      	; 0x614 <SetTime+0x2d6>
     612:	42 c0       	rjmp	.+132    	; 0x698 <SetTime+0x35a>
            refresh = 1;

            // Inc/dec hours if selected

            if (selected == SELECT_HOURS) {
     614:	21 30       	cpi	r18, 0x01	; 1
     616:	81 f4       	brne	.+32     	; 0x638 <SetTime+0x2fa>
                time->hour += event.data;
     618:	d8 01       	movw	r26, r16
     61a:	8c 91       	ld	r24, X
     61c:	89 0f       	add	r24, r25
     61e:	8c 93       	st	X, r24
                if (time->hour & 0x80) {
     620:	87 ff       	sbrs	r24, 7
     622:	03 c0       	rjmp	.+6      	; 0x62a <SetTime+0x2ec>
                    time->hour += 24;
     624:	88 5e       	subi	r24, 0xE8	; 232
     626:	8c 93       	st	X, r24
     628:	cc ce       	rjmp	.-616    	; 0x3c2 <SetTime+0x84>
                }
                else if (time->hour >= 24) {
     62a:	88 31       	cpi	r24, 0x18	; 24
     62c:	08 f4       	brcc	.+2      	; 0x630 <SetTime+0x2f2>
     62e:	c9 ce       	rjmp	.-622    	; 0x3c2 <SetTime+0x84>
                    time->hour -= 24;
     630:	88 51       	subi	r24, 0x18	; 24
     632:	f8 01       	movw	r30, r16
     634:	80 83       	st	Z, r24
     636:	c5 ce       	rjmp	.-630    	; 0x3c2 <SetTime+0x84>
                }
            }

            // Inc/dec minutes if selected

            else if (selected == SELECT_MINUTES) {
     638:	22 30       	cpi	r18, 0x02	; 2
     63a:	b1 f4       	brne	.+44     	; 0x668 <SetTime+0x32a>
                time->minute += event.data;
     63c:	d8 01       	movw	r26, r16
     63e:	11 96       	adiw	r26, 0x01	; 1
     640:	8c 91       	ld	r24, X
     642:	11 97       	sbiw	r26, 0x01	; 1
     644:	89 0f       	add	r24, r25
     646:	11 96       	adiw	r26, 0x01	; 1
     648:	8c 93       	st	X, r24
     64a:	11 97       	sbiw	r26, 0x01	; 1
                if (time->minute & 0x80) {
     64c:	87 ff       	sbrs	r24, 7
     64e:	05 c0       	rjmp	.+10     	; 0x65a <SetTime+0x31c>
                    time->minute += 60;
     650:	84 5c       	subi	r24, 0xC4	; 196
     652:	11 96       	adiw	r26, 0x01	; 1
     654:	8c 93       	st	X, r24
     656:	11 97       	sbiw	r26, 0x01	; 1
     658:	b7 ce       	rjmp	.-658    	; 0x3c8 <SetTime+0x8a>
                }
                else if (time->minute >= 60) {
     65a:	8c 33       	cpi	r24, 0x3C	; 60
     65c:	08 f4       	brcc	.+2      	; 0x660 <SetTime+0x322>
     65e:	b4 ce       	rjmp	.-664    	; 0x3c8 <SetTime+0x8a>
                    time->minute -= 60;
     660:	8c 53       	subi	r24, 0x3C	; 60
     662:	f8 01       	movw	r30, r16
     664:	81 83       	std	Z+1, r24	; 0x01
     666:	b0 ce       	rjmp	.-672    	; 0x3c8 <SetTime+0x8a>
                }
            }

            // Inc/dec seconds if selected

            else if (selected == SELECT_SECONDS) {
     668:	23 30       	cpi	r18, 0x03	; 3
     66a:	d1 f5       	brne	.+116    	; 0x6e0 <SetTime+0x3a2>
                time->second += event.data;
     66c:	d8 01       	movw	r26, r16
     66e:	12 96       	adiw	r26, 0x02	; 2
     670:	8c 91       	ld	r24, X
     672:	12 97       	sbiw	r26, 0x02	; 2
     674:	89 0f       	add	r24, r25
     676:	12 96       	adiw	r26, 0x02	; 2
     678:	8c 93       	st	X, r24
     67a:	12 97       	sbiw	r26, 0x02	; 2
                if (time->second & 0x80) {
     67c:	87 ff       	sbrs	r24, 7
     67e:	05 c0       	rjmp	.+10     	; 0x68a <SetTime+0x34c>
                    time->second += 60;
     680:	84 5c       	subi	r24, 0xC4	; 196
     682:	12 96       	adiw	r26, 0x02	; 2
     684:	8c 93       	st	X, r24
     686:	12 97       	sbiw	r26, 0x02	; 2
     688:	a4 ce       	rjmp	.-696    	; 0x3d2 <SetTime+0x94>
                }
                else if (time->second >= 60) {
     68a:	8c 33       	cpi	r24, 0x3C	; 60
     68c:	08 f4       	brcc	.+2      	; 0x690 <SetTime+0x352>
     68e:	a1 ce       	rjmp	.-702    	; 0x3d2 <SetTime+0x94>
                    time->second -= 60;
     690:	8c 53       	subi	r24, 0x3C	; 60
     692:	f8 01       	movw	r30, r16
     694:	82 83       	std	Z+2, r24	; 0x02
     696:	9d ce       	rjmp	.-710    	; 0x3d2 <SetTime+0x94>
            }
        }

        // Right rotary button : Set time & exit

        else if (event.event == RIGHT_BUTTON_PRESSED) {
     698:	89 31       	cpi	r24, 0x19	; 25
     69a:	09 f4       	brne	.+2      	; 0x69e <SetTime+0x360>
     69c:	4e c0       	rjmp	.+156    	; 0x73a <SetTime+0x3fc>
            selected = SELECT_SET;
        }

        // Left rotary button : Cancel time setting

        else if (event.event == LEFT_BUTTON_PRESSED) {
     69e:	8d 31       	cpi	r24, 0x1D	; 29
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <SetTime+0x366>
     6a2:	4d c0       	rjmp	.+154    	; 0x73e <SetTime+0x400>
        }

        // Enable repeat mode if any of the 6 digit buttons are
        // pressed for a 'long' time

        else if ((repeat == REPEAT_OFF) &&
     6a4:	ff 20       	and	r15, r15
     6a6:	61 f4       	brne	.+24     	; 0x6c0 <SetTime+0x382>
     6a8:	84 30       	cpi	r24, 0x04	; 4
     6aa:	e1 f0       	breq	.+56     	; 0x6e4 <SetTime+0x3a6>
                 ((event.event == BUTTON0_LONG) ||
     6ac:	88 30       	cpi	r24, 0x08	; 8
     6ae:	d1 f0       	breq	.+52     	; 0x6e4 <SetTime+0x3a6>
                  (event.event == BUTTON1_LONG) ||
     6b0:	8c 30       	cpi	r24, 0x0C	; 12
     6b2:	c1 f0       	breq	.+48     	; 0x6e4 <SetTime+0x3a6>
                  (event.event == BUTTON2_LONG) ||
     6b4:	80 31       	cpi	r24, 0x10	; 16
     6b6:	b1 f0       	breq	.+44     	; 0x6e4 <SetTime+0x3a6>
                  (event.event == BUTTON3_LONG) ||
     6b8:	84 31       	cpi	r24, 0x14	; 20
     6ba:	a1 f0       	breq	.+40     	; 0x6e4 <SetTime+0x3a6>
                  (event.event == BUTTON4_LONG) ||
     6bc:	88 31       	cpi	r24, 0x18	; 24
     6be:	91 f0       	breq	.+36     	; 0x6e4 <SetTime+0x3a6>
            repeat = REPEAT_ON;
        }

        // Disable repeat mode when any of the 6 digit buttons are released

        else if ((event.event == BUTTON0_RELEASED) ||
     6c0:	82 30       	cpi	r24, 0x02	; 2
     6c2:	99 f0       	breq	.+38     	; 0x6ea <SetTime+0x3ac>
     6c4:	86 30       	cpi	r24, 0x06	; 6
     6c6:	89 f0       	breq	.+34     	; 0x6ea <SetTime+0x3ac>
                 (event.event == BUTTON1_RELEASED) ||
     6c8:	8a 30       	cpi	r24, 0x0A	; 10
     6ca:	79 f0       	breq	.+30     	; 0x6ea <SetTime+0x3ac>
                 (event.event == BUTTON2_RELEASED) ||
     6cc:	8e 30       	cpi	r24, 0x0E	; 14
     6ce:	69 f0       	breq	.+26     	; 0x6ea <SetTime+0x3ac>
                 (event.event == BUTTON3_RELEASED) ||
     6d0:	82 31       	cpi	r24, 0x12	; 18
     6d2:	59 f0       	breq	.+22     	; 0x6ea <SetTime+0x3ac>
                 (event.event == BUTTON4_RELEASED) ||
     6d4:	86 31       	cpi	r24, 0x16	; 22
     6d6:	51 f4       	brne	.+20     	; 0x6ec <SetTime+0x3ae>
     6d8:	08 c0       	rjmp	.+16     	; 0x6ea <SetTime+0x3ac>

        // Check for blink or autorepeat timer expiration

        if (event.event == TIMER_EXPIRED) {
            if (event.data == blink_timer) {
                blink = (blink == BLINK_LOW_INTENSITY) ? 
     6da:	41 e3       	ldi	r20, 0x31	; 49
     6dc:	e4 2e       	mov	r14, r20
     6de:	07 c0       	rjmp	.+14     	; 0x6ee <SetTime+0x3b0>
        }

        // Right rotary movement : Change selected time element

        else if (event.event == RIGHT_ROTARY_MOVED) {
            refresh = 1;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	05 c0       	rjmp	.+10     	; 0x6ee <SetTime+0x3b0>
                  (event.event == BUTTON1_LONG) ||
                  (event.event == BUTTON2_LONG) ||
                  (event.event == BUTTON3_LONG) ||
                  (event.event == BUTTON4_LONG) ||
                  (event.event == BUTTON5_LONG))) {
            repeat = REPEAT_ON;
     6e4:	ff 24       	eor	r15, r15
     6e6:	f3 94       	inc	r15
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <SetTime+0x3ae>
                 (event.event == BUTTON1_RELEASED) ||
                 (event.event == BUTTON2_RELEASED) ||
                 (event.event == BUTTON3_RELEASED) ||
                 (event.event == BUTTON4_RELEASED) ||
                 (event.event == BUTTON5_RELEASED)) {
            repeat = REPEAT_OFF;
     6ea:	ff 24       	eor	r15, r15

        else if ((event.event == BUTTON0_RELEASED) ||
                 (event.event == BUTTON1_RELEASED) ||
                 (event.event == BUTTON2_RELEASED) ||
                 (event.event == BUTTON3_RELEASED) ||
                 (event.event == BUTTON4_RELEASED) ||
     6ec:	80 e0       	ldi	r24, 0x00	; 0
                 (event.event == BUTTON5_RELEASED)) {
            repeat = REPEAT_OFF;
        }


    } while (selected <= SELECT_SECONDS);
     6ee:	24 30       	cpi	r18, 0x04	; 4
     6f0:	08 f4       	brcc	.+2      	; 0x6f4 <SetTime+0x3b6>
     6f2:	5c ce       	rjmp	.-840    	; 0x3ac <SetTime+0x6e>

    // Deallocate event timers

    timer_stop(blink_timer);
     6f4:	8a 2d       	mov	r24, r10
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <timer_stop>
    timer_stop(repeat_timer);
     6fc:	8b 2d       	mov	r24, r11
     6fe:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <timer_stop>

    return (selected == SELECT_SET);
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	2d 81       	ldd	r18, Y+5	; 0x05
     706:	24 30       	cpi	r18, 0x04	; 4
     708:	09 f0       	breq	.+2      	; 0x70c <SetTime+0x3ce>
     70a:	80 e0       	ldi	r24, 0x00	; 0
}
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	7f 90       	pop	r7
     730:	5f 90       	pop	r5
     732:	4f 90       	pop	r4
     734:	3f 90       	pop	r3
     736:	2f 90       	pop	r2
     738:	08 95       	ret
        }

        // Right rotary button : Set time & exit

        else if (event.event == RIGHT_BUTTON_PRESSED) {
            selected = SELECT_SET;
     73a:	24 e0       	ldi	r18, 0x04	; 4
     73c:	db cf       	rjmp	.-74     	; 0x6f4 <SetTime+0x3b6>
        }

        // Left rotary button : Cancel time setting

        else if (event.event == LEFT_BUTTON_PRESSED) {
            selected = SELECT_CANCEL;
     73e:	25 e0       	ldi	r18, 0x05	; 5
     740:	d9 cf       	rjmp	.-78     	; 0x6f4 <SetTime+0x3b6>
                selected = SELECT_SECONDS;
            }
            else if (selected > SELECT_SECONDS) {
                selected = SELECT_HOURS;
            }
            blink = BLINK_LOW_INTENSITY;
     742:	31 e3       	ldi	r19, 0x31	; 49
     744:	e3 2e       	mov	r14, r19
     746:	35 ce       	rjmp	.-918    	; 0x3b2 <SetTime+0x74>
        else if (event.event == BUTTON3_PRESSED) {
            time->minute++;
            if (time->minute >= 60) {
                time->minute = 0;
            }
            selected = SELECT_MINUTES;
     748:	22 e0       	ldi	r18, 0x02	; 2
     74a:	3e ce       	rjmp	.-900    	; 0x3c8 <SetTime+0x8a>
                selected = SELECT_SECONDS;
            }
            else if (selected > SELECT_SECONDS) {
                selected = SELECT_HOURS;
            }
            blink = BLINK_LOW_INTENSITY;
     74c:	91 e3       	ldi	r25, 0x31	; 49
     74e:	e9 2e       	mov	r14, r25
        // Left rotary movement : Select time element (h,m,s)

        else if (event.event == LEFT_ROTARY_MOVED) {
            selected += event.data;
            if ((selected == SELECT_NONE) || (selected & 0x80)) {
                selected = SELECT_SECONDS;
     750:	23 e0       	ldi	r18, 0x03	; 3
     752:	3f ce       	rjmp	.-898    	; 0x3d2 <SetTime+0x94>
            }
            else if (selected > SELECT_SECONDS) {
                selected = SELECT_HOURS;
            }
            blink = BLINK_LOW_INTENSITY;
     754:	81 e3       	ldi	r24, 0x31	; 49
     756:	e8 2e       	mov	r14, r24
            selected += event.data;
            if ((selected == SELECT_NONE) || (selected & 0x80)) {
                selected = SELECT_SECONDS;
            }
            else if (selected > SELECT_SECONDS) {
                selected = SELECT_HOURS;
     758:	21 e0       	ldi	r18, 0x01	; 1
     75a:	33 ce       	rjmp	.-922    	; 0x3c2 <SetTime+0x84>

0000075c <SetDate>:
#define NO_REFRESH      0
#define DO_REFRESH      1
#define CHANGED_REFRESH 2

uint8_t SetDate(date_t *date)
{
     75c:	2f 92       	push	r2
     75e:	3f 92       	push	r3
     760:	4f 92       	push	r4
     762:	5f 92       	push	r5
     764:	6f 92       	push	r6
     766:	7f 92       	push	r7
     768:	8f 92       	push	r8
     76a:	9f 92       	push	r9
     76c:	af 92       	push	r10
     76e:	bf 92       	push	r11
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	8c 01       	movw	r16, r24
    refresh = DO_REFRESH;
    repeat = REPEAT_OFF;

    // Allocate/init event timers for blinking & button repeat

    blink_timer = timer_start(MS_TO_TICKS(200), 1);
     782:	8d e7       	ldi	r24, 0x7D	; 125
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <timer_start>
     78c:	98 2e       	mov	r9, r24
    repeat_timer = timer_start(MS_TO_TICKS(100), 1);
     78e:	8e e3       	ldi	r24, 0x3E	; 62
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	61 e0       	ldi	r22, 0x01	; 1
     794:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <timer_start>
     798:	c8 2e       	mov	r12, r24
    uint8_t         repeat_timer;

    selected = SELECT_MONTH;
    blink = BLINK_LOW_INTENSITY;
    refresh = DO_REFRESH;
    repeat = REPEAT_OFF;
     79a:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t         blink_timer;
    uint8_t         repeat_timer;

    selected = SELECT_MONTH;
    blink = BLINK_LOW_INTENSITY;
    refresh = DO_REFRESH;
     79c:	81 e0       	ldi	r24, 0x01	; 1
    button_t        button;
    uint8_t         blink_timer;
    uint8_t         repeat_timer;

    selected = SELECT_MONTH;
    blink = BLINK_LOW_INTENSITY;
     79e:	c1 e3       	ldi	r28, 0x31	; 49
     7a0:	fc 2e       	mov	r15, r28
    uint8_t         mi, di, yi;
    button_t        button;
    uint8_t         blink_timer;
    uint8_t         repeat_timer;

    selected = SELECT_MONTH;
     7a2:	c1 e0       	ldi	r28, 0x01	; 1
            refresh = NO_REFRESH;

            mi = (selected == SELECT_MONTH) ? blink : NORMAL_INTENSITY;
            di = (selected == SELECT_DAY) ? blink : NORMAL_INTENSITY;
            yi = (selected == SELECT_YEAR) ? blink : NORMAL_INTENSITY;
            fprintf_P(&primary, PSTR("\r*%c%02u*%c%02u*%c%02u"),
     7a4:	27 e8       	ldi	r18, 0x87	; 135
     7a6:	42 2e       	mov	r4, r18
     7a8:	22 e0       	ldi	r18, 0x02	; 2
     7aa:	52 2e       	mov	r5, r18
     7ac:	37 e8       	ldi	r19, 0x87	; 135
     7ae:	23 2e       	mov	r2, r19
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	33 2e       	mov	r3, r19
                  (event.event == BUTTON1_LONG) ||
                  (event.event == BUTTON2_LONG) ||
                  (event.event == BUTTON3_LONG) ||
                  (event.event == BUTTON4_LONG) ||
                  (event.event == BUTTON5_LONG))) {
            repeat = REPEAT_ON;
     7b4:	dd 24       	eor	r13, r13
     7b6:	d3 94       	inc	r13
                date->year += event.data;
                if (date->year < MIN_YEAR) {
                    date->year = MAX_YEAR;
                }
                else if (date->year > MAX_YEAR) {
                    date->year = MIN_YEAR;
     7b8:	40 ed       	ldi	r20, 0xD0	; 208
     7ba:	a4 2e       	mov	r10, r20
     7bc:	47 e0       	ldi	r20, 0x07	; 7
     7be:	b4 2e       	mov	r11, r20
            // Inc/dec year if selected

            else if (selected == SELECT_YEAR) {
                date->year += event.data;
                if (date->year < MIN_YEAR) {
                    date->year = MAX_YEAR;
     7c0:	53 e3       	ldi	r21, 0x33	; 51
     7c2:	65 2e       	mov	r6, r21
     7c4:	58 e0       	ldi	r21, 0x08	; 8
     7c6:	75 2e       	mov	r7, r21
        // Button 0 : Decrement month

        else if (event.event == BUTTON0_PRESSED) {
            date->month--;
            if (date->month < 1) {
                date->month = 12;
     7c8:	6c e0       	ldi	r22, 0x0C	; 12
     7ca:	86 2e       	mov	r8, r22
    do {
        // Display refresh
        // Updated when date is changed, or when blink timer expires
        // Blinks (low-high intensity) the current date element being set

        if (refresh) {
     7cc:	88 23       	and	r24, r24
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <SetDate+0x76>
     7d0:	58 c0       	rjmp	.+176    	; 0x882 <SetDate+0x126>
            if (refresh == CHANGED_REFRESH) {
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	69 f4       	brne	.+26     	; 0x7f0 <SetDate+0x94>
                di = days_in_month(date->month, date->year);
     7d6:	d8 01       	movw	r26, r16
     7d8:	6d 91       	ld	r22, X+
     7da:	7c 91       	ld	r23, X
     7dc:	11 97       	sbiw	r26, 0x01	; 1
     7de:	12 96       	adiw	r26, 0x02	; 2
     7e0:	8c 91       	ld	r24, X
     7e2:	0e 94 1c 09 	call	0x1238	; 0x1238 <days_in_month>
                if (date->day > di) {
     7e6:	f8 01       	movw	r30, r16
     7e8:	93 81       	ldd	r25, Z+3	; 0x03
     7ea:	89 17       	cp	r24, r25
     7ec:	08 f4       	brcc	.+2      	; 0x7f0 <SetDate+0x94>
                    date->day = di;
     7ee:	83 83       	std	Z+3, r24	; 0x03
                }
            }
            refresh = NO_REFRESH;

            mi = (selected == SELECT_MONTH) ? blink : NORMAL_INTENSITY;
     7f0:	c1 30       	cpi	r28, 0x01	; 1
     7f2:	31 f0       	breq	.+12     	; 0x800 <SetDate+0xa4>
            di = (selected == SELECT_DAY) ? blink : NORMAL_INTENSITY;
     7f4:	c2 30       	cpi	r28, 0x02	; 2
     7f6:	39 f0       	breq	.+14     	; 0x806 <SetDate+0xaa>
            yi = (selected == SELECT_YEAR) ? blink : NORMAL_INTENSITY;
     7f8:	c3 30       	cpi	r28, 0x03	; 3
     7fa:	49 f0       	breq	.+18     	; 0x80e <SetDate+0xb2>
     7fc:	89 e3       	ldi	r24, 0x39	; 57
     7fe:	04 c0       	rjmp	.+8      	; 0x808 <SetDate+0xac>
                    date->day = di;
                }
            }
            refresh = NO_REFRESH;

            mi = (selected == SELECT_MONTH) ? blink : NORMAL_INTENSITY;
     800:	9f 2d       	mov	r25, r15
     802:	89 e3       	ldi	r24, 0x39	; 57
     804:	02 c0       	rjmp	.+4      	; 0x80a <SetDate+0xae>
            di = (selected == SELECT_DAY) ? blink : NORMAL_INTENSITY;
     806:	8f 2d       	mov	r24, r15
                    date->day = di;
                }
            }
            refresh = NO_REFRESH;

            mi = (selected == SELECT_MONTH) ? blink : NORMAL_INTENSITY;
     808:	99 e3       	ldi	r25, 0x39	; 57
            di = (selected == SELECT_DAY) ? blink : NORMAL_INTENSITY;
            yi = (selected == SELECT_YEAR) ? blink : NORMAL_INTENSITY;
     80a:	29 e3       	ldi	r18, 0x39	; 57
     80c:	03 c0       	rjmp	.+6      	; 0x814 <SetDate+0xb8>
     80e:	2f 2d       	mov	r18, r15
     810:	89 e3       	ldi	r24, 0x39	; 57
                    date->day = di;
                }
            }
            refresh = NO_REFRESH;

            mi = (selected == SELECT_MONTH) ? blink : NORMAL_INTENSITY;
     812:	99 e3       	ldi	r25, 0x39	; 57
            di = (selected == SELECT_DAY) ? blink : NORMAL_INTENSITY;
            yi = (selected == SELECT_YEAR) ? blink : NORMAL_INTENSITY;
            fprintf_P(&primary, PSTR("\r*%c%02u*%c%02u*%c%02u"),
     814:	4d b7       	in	r20, 0x3d	; 61
     816:	5e b7       	in	r21, 0x3e	; 62
     818:	40 51       	subi	r20, 0x10	; 16
     81a:	50 40       	sbci	r21, 0x00	; 0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	5e bf       	out	0x3e, r21	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	4d bf       	out	0x3d, r20	; 61
     826:	ed b7       	in	r30, 0x3d	; 61
     828:	fe b7       	in	r31, 0x3e	; 62
     82a:	31 96       	adiw	r30, 0x01	; 1
     82c:	ad b7       	in	r26, 0x3d	; 61
     82e:	be b7       	in	r27, 0x3e	; 62
     830:	12 96       	adiw	r26, 0x02	; 2
     832:	5c 92       	st	X, r5
     834:	4e 92       	st	-X, r4
     836:	11 97       	sbiw	r26, 0x01	; 1
     838:	33 82       	std	Z+3, r3	; 0x03
     83a:	22 82       	std	Z+2, r2	; 0x02
     83c:	94 83       	std	Z+4, r25	; 0x04
     83e:	15 82       	std	Z+5, r1	; 0x05
     840:	d8 01       	movw	r26, r16
     842:	12 96       	adiw	r26, 0x02	; 2
     844:	9c 91       	ld	r25, X
     846:	12 97       	sbiw	r26, 0x02	; 2
     848:	96 83       	std	Z+6, r25	; 0x06
     84a:	17 82       	std	Z+7, r1	; 0x07
     84c:	80 87       	std	Z+8, r24	; 0x08
     84e:	11 86       	std	Z+9, r1	; 0x09
     850:	13 96       	adiw	r26, 0x03	; 3
     852:	8c 91       	ld	r24, X
     854:	13 97       	sbiw	r26, 0x03	; 3
     856:	82 87       	std	Z+10, r24	; 0x0a
     858:	13 86       	std	Z+11, r1	; 0x0b
     85a:	24 87       	std	Z+12, r18	; 0x0c
     85c:	15 86       	std	Z+13, r1	; 0x0d
     85e:	8d 91       	ld	r24, X+
     860:	9c 91       	ld	r25, X
     862:	64 e6       	ldi	r22, 0x64	; 100
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__udivmodhi4>
     86a:	97 87       	std	Z+15, r25	; 0x0f
     86c:	86 87       	std	Z+14, r24	; 0x0e
     86e:	0e 94 87 18 	call	0x310e	; 0x310e <fprintf_P>
     872:	ed b7       	in	r30, 0x3d	; 61
     874:	fe b7       	in	r31, 0x3e	; 62
     876:	70 96       	adiw	r30, 0x10	; 16
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	fe bf       	out	0x3e, r31	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	ed bf       	out	0x3d, r30	; 61
                                mi, date->month,
                                di, date->day,
                                yi, date->year % 100);
        }

        event = wait_next_event(0);
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	0e 94 00 0b 	call	0x1600	; 0x1600 <wait_next_event>
     888:	29 2f       	mov	r18, r25

        // Check for blink or autorepeat timer expiration

        if (event.event == TIMER_EXPIRED) {
     88a:	85 32       	cpi	r24, 0x25	; 37
     88c:	c1 f5       	brne	.+112    	; 0x8fe <SetDate+0x1a2>
            if (event.data == blink_timer) {
     88e:	99 15       	cp	r25, r9
     890:	41 f4       	brne	.+16     	; 0x8a2 <SetDate+0x146>
                blink = (blink == BLINK_LOW_INTENSITY) ? 
     892:	f1 e3       	ldi	r31, 0x31	; 49
                        BLINK_HIGH_INTENSITY : BLINK_LOW_INTENSITY;
                refresh = DO_REFRESH;
     894:	81 e0       	ldi	r24, 0x01	; 1

        // Check for blink or autorepeat timer expiration

        if (event.event == TIMER_EXPIRED) {
            if (event.data == blink_timer) {
                blink = (blink == BLINK_LOW_INTENSITY) ? 
     896:	ff 16       	cp	r15, r31
     898:	09 f0       	breq	.+2      	; 0x89c <SetDate+0x140>
     89a:	3d c1       	rjmp	.+634    	; 0xb16 <__stack+0x217>
     89c:	b9 e3       	ldi	r27, 0x39	; 57
     89e:	fb 2e       	mov	r15, r27
     8a0:	43 c1       	rjmp	.+646    	; 0xb28 <__stack+0x229>
            }

            // Auto-repeat button handling
            // Simulates button presses for the date-setting buttons

            else if ((event.data == repeat_timer) &&
     8a2:	9c 15       	cp	r25, r12
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <SetDate+0x14c>
     8a6:	3f c1       	rjmp	.+638    	; 0xb26 <__stack+0x227>
     8a8:	d1 30       	cpi	r29, 0x01	; 1
     8aa:	09 f0       	breq	.+2      	; 0x8ae <SetDate+0x152>
     8ac:	3c c1       	rjmp	.+632    	; 0xb26 <__stack+0x227>
                     (repeat == REPEAT_ON)) {
                button = read_button_debounced();
     8ae:	0e 94 de 07 	call	0xfbc	; 0xfbc <read_button_debounced>
     8b2:	e8 2e       	mov	r14, r24
                if (button.button0) {
     8b4:	80 ff       	sbrs	r24, 0
     8b6:	04 c0       	rjmp	.+8      	; 0x8c0 <SetDate+0x164>
                    add_event(BUTTON0_PRESSED, 0);
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
                }
                if (button.button1) {
     8c0:	e1 fe       	sbrs	r14, 1
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <SetDate+0x170>
                    add_event(BUTTON1_PRESSED, 0);
     8c4:	85 e0       	ldi	r24, 0x05	; 5
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
                }
                if (button.button2) {
     8cc:	e2 fe       	sbrs	r14, 2
     8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <SetDate+0x17c>
                    add_event(BUTTON2_PRESSED, 0);
     8d0:	89 e0       	ldi	r24, 0x09	; 9
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
                }
                if (button.button3) {
     8d8:	e3 fe       	sbrs	r14, 3
     8da:	04 c0       	rjmp	.+8      	; 0x8e4 <SetDate+0x188>
                    add_event(BUTTON3_PRESSED, 0);
     8dc:	8d e0       	ldi	r24, 0x0D	; 13
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
                }
                if (button.button4) {
     8e4:	e4 fe       	sbrs	r14, 4
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <SetDate+0x194>
                    add_event(BUTTON4_PRESSED, 0);
     8e8:	81 e1       	ldi	r24, 0x11	; 17
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
                }
                if (button.button5) {
     8f0:	e5 fe       	sbrs	r14, 5
     8f2:	19 c1       	rjmp	.+562    	; 0xb26 <__stack+0x227>
                    add_event(BUTTON5_PRESSED, 0);
     8f4:	85 e1       	ldi	r24, 0x15	; 21
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
     8fc:	14 c1       	rjmp	.+552    	; 0xb26 <__stack+0x227>
            }
        }

        // Button 0 : Decrement month

        else if (event.event == BUTTON0_PRESSED) {
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	71 f4       	brne	.+28     	; 0x91e <__stack+0x1f>
            date->month--;
     902:	d8 01       	movw	r26, r16
     904:	12 96       	adiw	r26, 0x02	; 2
     906:	8c 91       	ld	r24, X
     908:	12 97       	sbiw	r26, 0x02	; 2
     90a:	81 50       	subi	r24, 0x01	; 1
     90c:	12 96       	adiw	r26, 0x02	; 2
     90e:	8c 93       	st	X, r24
     910:	12 97       	sbiw	r26, 0x02	; 2
            if (date->month < 1) {
     912:	88 23       	and	r24, r24
     914:	69 f4       	brne	.+26     	; 0x930 <__stack+0x31>
                date->month = 12;
     916:	12 96       	adiw	r26, 0x02	; 2
     918:	8c 92       	st	X, r8
     91a:	12 97       	sbiw	r26, 0x02	; 2
     91c:	09 c0       	rjmp	.+18     	; 0x930 <__stack+0x31>
            refresh = CHANGED_REFRESH;
        }

        // Button 1 : Increment month

        else if (event.event == BUTTON1_PRESSED) {
     91e:	85 30       	cpi	r24, 0x05	; 5
     920:	49 f4       	brne	.+18     	; 0x934 <__stack+0x35>
            date->month++;
     922:	f8 01       	movw	r30, r16
     924:	82 81       	ldd	r24, Z+2	; 0x02
     926:	8f 5f       	subi	r24, 0xFF	; 255
     928:	82 83       	std	Z+2, r24	; 0x02
            if (date->month > 12) {
     92a:	8d 30       	cpi	r24, 0x0D	; 13
     92c:	08 f0       	brcs	.+2      	; 0x930 <__stack+0x31>
                date->month = 1;
     92e:	d2 82       	std	Z+2, r13	; 0x02
            }
            selected = SELECT_MONTH;
     930:	c1 e0       	ldi	r28, 0x01	; 1
     932:	51 cf       	rjmp	.-350    	; 0x7d6 <SetDate+0x7a>
            refresh = CHANGED_REFRESH;
        }

        // Button 2 : Decrement day

        else if (event.event == BUTTON2_PRESSED) {
     934:	89 30       	cpi	r24, 0x09	; 9
     936:	a1 f4       	brne	.+40     	; 0x960 <__stack+0x61>
            date->day--;
     938:	d8 01       	movw	r26, r16
     93a:	13 96       	adiw	r26, 0x03	; 3
     93c:	8c 91       	ld	r24, X
     93e:	13 97       	sbiw	r26, 0x03	; 3
     940:	81 50       	subi	r24, 0x01	; 1
     942:	13 96       	adiw	r26, 0x03	; 3
     944:	8c 93       	st	X, r24
     946:	13 97       	sbiw	r26, 0x03	; 3
            if (date->day < 1) {
     948:	88 23       	and	r24, r24
     94a:	f9 f4       	brne	.+62     	; 0x98a <__stack+0x8b>
                date->day = days_in_month(date->month, date->year);
     94c:	6d 91       	ld	r22, X+
     94e:	7c 91       	ld	r23, X
     950:	11 97       	sbiw	r26, 0x01	; 1
     952:	12 96       	adiw	r26, 0x02	; 2
     954:	8c 91       	ld	r24, X
     956:	0e 94 1c 09 	call	0x1238	; 0x1238 <days_in_month>
     95a:	f8 01       	movw	r30, r16
     95c:	83 83       	std	Z+3, r24	; 0x03
     95e:	15 c0       	rjmp	.+42     	; 0x98a <__stack+0x8b>
            refresh = CHANGED_REFRESH;
        }

        // Button 3 : Increment day

        else if (event.event == BUTTON3_PRESSED) {
     960:	8d 30       	cpi	r24, 0x0D	; 13
     962:	a9 f4       	brne	.+42     	; 0x98e <__stack+0x8f>
            date->day++;
     964:	d8 01       	movw	r26, r16
     966:	13 96       	adiw	r26, 0x03	; 3
     968:	cc 91       	ld	r28, X
     96a:	13 97       	sbiw	r26, 0x03	; 3
     96c:	cf 5f       	subi	r28, 0xFF	; 255
     96e:	13 96       	adiw	r26, 0x03	; 3
     970:	cc 93       	st	X, r28
     972:	13 97       	sbiw	r26, 0x03	; 3
            if (date->day > days_in_month(date->month, date->year)) {
     974:	6d 91       	ld	r22, X+
     976:	7c 91       	ld	r23, X
     978:	11 97       	sbiw	r26, 0x01	; 1
     97a:	12 96       	adiw	r26, 0x02	; 2
     97c:	8c 91       	ld	r24, X
     97e:	0e 94 1c 09 	call	0x1238	; 0x1238 <days_in_month>
     982:	8c 17       	cp	r24, r28
     984:	10 f4       	brcc	.+4      	; 0x98a <__stack+0x8b>
                date->day = 1;
     986:	f8 01       	movw	r30, r16
     988:	d3 82       	std	Z+3, r13	; 0x03
            }
            selected = SELECT_DAY;
     98a:	c2 e0       	ldi	r28, 0x02	; 2
     98c:	24 cf       	rjmp	.-440    	; 0x7d6 <SetDate+0x7a>
            refresh = CHANGED_REFRESH;
        }

        // Button 4 : Decrement year

        else if (event.event == BUTTON4_PRESSED) {
     98e:	81 31       	cpi	r24, 0x11	; 17
     990:	89 f4       	brne	.+34     	; 0x9b4 <__stack+0xb5>
            date->year--;
     992:	d8 01       	movw	r26, r16
     994:	8d 91       	ld	r24, X+
     996:	9c 91       	ld	r25, X
     998:	11 97       	sbiw	r26, 0x01	; 1
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	11 96       	adiw	r26, 0x01	; 1
     99e:	9c 93       	st	X, r25
     9a0:	8e 93       	st	-X, r24
            if (date->year < MIN_YEAR) {
     9a2:	b7 e0       	ldi	r27, 0x07	; 7
     9a4:	80 3d       	cpi	r24, 0xD0	; 208
     9a6:	9b 07       	cpc	r25, r27
     9a8:	08 f0       	brcs	.+2      	; 0x9ac <__stack+0xad>
     9aa:	e1 c0       	rjmp	.+450    	; 0xb6e <__stack+0x26f>
                date->year = MAX_YEAR;
     9ac:	f8 01       	movw	r30, r16
     9ae:	71 82       	std	Z+1, r7	; 0x01
     9b0:	60 82       	st	Z, r6
     9b2:	dd c0       	rjmp	.+442    	; 0xb6e <__stack+0x26f>
            refresh = CHANGED_REFRESH;
        }

        // Button 5 : Increment year

        else if (event.event == BUTTON5_PRESSED) {
     9b4:	85 31       	cpi	r24, 0x15	; 21
     9b6:	89 f4       	brne	.+34     	; 0x9da <__stack+0xdb>
            date->year++;
     9b8:	d8 01       	movw	r26, r16
     9ba:	8d 91       	ld	r24, X+
     9bc:	9c 91       	ld	r25, X
     9be:	11 97       	sbiw	r26, 0x01	; 1
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	11 96       	adiw	r26, 0x01	; 1
     9c4:	9c 93       	st	X, r25
     9c6:	8e 93       	st	-X, r24
            if (date->year > MAX_YEAR) {
     9c8:	b8 e0       	ldi	r27, 0x08	; 8
     9ca:	84 33       	cpi	r24, 0x34	; 52
     9cc:	9b 07       	cpc	r25, r27
     9ce:	08 f4       	brcc	.+2      	; 0x9d2 <__stack+0xd3>
     9d0:	ce c0       	rjmp	.+412    	; 0xb6e <__stack+0x26f>
                date->year = MIN_YEAR;
     9d2:	f8 01       	movw	r30, r16
     9d4:	b1 82       	std	Z+1, r11	; 0x01
     9d6:	a0 82       	st	Z, r10
     9d8:	ca c0       	rjmp	.+404    	; 0xb6e <__stack+0x26f>
        // Button 0 + 1 : Reset month
        // Button 2 + 3 : Reset day
        // Button 4 + 5 : Reset year
        // Button 0 + 5 : Reset date to 01/01/2000

        else if (event.event == BUTTON_CHORD) {
     9da:	82 32       	cpi	r24, 0x22	; 34
     9dc:	f9 f4       	brne	.+62     	; 0xa1c <__stack+0x11d>
            if (event.data == 0x03) {       // Button 0+1
     9de:	93 30       	cpi	r25, 0x03	; 3
     9e0:	29 f4       	brne	.+10     	; 0x9ec <__stack+0xed>
                date->month = 1;
     9e2:	d8 01       	movw	r26, r16
     9e4:	12 96       	adiw	r26, 0x02	; 2
     9e6:	dc 92       	st	X, r13
     9e8:	12 97       	sbiw	r26, 0x02	; 2
     9ea:	16 c0       	rjmp	.+44     	; 0xa18 <__stack+0x119>
                repeat = REPEAT_INHIBIT;
                selected = SELECT_MONTH;
                refresh = CHANGED_REFRESH;
            }
            else if (event.data == 0x0C) {  // Button 2+3
     9ec:	9c 30       	cpi	r25, 0x0C	; 12
     9ee:	21 f4       	brne	.+8      	; 0x9f8 <__stack+0xf9>
                date->day = 1;
     9f0:	f8 01       	movw	r30, r16
     9f2:	d3 82       	std	Z+3, r13	; 0x03
                repeat = REPEAT_INHIBIT;
     9f4:	d2 e0       	ldi	r29, 0x02	; 2
     9f6:	c9 cf       	rjmp	.-110    	; 0x98a <__stack+0x8b>
                selected = SELECT_DAY;
                refresh = CHANGED_REFRESH;
            }
            else if (event.data == 0x30) {  // Button 4+5
     9f8:	90 33       	cpi	r25, 0x30	; 48
     9fa:	31 f4       	brne	.+12     	; 0xa08 <__stack+0x109>
                date->year = MIN_YEAR;
     9fc:	d8 01       	movw	r26, r16
     9fe:	11 96       	adiw	r26, 0x01	; 1
     a00:	bc 92       	st	X, r11
     a02:	ae 92       	st	-X, r10
                repeat = REPEAT_INHIBIT;
     a04:	d2 e0       	ldi	r29, 0x02	; 2
     a06:	b3 c0       	rjmp	.+358    	; 0xb6e <__stack+0x26f>
                selected = SELECT_YEAR;
                refresh = CHANGED_REFRESH;
            }
            else if (event.data == 0x21) {  // Button 0+5
     a08:	91 32       	cpi	r25, 0x21	; 33
     a0a:	09 f0       	breq	.+2      	; 0xa0e <__stack+0x10f>
     a0c:	8c c0       	rjmp	.+280    	; 0xb26 <__stack+0x227>
                date->month = 1;
     a0e:	f8 01       	movw	r30, r16
     a10:	d2 82       	std	Z+2, r13	; 0x02
                date->day = 1;
     a12:	d3 82       	std	Z+3, r13	; 0x03
                date->year = MIN_YEAR;
     a14:	b1 82       	std	Z+1, r11	; 0x01
     a16:	a0 82       	st	Z, r10
                repeat = REPEAT_INHIBIT;
     a18:	d2 e0       	ldi	r29, 0x02	; 2
     a1a:	8a cf       	rjmp	.-236    	; 0x930 <__stack+0x31>
            }
        }

        // Left rotary movement : Select date element (m,d,y)

        else if (event.event == LEFT_ROTARY_MOVED) {
     a1c:	84 32       	cpi	r24, 0x24	; 36
     a1e:	41 f4       	brne	.+16     	; 0xa30 <__stack+0x131>
            selected += event.data;
     a20:	c9 0f       	add	r28, r25
            if ((selected == SELECT_NONE) || (selected & 0x80)) {
     a22:	1c 16       	cp	r1, r28
     a24:	0c f0       	brlt	.+2      	; 0xa28 <__stack+0x129>
     a26:	a5 c0       	rjmp	.+330    	; 0xb72 <__stack+0x273>
                selected = SELECT_YEAR;
            }
            else if (selected > SELECT_YEAR) {
     a28:	c4 30       	cpi	r28, 0x04	; 4
     a2a:	08 f0       	brcs	.+2      	; 0xa2e <__stack+0x12f>
     a2c:	a6 c0       	rjmp	.+332    	; 0xb7a <__stack+0x27b>
     a2e:	9c c0       	rjmp	.+312    	; 0xb68 <__stack+0x269>
            refresh = DO_REFRESH;
        }

        // Right rotary movement : Change selected date element

        else if (event.event == RIGHT_ROTARY_MOVED) {
     a30:	83 32       	cpi	r24, 0x23	; 35
     a32:	09 f0       	breq	.+2      	; 0xa36 <__stack+0x137>
     a34:	4f c0       	rjmp	.+158    	; 0xad4 <__stack+0x1d5>
            refresh = CHANGED_REFRESH;

            // Inc/dec month if selected

            if (selected == SELECT_MONTH) {
     a36:	c1 30       	cpi	r28, 0x01	; 1
     a38:	b1 f4       	brne	.+44     	; 0xa66 <__stack+0x167>
                date->month += event.data;
     a3a:	d8 01       	movw	r26, r16
     a3c:	12 96       	adiw	r26, 0x02	; 2
     a3e:	8c 91       	ld	r24, X
     a40:	12 97       	sbiw	r26, 0x02	; 2
     a42:	89 0f       	add	r24, r25
     a44:	12 96       	adiw	r26, 0x02	; 2
     a46:	8c 93       	st	X, r24
     a48:	12 97       	sbiw	r26, 0x02	; 2
                if ((date->month < 1) || (date->month & 0x80)) {
     a4a:	18 16       	cp	r1, r24
     a4c:	2c f0       	brlt	.+10     	; 0xa58 <__stack+0x159>
                    date->month += 12;
     a4e:	84 5f       	subi	r24, 0xF4	; 244
     a50:	12 96       	adiw	r26, 0x02	; 2
     a52:	8c 93       	st	X, r24
     a54:	12 97       	sbiw	r26, 0x02	; 2
     a56:	bf ce       	rjmp	.-642    	; 0x7d6 <SetDate+0x7a>
                }
                else if (date->month > 12) {
     a58:	8d 30       	cpi	r24, 0x0D	; 13
     a5a:	08 f4       	brcc	.+2      	; 0xa5e <__stack+0x15f>
     a5c:	bc ce       	rjmp	.-648    	; 0x7d6 <SetDate+0x7a>
                    date->month -= 12;
     a5e:	8c 50       	subi	r24, 0x0C	; 12
     a60:	f8 01       	movw	r30, r16
     a62:	82 83       	std	Z+2, r24	; 0x02
     a64:	b8 ce       	rjmp	.-656    	; 0x7d6 <SetDate+0x7a>
                }
            }

            // Inc/dec day if selected

            else if (selected == SELECT_DAY) {
     a66:	c2 30       	cpi	r28, 0x02	; 2
     a68:	d1 f4       	brne	.+52     	; 0xa9e <__stack+0x19f>
                date->day += event.data;
     a6a:	d8 01       	movw	r26, r16
     a6c:	13 96       	adiw	r26, 0x03	; 3
     a6e:	8c 91       	ld	r24, X
     a70:	13 97       	sbiw	r26, 0x03	; 3
     a72:	89 0f       	add	r24, r25
     a74:	13 96       	adiw	r26, 0x03	; 3
     a76:	8c 93       	st	X, r24
     a78:	13 97       	sbiw	r26, 0x03	; 3
                di = days_in_month(date->month, date->year);
     a7a:	6d 91       	ld	r22, X+
     a7c:	7c 91       	ld	r23, X
     a7e:	11 97       	sbiw	r26, 0x01	; 1
     a80:	12 96       	adiw	r26, 0x02	; 2
     a82:	8c 91       	ld	r24, X
     a84:	0e 94 1c 09 	call	0x1238	; 0x1238 <days_in_month>
                if ((date->day < 1) || (date->day & 0x80)) {
     a88:	f8 01       	movw	r30, r16
     a8a:	93 81       	ldd	r25, Z+3	; 0x03
     a8c:	19 16       	cp	r1, r25
     a8e:	14 f0       	brlt	.+4      	; 0xa94 <__stack+0x195>
                    date->day = di;
     a90:	83 83       	std	Z+3, r24	; 0x03
     a92:	a1 ce       	rjmp	.-702    	; 0x7d6 <SetDate+0x7a>
                }
                else if (date->day > di) {
     a94:	89 17       	cp	r24, r25
     a96:	08 f0       	brcs	.+2      	; 0xa9a <__stack+0x19b>
     a98:	9e ce       	rjmp	.-708    	; 0x7d6 <SetDate+0x7a>
                    date->day = 1;
     a9a:	d3 82       	std	Z+3, r13	; 0x03
     a9c:	9c ce       	rjmp	.-712    	; 0x7d6 <SetDate+0x7a>
                }
            }

            // Inc/dec year if selected

            else if (selected == SELECT_YEAR) {
     a9e:	c3 30       	cpi	r28, 0x03	; 3
     aa0:	e9 f5       	brne	.+122    	; 0xb1c <__stack+0x21d>
                date->year += event.data;
     aa2:	f8 01       	movw	r30, r16
     aa4:	80 81       	ld	r24, Z
     aa6:	91 81       	ldd	r25, Z+1	; 0x01
     aa8:	82 0f       	add	r24, r18
     aaa:	91 1d       	adc	r25, r1
     aac:	91 83       	std	Z+1, r25	; 0x01
     aae:	80 83       	st	Z, r24
                if (date->year < MIN_YEAR) {
     ab0:	f7 e0       	ldi	r31, 0x07	; 7
     ab2:	80 3d       	cpi	r24, 0xD0	; 208
     ab4:	9f 07       	cpc	r25, r31
     ab6:	28 f4       	brcc	.+10     	; 0xac2 <__stack+0x1c3>
                    date->year = MAX_YEAR;
     ab8:	d8 01       	movw	r26, r16
     aba:	11 96       	adiw	r26, 0x01	; 1
     abc:	7c 92       	st	X, r7
     abe:	6e 92       	st	-X, r6
     ac0:	8a ce       	rjmp	.-748    	; 0x7d6 <SetDate+0x7a>
                }
                else if (date->year > MAX_YEAR) {
     ac2:	b8 e0       	ldi	r27, 0x08	; 8
     ac4:	84 33       	cpi	r24, 0x34	; 52
     ac6:	9b 07       	cpc	r25, r27
     ac8:	08 f4       	brcc	.+2      	; 0xacc <__stack+0x1cd>
     aca:	85 ce       	rjmp	.-758    	; 0x7d6 <SetDate+0x7a>
                    date->year = MIN_YEAR;
     acc:	f8 01       	movw	r30, r16
     ace:	b1 82       	std	Z+1, r11	; 0x01
     ad0:	a0 82       	st	Z, r10
     ad2:	81 ce       	rjmp	.-766    	; 0x7d6 <SetDate+0x7a>
            }
        }

        // Right rotary button : Set date & exit

        else if (event.event == RIGHT_BUTTON_PRESSED) {
     ad4:	89 31       	cpi	r24, 0x19	; 25
     ad6:	09 f4       	brne	.+2      	; 0xada <__stack+0x1db>
     ad8:	54 c0       	rjmp	.+168    	; 0xb82 <__stack+0x283>
            selected = SELECT_SET;
        }

        // Left rotary button : Cancel date setting

        else if (event.event == LEFT_BUTTON_PRESSED) {
     ada:	8d 31       	cpi	r24, 0x1D	; 29
     adc:	09 f4       	brne	.+2      	; 0xae0 <__stack+0x1e1>
     ade:	53 c0       	rjmp	.+166    	; 0xb86 <__stack+0x287>
        }

        // Enable repeat mode if any of the 6 digit buttons are
        // pressed for a 'long' time

        else if ((repeat == REPEAT_OFF) &&
     ae0:	dd 23       	and	r29, r29
     ae2:	61 f4       	brne	.+24     	; 0xafc <__stack+0x1fd>
     ae4:	84 30       	cpi	r24, 0x04	; 4
     ae6:	e1 f0       	breq	.+56     	; 0xb20 <__stack+0x221>
                 ((event.event == BUTTON0_LONG) ||
     ae8:	88 30       	cpi	r24, 0x08	; 8
     aea:	d1 f0       	breq	.+52     	; 0xb20 <__stack+0x221>
                  (event.event == BUTTON1_LONG) ||
     aec:	8c 30       	cpi	r24, 0x0C	; 12
     aee:	c1 f0       	breq	.+48     	; 0xb20 <__stack+0x221>
                  (event.event == BUTTON2_LONG) ||
     af0:	80 31       	cpi	r24, 0x10	; 16
     af2:	b1 f0       	breq	.+44     	; 0xb20 <__stack+0x221>
                  (event.event == BUTTON3_LONG) ||
     af4:	84 31       	cpi	r24, 0x14	; 20
     af6:	a1 f0       	breq	.+40     	; 0xb20 <__stack+0x221>
                  (event.event == BUTTON4_LONG) ||
     af8:	88 31       	cpi	r24, 0x18	; 24
     afa:	91 f0       	breq	.+36     	; 0xb20 <__stack+0x221>
            repeat = REPEAT_ON;
        }

        // Disable repeat mode when any of the 6 digit buttons are released

        else if ((event.event == BUTTON0_RELEASED) ||
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	91 f0       	breq	.+36     	; 0xb24 <__stack+0x225>
     b00:	86 30       	cpi	r24, 0x06	; 6
     b02:	81 f0       	breq	.+32     	; 0xb24 <__stack+0x225>
                 (event.event == BUTTON1_RELEASED) ||
     b04:	8a 30       	cpi	r24, 0x0A	; 10
     b06:	71 f0       	breq	.+28     	; 0xb24 <__stack+0x225>
                 (event.event == BUTTON2_RELEASED) ||
     b08:	8e 30       	cpi	r24, 0x0E	; 14
     b0a:	61 f0       	breq	.+24     	; 0xb24 <__stack+0x225>
                 (event.event == BUTTON3_RELEASED) ||
     b0c:	82 31       	cpi	r24, 0x12	; 18
     b0e:	51 f0       	breq	.+20     	; 0xb24 <__stack+0x225>
                 (event.event == BUTTON4_RELEASED) ||
     b10:	86 31       	cpi	r24, 0x16	; 22
     b12:	49 f4       	brne	.+18     	; 0xb26 <__stack+0x227>
     b14:	07 c0       	rjmp	.+14     	; 0xb24 <__stack+0x225>

        // Check for blink or autorepeat timer expiration

        if (event.event == TIMER_EXPIRED) {
            if (event.data == blink_timer) {
                blink = (blink == BLINK_LOW_INTENSITY) ? 
     b16:	a1 e3       	ldi	r26, 0x31	; 49
     b18:	fa 2e       	mov	r15, r26
     b1a:	06 c0       	rjmp	.+12     	; 0xb28 <__stack+0x229>
        }

        // Right rotary movement : Change selected date element

        else if (event.event == RIGHT_ROTARY_MOVED) {
            refresh = CHANGED_REFRESH;
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__stack+0x229>
                  (event.event == BUTTON1_LONG) ||
                  (event.event == BUTTON2_LONG) ||
                  (event.event == BUTTON3_LONG) ||
                  (event.event == BUTTON4_LONG) ||
                  (event.event == BUTTON5_LONG))) {
            repeat = REPEAT_ON;
     b20:	d1 e0       	ldi	r29, 0x01	; 1
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <__stack+0x227>
                 (event.event == BUTTON1_RELEASED) ||
                 (event.event == BUTTON2_RELEASED) ||
                 (event.event == BUTTON3_RELEASED) ||
                 (event.event == BUTTON4_RELEASED) ||
                 (event.event == BUTTON5_RELEASED)) {
            repeat = REPEAT_OFF;
     b24:	d0 e0       	ldi	r29, 0x00	; 0

        else if ((event.event == BUTTON0_RELEASED) ||
                 (event.event == BUTTON1_RELEASED) ||
                 (event.event == BUTTON2_RELEASED) ||
                 (event.event == BUTTON3_RELEASED) ||
                 (event.event == BUTTON4_RELEASED) ||
     b26:	80 e0       	ldi	r24, 0x00	; 0
                 (event.event == BUTTON5_RELEASED)) {
            repeat = REPEAT_OFF;
        }


    } while (selected <= SELECT_YEAR);
     b28:	c4 30       	cpi	r28, 0x04	; 4
     b2a:	08 f4       	brcc	.+2      	; 0xb2e <__stack+0x22f>
     b2c:	4f ce       	rjmp	.-866    	; 0x7cc <SetDate+0x70>

    // Deallocate event timers

    timer_stop(blink_timer);
     b2e:	89 2d       	mov	r24, r9
     b30:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <timer_stop>
    timer_stop(repeat_timer);
     b34:	8c 2d       	mov	r24, r12
     b36:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <timer_stop>

    return (selected == SELECT_SET);
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	c4 30       	cpi	r28, 0x04	; 4
     b3e:	09 f0       	breq	.+2      	; 0xb42 <__stack+0x243>
     b40:	80 e0       	ldi	r24, 0x00	; 0
}
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	cf 90       	pop	r12
     b52:	bf 90       	pop	r11
     b54:	af 90       	pop	r10
     b56:	9f 90       	pop	r9
     b58:	8f 90       	pop	r8
     b5a:	7f 90       	pop	r7
     b5c:	6f 90       	pop	r6
     b5e:	5f 90       	pop	r5
     b60:	4f 90       	pop	r4
     b62:	3f 90       	pop	r3
     b64:	2f 90       	pop	r2
     b66:	08 95       	ret
                selected = SELECT_YEAR;
            }
            else if (selected > SELECT_YEAR) {
                selected = SELECT_MONTH;
            }
            blink = BLINK_LOW_INTENSITY;
     b68:	f1 e3       	ldi	r31, 0x31	; 49
     b6a:	ff 2e       	mov	r15, r31
     b6c:	41 ce       	rjmp	.-894    	; 0x7f0 <SetDate+0x94>
        else if (event.event == BUTTON5_PRESSED) {
            date->year++;
            if (date->year > MAX_YEAR) {
                date->year = MIN_YEAR;
            }
            selected = SELECT_YEAR;
     b6e:	c3 e0       	ldi	r28, 0x03	; 3
     b70:	32 ce       	rjmp	.-924    	; 0x7d6 <SetDate+0x7a>
                selected = SELECT_YEAR;
            }
            else if (selected > SELECT_YEAR) {
                selected = SELECT_MONTH;
            }
            blink = BLINK_LOW_INTENSITY;
     b72:	e1 e3       	ldi	r30, 0x31	; 49
     b74:	fe 2e       	mov	r15, r30
        // Left rotary movement : Select date element (m,d,y)

        else if (event.event == LEFT_ROTARY_MOVED) {
            selected += event.data;
            if ((selected == SELECT_NONE) || (selected & 0x80)) {
                selected = SELECT_YEAR;
     b76:	c3 e0       	ldi	r28, 0x03	; 3
     b78:	4a ce       	rjmp	.-876    	; 0x80e <SetDate+0xb2>
            }
            else if (selected > SELECT_YEAR) {
                selected = SELECT_MONTH;
            }
            blink = BLINK_LOW_INTENSITY;
     b7a:	71 e3       	ldi	r23, 0x31	; 49
     b7c:	f7 2e       	mov	r15, r23
            selected += event.data;
            if ((selected == SELECT_NONE) || (selected & 0x80)) {
                selected = SELECT_YEAR;
            }
            else if (selected > SELECT_YEAR) {
                selected = SELECT_MONTH;
     b7e:	c1 e0       	ldi	r28, 0x01	; 1
     b80:	3f ce       	rjmp	.-898    	; 0x800 <SetDate+0xa4>
        }

        // Right rotary button : Set date & exit

        else if (event.event == RIGHT_BUTTON_PRESSED) {
            selected = SELECT_SET;
     b82:	c4 e0       	ldi	r28, 0x04	; 4
     b84:	d4 cf       	rjmp	.-88     	; 0xb2e <__stack+0x22f>
        }

        // Left rotary button : Cancel date setting

        else if (event.event == LEFT_BUTTON_PRESSED) {
            selected = SELECT_CANCEL;
     b86:	c5 e0       	ldi	r28, 0x05	; 5
     b88:	d2 cf       	rjmp	.-92     	; 0xb2e <__stack+0x22f>

00000b8a <TerminalMode>:
/******************************************************************************
 *
 ******************************************************************************/

void TerminalMode(void)
{
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
    event_t event;
    int16_t ch;

    printf_P(PSTR("\r\nTerminal mode ready.\r\n"));
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <TerminalMode+0x6>
     b90:	8e e9       	ldi	r24, 0x9E	; 158
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	ed b7       	in	r30, 0x3d	; 61
     b96:	fe b7       	in	r31, 0x3e	; 62
     b98:	92 83       	std	Z+2, r25	; 0x02
     b9a:	81 83       	std	Z+1, r24	; 0x01
     b9c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <printf_P>

    fprintf_P(&primary, PSTR("\v\f"));
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <TerminalMode+0x18>
     ba2:	87 e8       	ldi	r24, 0x87	; 135
     ba4:	92 e0       	ldi	r25, 0x02	; 2
     ba6:	ed b7       	in	r30, 0x3d	; 61
     ba8:	fe b7       	in	r31, 0x3e	; 62
     baa:	92 83       	std	Z+2, r25	; 0x02
     bac:	81 83       	std	Z+1, r24	; 0x01
     bae:	87 eb       	ldi	r24, 0xB7	; 183
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	94 83       	std	Z+4, r25	; 0x04
     bb4:	83 83       	std	Z+3, r24	; 0x03
     bb6:	0e 94 87 18 	call	0x310e	; 0x310e <fprintf_P>
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
 
    do {
        event = get_next_event(0);
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <get_next_event>
        if (event.event == BUTTON1_PRESSED) {
     bc8:	85 30       	cpi	r24, 0x05	; 5
     bca:	81 f0       	breq	.+32     	; 0xbec <TerminalMode+0x62>
            break;
        }

        ch = serial_in();
     bcc:	0e 94 90 14 	call	0x2920	; 0x2920 <serial_in>
     bd0:	ec 01       	movw	r28, r24

        if (ch >= 0) {
     bd2:	97 fd       	sbrc	r25, 7
     bd4:	f6 cf       	rjmp	.-20     	; 0xbc2 <TerminalMode+0x38>
            if (ch == '\e') {
     bd6:	8b 31       	cpi	r24, 0x1B	; 27
     bd8:	91 05       	cpc	r25, r1
     bda:	41 f0       	breq	.+16     	; 0xbec <TerminalMode+0x62>
                break;
            }
            serial_out(ch);
     bdc:	0e 94 fe 14 	call	0x29fc	; 0x29fc <serial_out>
            nixie_out(ch, &primary);
     be0:	8c 2f       	mov	r24, r28
     be2:	67 e8       	ldi	r22, 0x87	; 135
     be4:	72 e0       	ldi	r23, 0x02	; 2
     be6:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nixie_out>
     bea:	eb cf       	rjmp	.-42     	; 0xbc2 <TerminalMode+0x38>
        }
    } while (1);

    printf_P(PSTR("\r\nTerminal mode exit\r\n"));
     bec:	00 d0       	rcall	.+0      	; 0xbee <TerminalMode+0x64>
     bee:	8a eb       	ldi	r24, 0xBA	; 186
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	ed b7       	in	r30, 0x3d	; 61
     bf4:	fe b7       	in	r31, 0x3e	; 62
     bf6:	92 83       	std	Z+2, r25	; 0x02
     bf8:	81 83       	std	Z+1, r24	; 0x01
     bfa:	0e 94 f5 18 	call	0x31ea	; 0x31ea <printf_P>
    nixie_out('\v', &primary);
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	8b e0       	ldi	r24, 0x0B	; 11
     c04:	67 e8       	ldi	r22, 0x87	; 135
     c06:	72 e0       	ldi	r23, 0x02	; 2
     c08:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nixie_out>
}
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <ClockDisplay>:
/******************************************************************************
 *
 ******************************************************************************/

void ClockDisplay(void)
{
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	28 97       	sbiw	r28, 0x08	; 8
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
    uint8_t set = 0;
    clock_mode_t display_mode = MODE_CLOCK_12;
    clock_mode_t clock_mode = MODE_CLOCK_12;

//  nixie_out('\f',&primary);
    nixie_out('\f',&secondary);
     c26:	8c e0       	ldi	r24, 0x0C	; 12
     c28:	69 e7       	ldi	r22, 0x79	; 121
     c2a:	72 e0       	ldi	r23, 0x02	; 2
     c2c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <nixie_out>

    nixie_show_stream(&primary);
     c30:	87 e8       	ldi	r24, 0x87	; 135
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <nixie_show_stream>
    nixie_crossfade_rate(1);
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <nixie_crossfade_rate>
    time_t time;
    date_t date;
    uint8_t am_pm;
    uint8_t set = 0;
    clock_mode_t display_mode = MODE_CLOCK_12;
    clock_mode_t clock_mode = MODE_CLOCK_12;
     c3e:	00 e0       	ldi	r16, 0x00	; 0
    event_t event;
    time_t time;
    date_t date;
    uint8_t am_pm;
    uint8_t set = 0;
    clock_mode_t display_mode = MODE_CLOCK_12;
     c40:	10 e0       	ldi	r17, 0x00	; 0
{
    event_t event;
    time_t time;
    date_t date;
    uint8_t am_pm;
    uint8_t set = 0;
     c42:	ff 24       	eor	r15, r15
        switch (display_mode) {
            set = 'y';      // For future alarm annunciator
            case MODE_CLOCK_12 :
                get_time_12(&time, &am_pm);
                am_pm = am_pm ? 'X' : 'x';
                fprintf_P(&secondary, PSTR("\r~%2u.%02u.%02u%c%c"),
     c44:	e9 e7       	ldi	r30, 0x79	; 121
     c46:	ce 2e       	mov	r12, r30
     c48:	e2 e0       	ldi	r30, 0x02	; 2
     c4a:	de 2e       	mov	r13, r30
     c4c:	f1 ed       	ldi	r31, 0xD1	; 209
     c4e:	af 2e       	mov	r10, r31
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	bf 2e       	mov	r11, r31
                    time.hour, time.minute, time.second, am_pm, set);
                break;

            case MODE_CLOCK_24 :
                get_time_24(&time);
                fprintf_P(&secondary, PSTR("\r~x%02u.%02u.%02u%c"),
     c54:	a5 ee       	ldi	r26, 0xE5	; 229
     c56:	8a 2e       	mov	r8, r26
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	9a 2e       	mov	r9, r26
                    time.hour, time.minute, time.second, set);
                break;

            case MODE_DATE :
                get_date(&date);
                date.year %= 100;
     c5c:	b4 e6       	ldi	r27, 0x64	; 100
     c5e:	6b 2e       	mov	r6, r27
     c60:	71 2c       	mov	r7, r1
                fprintf_P(&secondary, PSTR("\r~`x%02u%02u%02u%c"),
     c62:	89 ef       	ldi	r24, 0xF9	; 249
     c64:	48 2e       	mov	r4, r24
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	58 2e       	mov	r5, r24
                    clock_mode = MODE_CLOCK_24;
                    fprintf_P(&secondary, PSTR("\f  24"));
                }
                else {
                    clock_mode = MODE_CLOCK_12;
                    fprintf_P(&secondary, PSTR("\f  12"));
     c6a:	22 e1       	ldi	r18, 0x12	; 18
     c6c:	22 2e       	mov	r2, r18
     c6e:	21 e0       	ldi	r18, 0x01	; 1
     c70:	32 2e       	mov	r3, r18
     c72:	03 c0       	rjmp	.+6      	; 0xc7a <ClockDisplay+0x68>
        nixie_crossfade(&secondary);

        event = wait_next_event(0);

        if (event.event == BUTTON0_PRESSED) {
            display_mode = (display_mode == MODE_DATE) ?
     c74:	12 e0       	ldi	r17, 0x02	; 2
     c76:	60 c0       	rjmp	.+192    	; 0xd38 <ClockDisplay+0x126>
                           clock_mode : MODE_DATE;
        }

        else if (event.event == BUTTON5_PRESSED) {
            if ((display_mode == MODE_CLOCK_12) ||
     c78:	10 2f       	mov	r17, r16

    nixie_show_stream(&primary);
    nixie_crossfade_rate(1);

    do {
        switch (display_mode) {
     c7a:	11 30       	cpi	r17, 0x01	; 1
     c7c:	d9 f1       	breq	.+118    	; 0xcf4 <ClockDisplay+0xe2>
     c7e:	11 30       	cpi	r17, 0x01	; 1
     c80:	20 f0       	brcs	.+8      	; 0xc8a <ClockDisplay+0x78>
     c82:	12 30       	cpi	r17, 0x02	; 2
     c84:	09 f0       	breq	.+2      	; 0xc88 <ClockDisplay+0x76>
     c86:	8b c0       	rjmp	.+278    	; 0xd9e <ClockDisplay+0x18c>
     c88:	57 c0       	rjmp	.+174    	; 0xd38 <ClockDisplay+0x126>
            set = 'y';      // For future alarm annunciator
            case MODE_CLOCK_12 :
                get_time_12(&time, &am_pm);
     c8a:	ce 01       	movw	r24, r28
     c8c:	02 96       	adiw	r24, 0x02	; 2
     c8e:	be 01       	movw	r22, r28
     c90:	6f 5f       	subi	r22, 0xFF	; 255
     c92:	7f 4f       	sbci	r23, 0xFF	; 255
     c94:	0e 94 b5 08 	call	0x116a	; 0x116a <get_time_12>
                am_pm = am_pm ? 'X' : 'x';
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	88 23       	and	r24, r24
     c9c:	11 f0       	breq	.+4      	; 0xca2 <ClockDisplay+0x90>
     c9e:	88 e5       	ldi	r24, 0x58	; 88
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <ClockDisplay+0x92>
     ca2:	88 e7       	ldi	r24, 0x78	; 120
     ca4:	89 83       	std	Y+1, r24	; 0x01
                fprintf_P(&secondary, PSTR("\r~%2u.%02u.%02u%c%c"),
     ca6:	2d b7       	in	r18, 0x3d	; 61
     ca8:	3e b7       	in	r19, 0x3e	; 62
     caa:	2e 50       	subi	r18, 0x0E	; 14
     cac:	30 40       	sbci	r19, 0x00	; 0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	3e bf       	out	0x3e, r19	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	2d bf       	out	0x3d, r18	; 61
     cb8:	ed b7       	in	r30, 0x3d	; 61
     cba:	fe b7       	in	r31, 0x3e	; 62
     cbc:	31 96       	adiw	r30, 0x01	; 1
     cbe:	ad b7       	in	r26, 0x3d	; 61
     cc0:	be b7       	in	r27, 0x3e	; 62
     cc2:	12 96       	adiw	r26, 0x02	; 2
     cc4:	dc 92       	st	X, r13
     cc6:	ce 92       	st	-X, r12
     cc8:	11 97       	sbiw	r26, 0x01	; 1
     cca:	b3 82       	std	Z+3, r11	; 0x03
     ccc:	a2 82       	std	Z+2, r10	; 0x02
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	94 83       	std	Z+4, r25	; 0x04
     cd2:	15 82       	std	Z+5, r1	; 0x05
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	96 83       	std	Z+6, r25	; 0x06
     cd8:	17 82       	std	Z+7, r1	; 0x07
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	90 87       	std	Z+8, r25	; 0x08
     cde:	11 86       	std	Z+9, r1	; 0x09
     ce0:	82 87       	std	Z+10, r24	; 0x0a
     ce2:	13 86       	std	Z+11, r1	; 0x0b
     ce4:	f4 86       	std	Z+12, r15	; 0x0c
     ce6:	15 86       	std	Z+13, r1	; 0x0d
     ce8:	0e 94 87 18 	call	0x310e	; 0x310e <fprintf_P>
                    time.hour, time.minute, time.second, am_pm, set);
                break;
     cec:	ed b7       	in	r30, 0x3d	; 61
     cee:	fe b7       	in	r31, 0x3e	; 62
     cf0:	3e 96       	adiw	r30, 0x0e	; 14
     cf2:	50 c0       	rjmp	.+160    	; 0xd94 <ClockDisplay+0x182>

            case MODE_CLOCK_24 :
                get_time_24(&time);
     cf4:	ce 01       	movw	r24, r28
     cf6:	02 96       	adiw	r24, 0x02	; 2
     cf8:	0e 94 cb 08 	call	0x1196	; 0x1196 <get_time_24>
                fprintf_P(&secondary, PSTR("\r~x%02u.%02u.%02u%c"),
     cfc:	2d b7       	in	r18, 0x3d	; 61
     cfe:	3e b7       	in	r19, 0x3e	; 62
     d00:	2c 50       	subi	r18, 0x0C	; 12
     d02:	30 40       	sbci	r19, 0x00	; 0
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	3e bf       	out	0x3e, r19	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	2d bf       	out	0x3d, r18	; 61
     d0e:	ed b7       	in	r30, 0x3d	; 61
     d10:	fe b7       	in	r31, 0x3e	; 62
     d12:	31 96       	adiw	r30, 0x01	; 1
     d14:	ad b7       	in	r26, 0x3d	; 61
     d16:	be b7       	in	r27, 0x3e	; 62
     d18:	12 96       	adiw	r26, 0x02	; 2
     d1a:	dc 92       	st	X, r13
     d1c:	ce 92       	st	-X, r12
     d1e:	11 97       	sbiw	r26, 0x01	; 1
     d20:	93 82       	std	Z+3, r9	; 0x03
     d22:	82 82       	std	Z+2, r8	; 0x02
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	84 83       	std	Z+4, r24	; 0x04
     d28:	15 82       	std	Z+5, r1	; 0x05
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	86 83       	std	Z+6, r24	; 0x06
     d2e:	17 82       	std	Z+7, r1	; 0x07
     d30:	8c 81       	ldd	r24, Y+4	; 0x04
     d32:	80 87       	std	Z+8, r24	; 0x08
     d34:	11 86       	std	Z+9, r1	; 0x09
     d36:	27 c0       	rjmp	.+78     	; 0xd86 <ClockDisplay+0x174>
                    time.hour, time.minute, time.second, set);
                break;

            case MODE_DATE :
                get_date(&date);
     d38:	ce 01       	movw	r24, r28
     d3a:	05 96       	adiw	r24, 0x05	; 5
     d3c:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <get_date>
                date.year %= 100;
     d40:	8d 81       	ldd	r24, Y+5	; 0x05
     d42:	9e 81       	ldd	r25, Y+6	; 0x06
     d44:	b3 01       	movw	r22, r6
     d46:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__udivmodhi4>
     d4a:	8d 83       	std	Y+5, r24	; 0x05
     d4c:	9e 83       	std	Y+6, r25	; 0x06
                fprintf_P(&secondary, PSTR("\r~`x%02u%02u%02u%c"),
     d4e:	2d b7       	in	r18, 0x3d	; 61
     d50:	3e b7       	in	r19, 0x3e	; 62
     d52:	2c 50       	subi	r18, 0x0C	; 12
     d54:	30 40       	sbci	r19, 0x00	; 0
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	3e bf       	out	0x3e, r19	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	2d bf       	out	0x3d, r18	; 61
     d60:	ed b7       	in	r30, 0x3d	; 61
     d62:	fe b7       	in	r31, 0x3e	; 62
     d64:	31 96       	adiw	r30, 0x01	; 1
     d66:	ad b7       	in	r26, 0x3d	; 61
     d68:	be b7       	in	r27, 0x3e	; 62
     d6a:	12 96       	adiw	r26, 0x02	; 2
     d6c:	dc 92       	st	X, r13
     d6e:	ce 92       	st	-X, r12
     d70:	11 97       	sbiw	r26, 0x01	; 1
     d72:	53 82       	std	Z+3, r5	; 0x03
     d74:	42 82       	std	Z+2, r4	; 0x02
     d76:	2f 81       	ldd	r18, Y+7	; 0x07
     d78:	24 83       	std	Z+4, r18	; 0x04
     d7a:	15 82       	std	Z+5, r1	; 0x05
     d7c:	28 85       	ldd	r18, Y+8	; 0x08
     d7e:	26 83       	std	Z+6, r18	; 0x06
     d80:	17 82       	std	Z+7, r1	; 0x07
     d82:	80 87       	std	Z+8, r24	; 0x08
     d84:	91 87       	std	Z+9, r25	; 0x09
     d86:	f2 86       	std	Z+10, r15	; 0x0a
     d88:	13 86       	std	Z+11, r1	; 0x0b
     d8a:	0e 94 87 18 	call	0x310e	; 0x310e <fprintf_P>
                    date.month, date.day, date.year, set);
                break;
     d8e:	ed b7       	in	r30, 0x3d	; 61
     d90:	fe b7       	in	r31, 0x3e	; 62
     d92:	3c 96       	adiw	r30, 0x0c	; 12
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	fe bf       	out	0x3e, r31	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	ed bf       	out	0x3d, r30	; 61
        };

        nixie_crossfade(&secondary);
     d9e:	89 e7       	ldi	r24, 0x79	; 121
     da0:	92 e0       	ldi	r25, 0x02	; 2
     da2:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <nixie_crossfade>

        event = wait_next_event(0);
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	0e 94 00 0b 	call	0x1600	; 0x1600 <wait_next_event>

        if (event.event == BUTTON0_PRESSED) {
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	21 f4       	brne	.+8      	; 0xdb8 <ClockDisplay+0x1a6>
            display_mode = (display_mode == MODE_DATE) ?
     db0:	12 30       	cpi	r17, 0x02	; 2
     db2:	09 f0       	breq	.+2      	; 0xdb6 <ClockDisplay+0x1a4>
     db4:	5f cf       	rjmp	.-322    	; 0xc74 <ClockDisplay+0x62>
     db6:	60 cf       	rjmp	.-320    	; 0xc78 <ClockDisplay+0x66>
                           clock_mode : MODE_DATE;
        }

        else if (event.event == BUTTON5_PRESSED) {
     db8:	85 31       	cpi	r24, 0x15	; 21
     dba:	b9 f5       	brne	.+110    	; 0xe2a <ClockDisplay+0x218>
            if ((display_mode == MODE_CLOCK_12) ||
     dbc:	12 30       	cpi	r17, 0x02	; 2
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <ClockDisplay+0x1b0>
     dc0:	5b cf       	rjmp	.-330    	; 0xc78 <ClockDisplay+0x66>
                (display_mode == MODE_CLOCK_24)) {
                if (clock_mode == MODE_CLOCK_12) {
     dc2:	00 23       	and	r16, r16
     dc4:	b1 f4       	brne	.+44     	; 0xdf2 <ClockDisplay+0x1e0>
                    clock_mode = MODE_CLOCK_24;
                    fprintf_P(&secondary, PSTR("\f  24"));
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <ClockDisplay+0x1b6>
     dc8:	00 d0       	rcall	.+0      	; 0xdca <ClockDisplay+0x1b8>
     dca:	ad b7       	in	r26, 0x3d	; 61
     dcc:	be b7       	in	r27, 0x3e	; 62
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	dc 92       	st	X, r13
     dd2:	ce 92       	st	-X, r12
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	ec e0       	ldi	r30, 0x0C	; 12
     dd8:	f1 e0       	ldi	r31, 0x01	; 1
     dda:	14 96       	adiw	r26, 0x04	; 4
     ddc:	fc 93       	st	X, r31
     dde:	ee 93       	st	-X, r30
     de0:	13 97       	sbiw	r26, 0x03	; 3
     de2:	0e 94 87 18 	call	0x310e	; 0x310e <fprintf_P>
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0

        else if (event.event == BUTTON5_PRESSED) {
            if ((display_mode == MODE_CLOCK_12) ||
                (display_mode == MODE_CLOCK_24)) {
                if (clock_mode == MODE_CLOCK_12) {
                    clock_mode = MODE_CLOCK_24;
     dee:	01 e0       	ldi	r16, 0x01	; 1
     df0:	13 c0       	rjmp	.+38     	; 0xe18 <ClockDisplay+0x206>
                    fprintf_P(&secondary, PSTR("\f  24"));
                }
                else {
                    clock_mode = MODE_CLOCK_12;
                    fprintf_P(&secondary, PSTR("\f  12"));
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <ClockDisplay+0x1e2>
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <ClockDisplay+0x1e4>
     df6:	ad b7       	in	r26, 0x3d	; 61
     df8:	be b7       	in	r27, 0x3e	; 62
     dfa:	12 96       	adiw	r26, 0x02	; 2
     dfc:	dc 92       	st	X, r13
     dfe:	ce 92       	st	-X, r12
     e00:	11 97       	sbiw	r26, 0x01	; 1
     e02:	14 96       	adiw	r26, 0x04	; 4
     e04:	3c 92       	st	X, r3
     e06:	2e 92       	st	-X, r2
     e08:	13 97       	sbiw	r26, 0x03	; 3
     e0a:	0e 94 87 18 	call	0x310e	; 0x310e <fprintf_P>
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
                if (clock_mode == MODE_CLOCK_12) {
                    clock_mode = MODE_CLOCK_24;
                    fprintf_P(&secondary, PSTR("\f  24"));
                }
                else {
                    clock_mode = MODE_CLOCK_12;
     e16:	00 e0       	ldi	r16, 0x00	; 0
                    fprintf_P(&secondary, PSTR("\f  12"));
                }
                nixie_crossfade(&secondary);
     e18:	89 e7       	ldi	r24, 0x79	; 121
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <nixie_crossfade>
                delay_ms(500);
     e20:	84 ef       	ldi	r24, 0xF4	; 244
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay_ms>
     e28:	27 cf       	rjmp	.-434    	; 0xc78 <ClockDisplay+0x66>
            }
            display_mode = clock_mode;
        }

        else if (event.event == BUTTON1_LONG) {
     e2a:	88 30       	cpi	r24, 0x08	; 8
     e2c:	19 f4       	brne	.+6      	; 0xe34 <ClockDisplay+0x222>
            TerminalMode();
     e2e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <TerminalMode>
     e32:	23 cf       	rjmp	.-442    	; 0xc7a <ClockDisplay+0x68>
        }

        else if (event.event == RIGHT_BUTTON_LONG) {
     e34:	8c 31       	cpi	r24, 0x1C	; 28
     e36:	09 f0       	breq	.+2      	; 0xe3a <ClockDisplay+0x228>
     e38:	20 cf       	rjmp	.-448    	; 0xc7a <ClockDisplay+0x68>
            if (display_mode == MODE_DATE) {
                get_date(&date);
     e3a:	ce 01       	movw	r24, r28
        else if (event.event == BUTTON1_LONG) {
            TerminalMode();
        }

        else if (event.event == RIGHT_BUTTON_LONG) {
            if (display_mode == MODE_DATE) {
     e3c:	12 30       	cpi	r17, 0x02	; 2
     e3e:	81 f4       	brne	.+32     	; 0xe60 <ClockDisplay+0x24e>
                get_date(&date);
     e40:	05 96       	adiw	r24, 0x05	; 5
     e42:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <get_date>
                set = SetDate(&date);
     e46:	ce 01       	movw	r24, r28
     e48:	05 96       	adiw	r24, 0x05	; 5
     e4a:	0e 94 ae 03 	call	0x75c	; 0x75c <SetDate>
     e4e:	f8 2e       	mov	r15, r24
                if (set) {
     e50:	88 23       	and	r24, r24
     e52:	09 f4       	brne	.+2      	; 0xe56 <ClockDisplay+0x244>
     e54:	71 cf       	rjmp	.-286    	; 0xd38 <ClockDisplay+0x126>
                    set_date(&date);
     e56:	ce 01       	movw	r24, r28
     e58:	05 96       	adiw	r24, 0x05	; 5
     e5a:	0e 94 0b 09 	call	0x1216	; 0x1216 <set_date>
     e5e:	6c cf       	rjmp	.-296    	; 0xd38 <ClockDisplay+0x126>
                }
            }
            else {
                get_time_24(&time);
     e60:	02 96       	adiw	r24, 0x02	; 2
     e62:	0e 94 cb 08 	call	0x1196	; 0x1196 <get_time_24>
                set = SetTime(clock_mode, &time);
     e66:	80 2f       	mov	r24, r16
     e68:	be 01       	movw	r22, r28
     e6a:	6e 5f       	subi	r22, 0xFE	; 254
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	0e 94 9f 01 	call	0x33e	; 0x33e <SetTime>
     e72:	f8 2e       	mov	r15, r24
                if (set) {
     e74:	88 23       	and	r24, r24
     e76:	09 f4       	brne	.+2      	; 0xe7a <ClockDisplay+0x268>
     e78:	00 cf       	rjmp	.-512    	; 0xc7a <ClockDisplay+0x68>
                    set_time_24(&time);
     e7a:	ce 01       	movw	r24, r28
     e7c:	02 96       	adiw	r24, 0x02	; 2
     e7e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <set_time_24>
     e82:	fb ce       	rjmp	.-522    	; 0xc7a <ClockDisplay+0x68>

00000e84 <getstr>:
 ******************************************************************************/

extern uint16_t player_export;

void getstr(char *str, uint8_t max_len)
{
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	ec 01       	movw	r28, r24
    char ch;
    int c;
    uint8_t index;

    if (!max_len) {
     e8e:	66 23       	and	r22, r22
     e90:	71 f0       	breq	.+28     	; 0xeae <getstr+0x2a>
        *str = 0;
        return;
    }

    max_len--;
     e92:	06 2f       	mov	r16, r22
     e94:	01 50       	subi	r16, 0x01	; 1
    index = 0;
     e96:	10 e0       	ldi	r17, 0x00	; 0
 
    do {
        do {
            c = serial_in();
     e98:	0e 94 90 14 	call	0x2920	; 0x2920 <serial_in>
        } while (c < 0);
     e9c:	97 fd       	sbrc	r25, 7
     e9e:	fc cf       	rjmp	.-8      	; 0xe98 <getstr+0x14>
        ch = c;

        if (ch == '\r') {
     ea0:	8d 30       	cpi	r24, 0x0D	; 13
     ea2:	59 f4       	brne	.+22     	; 0xeba <getstr+0x36>
            str[index] = 0;
     ea4:	c1 0f       	add	r28, r17
     ea6:	d1 1d       	adc	r29, r1
     ea8:	18 82       	st	Y, r1
            serial_crlf();
     eaa:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <serial_crlf>
            serial_out(ch);
            index++;
        }
    } while (1);
 
    str[index] = 0;
     eae:	18 82       	st	Y, r1
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	08 95       	ret
            str[index] = 0;
            serial_crlf();
            break;
        }

        if (ch == '\b') {
     eba:	88 30       	cpi	r24, 0x08	; 8
     ebc:	69 f4       	brne	.+26     	; 0xed8 <getstr+0x54>
            if (index) {
     ebe:	11 23       	and	r17, r17
     ec0:	59 f3       	breq	.-42     	; 0xe98 <getstr+0x14>
                index--;
     ec2:	11 50       	subi	r17, 0x01	; 1
                serial_out('\b');
     ec4:	88 e0       	ldi	r24, 0x08	; 8
     ec6:	0e 94 fe 14 	call	0x29fc	; 0x29fc <serial_out>
                serial_out(' ');
     eca:	80 e2       	ldi	r24, 0x20	; 32
     ecc:	0e 94 fe 14 	call	0x29fc	; 0x29fc <serial_out>
                serial_out('\b');
     ed0:	88 e0       	ldi	r24, 0x08	; 8
     ed2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <serial_out>
     ed6:	e0 cf       	rjmp	.-64     	; 0xe98 <getstr+0x14>
            }
            continue;
        }

        if (ch < 0x20) {
     ed8:	80 32       	cpi	r24, 0x20	; 32
     eda:	f0 f2       	brcs	.-68     	; 0xe98 <getstr+0x14>
            continue;
        }

        if (index < max_len) {
     edc:	10 17       	cp	r17, r16
     ede:	e0 f6       	brcc	.-72     	; 0xe98 <getstr+0x14>
            str[index] = ch;
     ee0:	fe 01       	movw	r30, r28
     ee2:	e1 0f       	add	r30, r17
     ee4:	f1 1d       	adc	r31, r1
     ee6:	80 83       	st	Z, r24
            serial_out(ch);
     ee8:	0e 94 fe 14 	call	0x29fc	; 0x29fc <serial_out>
            index++;
     eec:	1f 5f       	subi	r17, 0xFF	; 255
     eee:	d4 cf       	rjmp	.-88     	; 0xe98 <getstr+0x14>

00000ef0 <display_test>:
/******************************************************************************
 *
 ******************************************************************************/

void display_test(void)
{
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
    uint8_t digit;
    uint8_t index;
    event_t event;

    nixie_crossfade_rate(3);
     ef6:	83 e0       	ldi	r24, 0x03	; 3
     ef8:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <nixie_crossfade_rate>
     efc:	c0 e3       	ldi	r28, 0x30	; 48
     efe:	d0 e0       	ldi	r29, 0x00	; 0

    for (digit = '0'; digit <= '9'; digit++) {
        if (digit & 0x01) {
     f00:	c0 ff       	sbrs	r28, 0
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <display_test+0x1a>
            fputs_P(PSTR("\r`XY"), &secondary);
     f04:	88 e6       	ldi	r24, 0x68	; 104
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <display_test+0x1e>
        }
        else {
            fputs_P(PSTR("\r<>xy"), &secondary);
     f0a:	8d e6       	ldi	r24, 0x6D	; 109
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	69 e7       	ldi	r22, 0x79	; 121
     f10:	72 e0       	ldi	r23, 0x02	; 2
     f12:	0e 94 cf 18 	call	0x319e	; 0x319e <fputs_P>
{
    uint8_t digit;
    uint8_t index;
    event_t event;

    nixie_crossfade_rate(3);
     f16:	16 e0       	ldi	r17, 0x06	; 6
        }
        else {
            fputs_P(PSTR("\r<>xy"), &secondary);
        }
        for (index = 0; index < NIXIE_DISPLAY_WIDTH; index++) {
            fputc(digit, &secondary);
     f18:	ce 01       	movw	r24, r28
     f1a:	69 e7       	ldi	r22, 0x79	; 121
     f1c:	72 e0       	ldi	r23, 0x02	; 2
     f1e:	0e 94 a3 18 	call	0x3146	; 0x3146 <fputc>
     f22:	11 50       	subi	r17, 0x01	; 1
            fputs_P(PSTR("\r`XY"), &secondary);
        }
        else {
            fputs_P(PSTR("\r<>xy"), &secondary);
        }
        for (index = 0; index < NIXIE_DISPLAY_WIDTH; index++) {
     f24:	c9 f7       	brne	.-14     	; 0xf18 <display_test+0x28>
            fputc(digit, &secondary);
        }

        nixie_crossfade(&secondary);
     f26:	89 e7       	ldi	r24, 0x79	; 121
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <nixie_crossfade>

        event = wait_next_event(0);
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	0e 94 00 0b 	call	0x1600	; 0x1600 <wait_next_event>

        if (event.event != ONE_SECOND_ELAPSED) {
     f34:	86 32       	cpi	r24, 0x26	; 38
     f36:	21 f4       	brne	.+8      	; 0xf40 <display_test+0x50>
     f38:	21 96       	adiw	r28, 0x01	; 1
    uint8_t index;
    event_t event;

    nixie_crossfade_rate(3);

    for (digit = '0'; digit <= '9'; digit++) {
     f3a:	ca 33       	cpi	r28, 0x3A	; 58
     f3c:	d1 05       	cpc	r29, r1
     f3e:	01 f7       	brne	.-64     	; 0xf00 <display_test+0x10>

        if (event.event != ONE_SECOND_ELAPSED) {
            break;
        }
    }
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	08 95       	ret

00000f48 <reset_buttons>:
    button_scan_enable = 0;

    // Reset all button-down timers

    for (index = 0; index < NUM_BUTTONS; index++) {
        button_timer[index] = 0;
     f48:	10 92 11 01 	sts	0x0111, r1
     f4c:	10 92 10 01 	sts	0x0110, r1
     f50:	10 92 13 01 	sts	0x0113, r1
     f54:	10 92 12 01 	sts	0x0112, r1
     f58:	10 92 15 01 	sts	0x0115, r1
     f5c:	10 92 14 01 	sts	0x0114, r1
     f60:	10 92 17 01 	sts	0x0117, r1
     f64:	10 92 16 01 	sts	0x0116, r1
     f68:	10 92 19 01 	sts	0x0119, r1
     f6c:	10 92 18 01 	sts	0x0118, r1
     f70:	10 92 1b 01 	sts	0x011B, r1
     f74:	10 92 1a 01 	sts	0x011A, r1
     f78:	10 92 1d 01 	sts	0x011D, r1
     f7c:	10 92 1c 01 	sts	0x011C, r1
     f80:	10 92 1f 01 	sts	0x011F, r1
     f84:	10 92 1e 01 	sts	0x011E, r1
    }

    // Clear all button status registers

    button_state.all = 0;
     f88:	10 92 29 01 	sts	0x0129, r1
    button_debounced.all = 0;
     f8c:	10 92 28 01 	sts	0x0128, r1
    button_chord.all = 0;
     f90:	10 92 27 01 	sts	0x0127, r1
    button_pressed.all = 0;
     f94:	10 92 26 01 	sts	0x0126, r1
    button_released.all = 0;
     f98:	10 92 25 01 	sts	0x0125, r1
    button_short.all = 0;
     f9c:	10 92 24 01 	sts	0x0124, r1
    button_long.all = 0;
     fa0:	10 92 23 01 	sts	0x0123, r1
    button_previous.all = 0;
     fa4:	10 92 22 01 	sts	0x0122, r1

    // Enable button scanning

    button_scan_enable = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 2a 01 	sts	0x012A, r24
}
     fae:	08 95       	ret

00000fb0 <button_enable>:
 * Returns: Nothing
 ******************************************************************************/

void button_enable(uint8_t enable)
{
    button_scan_enable = enable;
     fb0:	80 93 2a 01 	sts	0x012A, r24
}
     fb4:	08 95       	ret

00000fb6 <read_button_state>:
 * Returns: Bitmap indicating which buttons are presently pressed
 ******************************************************************************/

button_t read_button_state(void)
{
    return button_state;
     fb6:	80 91 29 01 	lds	r24, 0x0129
}
     fba:	08 95       	ret

00000fbc <read_button_debounced>:
 *          debounced.
 ******************************************************************************/

button_t read_button_debounced(void)
{
    return button_debounced;
     fbc:	80 91 28 01 	lds	r24, 0x0128
}
     fc0:	08 95       	ret

00000fc2 <read_button_chord>:
 *          read.
 ******************************************************************************/

button_t read_button_chord(void)
{
    return button_chord;
     fc2:	80 91 27 01 	lds	r24, 0x0127
}
     fc6:	08 95       	ret

00000fc8 <reset_button_chord>:

button_t reset_button_chord(void)
{
    button_t temp;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     fc8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fca:	f8 94       	cli
    {
        temp = button_chord;
     fcc:	80 91 27 01 	lds	r24, 0x0127
        button_chord.all = 0;
     fd0:	10 92 27 01 	sts	0x0127, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fd4:	9f bf       	out	0x3f, r25	; 63
    }

    return temp;
}
     fd6:	08 95       	ret

00000fd8 <read_buttons_pressed>:
 *          latch.
 ******************************************************************************/

button_t read_buttons_pressed(void)
{
    return button_pressed;
     fd8:	80 91 26 01 	lds	r24, 0x0126
}
     fdc:	08 95       	ret

00000fde <reset_buttons_pressed>:

button_t reset_buttons_pressed(void)
{
    button_t temp;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     fde:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fe0:	f8 94       	cli
    {
        temp = button_pressed;
     fe2:	80 91 26 01 	lds	r24, 0x0126
        button_pressed.all = 0;
     fe6:	10 92 26 01 	sts	0x0126, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fea:	9f bf       	out	0x3f, r25	; 63
    }

    return temp;
}
     fec:	08 95       	ret

00000fee <read_buttons_released>:
 *          button-released latch.
 ******************************************************************************/

button_t read_buttons_released(void)
{
    return button_released;
     fee:	80 91 25 01 	lds	r24, 0x0125
}
     ff2:	08 95       	ret

00000ff4 <reset_buttons_released>:

button_t reset_buttons_released(void)
{
    button_t temp;
     
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     ff4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ff6:	f8 94       	cli
    {
        temp = button_released;
     ff8:	80 91 25 01 	lds	r24, 0x0125
        button_released.all = 0;
     ffc:	10 92 25 01 	sts	0x0125, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1000:	9f bf       	out	0x3f, r25	; 63
    }

    return temp;
}
    1002:	08 95       	ret

00001004 <read_short_buttons>:
 *          and-release latch.
 ******************************************************************************/

button_t read_short_buttons(void)
{
    return button_short;
    1004:	80 91 24 01 	lds	r24, 0x0124
}
    1008:	08 95       	ret

0000100a <reset_short_buttons>:

button_t reset_short_buttons(void)
{
    button_t temp;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    100a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    100c:	f8 94       	cli
    {
        temp = button_short;
    100e:	80 91 24 01 	lds	r24, 0x0124
        button_short.all = 0;
    1012:	10 92 24 01 	sts	0x0124, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1016:	9f bf       	out	0x3f, r25	; 63
    }

    return temp;
}
    1018:	08 95       	ret

0000101a <read_long_buttons>:
 *          reset_long_buttons() to clear the long-button-recognized latch.
 ******************************************************************************/

button_t read_long_buttons(void)
{
    return button_long;
    101a:	80 91 23 01 	lds	r24, 0x0123
}
    101e:	08 95       	ret

00001020 <reset_long_buttons>:

button_t reset_long_buttons(void)
{
    button_t temp;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1020:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1022:	f8 94       	cli
    {
        temp = button_long;
    1024:	80 91 23 01 	lds	r24, 0x0123
        button_long.all = 0;
    1028:	10 92 23 01 	sts	0x0123, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    102c:	9f bf       	out	0x3f, r25	; 63
    }

    return temp;
}
    102e:	08 95       	ret

00001030 <button_scan>:
    volatile register uint16_t *down_time_p; // Ptr to button-down timers
    register uint16_t down_time;        // Current button down timer value

    // Exit if scanning disabled

    if (!button_scan_enable) {
    1030:	80 91 2a 01 	lds	r24, 0x012A
    1034:	88 23       	and	r24, r24
    1036:	09 f4       	brne	.+2      	; 0x103a <button_scan+0xa>
    1038:	85 c0       	rjmp	.+266    	; 0x1144 <button_scan+0x114>
    //   y = PINREAD(x) != 0;
    //   or
    //   y = PINREAD(x) ? 1 : 0;
    // The method used below generates the tightest code when avr-gcc is used.

    button.all = 0xFF;
    103a:	4f ef       	ldi	r20, 0xFF	; 255

    if (PINREAD(BUTTON0)) {
    103c:	1c 99       	sbic	0x03, 4	; 3
        button.button0 = 0;
    103e:	4e ef       	ldi	r20, 0xFE	; 254
    }
    if (PINREAD(BUTTON1)) {
    1040:	31 99       	sbic	0x06, 1	; 6
        button.button1 = 0;
    1042:	4d 7f       	andi	r20, 0xFD	; 253
    }
    if (PINREAD(BUTTON2)) {
    1044:	32 99       	sbic	0x06, 2	; 6
        button.button2 = 0;
    1046:	4b 7f       	andi	r20, 0xFB	; 251
    }
    if (PINREAD(BUTTON3)) {
    1048:	33 99       	sbic	0x06, 3	; 6
        button.button3 = 0;
    104a:	47 7f       	andi	r20, 0xF7	; 247
    }
    if (PINREAD(BUTTON4)) {
    104c:	34 99       	sbic	0x06, 4	; 6
        button.button4 = 0;
    104e:	4f 7e       	andi	r20, 0xEF	; 239
    }
    if (PINREAD(BUTTON5)) {
    1050:	35 99       	sbic	0x06, 5	; 6
        button.button5 = 0;
    1052:	4f 7d       	andi	r20, 0xDF	; 223
    }
    if (PINREAD(LEFT_BUTTON)) {
    1054:	4a 99       	sbic	0x09, 2	; 9
        button.left_button = 0;
    1056:	4f 7b       	andi	r20, 0xBF	; 191
    }
    if (PINREAD(RIGHT_BUTTON)) {
    1058:	4b 99       	sbic	0x09, 3	; 9
        button.right_button = 0;
    105a:	4f 77       	andi	r20, 0x7F	; 127
    }

    button_state = button;
    105c:	40 93 29 01 	sts	0x0129, r20
    // Check for change in button state
    //
    // A button "chord" is valid if the button state has not changed
    // for a sufficiently long period of time (BUTTON_CHORD_DELAY).

    if (button.all == button_previous.all) {
    1060:	80 91 22 01 	lds	r24, 0x0122
    1064:	48 17       	cp	r20, r24
    1066:	f9 f4       	brne	.+62     	; 0x10a6 <button_scan+0x76>
        if (~button_stable) {   // Counter overflow check
    1068:	80 91 20 01 	lds	r24, 0x0120
    106c:	90 91 21 01 	lds	r25, 0x0121
    1070:	2f ef       	ldi	r18, 0xFF	; 255
    1072:	8f 3f       	cpi	r24, 0xFF	; 255
    1074:	92 07       	cpc	r25, r18
    1076:	49 f0       	breq	.+18     	; 0x108a <button_scan+0x5a>
            button_stable++;
    1078:	80 91 20 01 	lds	r24, 0x0120
    107c:	90 91 21 01 	lds	r25, 0x0121
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	90 93 21 01 	sts	0x0121, r25
    1086:	80 93 20 01 	sts	0x0120, r24
        }
        if (button_stable == BUTTON_CHORD_DELAY) {
    108a:	80 91 20 01 	lds	r24, 0x0120
    108e:	90 91 21 01 	lds	r25, 0x0121
    1092:	61 e0       	ldi	r22, 0x01	; 1
    1094:	84 3d       	cpi	r24, 0xD4	; 212
    1096:	96 07       	cpc	r25, r22
    1098:	11 f4       	brne	.+4      	; 0x109e <button_scan+0x6e>
            button_chord = button;
    109a:	40 93 27 01 	sts	0x0127, r20

    for (index = 0; index < NUM_BUTTONS; index++) {
        // Get debounce count for current button
        down_time = *down_time_p;

        if (button.all & mask) {
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	51 e0       	ldi	r21, 0x01	; 1
    10a4:	05 c0       	rjmp	.+10     	; 0x10b0 <button_scan+0x80>
        if (button_stable == BUTTON_CHORD_DELAY) {
            button_chord = button;
        }
    }
    else {
        button_stable = 0;
    10a6:	10 92 21 01 	sts	0x0121, r1
    10aa:	10 92 20 01 	sts	0x0120, r1
    10ae:	f7 cf       	rjmp	.-18     	; 0x109e <button_scan+0x6e>
 *          This function should be called at a constant periodic rate,
 *          typically from a timer interrupt.  This function has been
 *          optimized to run quickly.
 ******************************************************************************/

void button_scan(void)
    10b0:	f9 01       	movw	r30, r18
    10b2:	e0 5f       	subi	r30, 0xF0	; 240
    10b4:	fe 4f       	sbci	r31, 0xFE	; 254
    down_time_p = button_timer;
    mask = 0x01;

    for (index = 0; index < NUM_BUTTONS; index++) {
        // Get debounce count for current button
        down_time = *down_time_p;
    10b6:	80 81       	ld	r24, Z
    10b8:	91 81       	ldd	r25, Z+1	; 0x01

        if (button.all & mask) {
    10ba:	65 2f       	mov	r22, r21
    10bc:	64 23       	and	r22, r20
    10be:	e9 f0       	breq	.+58     	; 0x10fa <button_scan+0xca>

            // Button is pressed (on)
            // Do not increment button-down timer if it is at max already

            if (~down_time) {   // Counter overflow check
    10c0:	6f ef       	ldi	r22, 0xFF	; 255
    10c2:	8f 3f       	cpi	r24, 0xFF	; 255
    10c4:	96 07       	cpc	r25, r22
    10c6:	99 f1       	breq	.+102    	; 0x112e <button_scan+0xfe>
                down_time++;
    10c8:	01 96       	adiw	r24, 0x01	; 1

                if (down_time == BUTTON_SHORT_DELAY) {
    10ca:	8f 31       	cpi	r24, 0x1F	; 31
    10cc:	91 05       	cpc	r25, r1
    10ce:	59 f4       	brne	.+22     	; 0x10e6 <button_scan+0xb6>

                    // Button down long enough to be considered debounced

                    button_pressed.all |= mask;
    10d0:	60 91 26 01 	lds	r22, 0x0126
    10d4:	65 2b       	or	r22, r21
    10d6:	60 93 26 01 	sts	0x0126, r22
                    button_debounced.all |= mask;
    10da:	60 91 28 01 	lds	r22, 0x0128
    10de:	65 2b       	or	r22, r21
    10e0:	60 93 28 01 	sts	0x0128, r22
    10e4:	24 c0       	rjmp	.+72     	; 0x112e <button_scan+0xfe>
                }

                else if (down_time == BUTTON_LONG_DELAY) {
    10e6:	62 e0       	ldi	r22, 0x02	; 2
    10e8:	81 37       	cpi	r24, 0x71	; 113
    10ea:	96 07       	cpc	r25, r22
    10ec:	01 f5       	brne	.+64     	; 0x112e <button_scan+0xfe>

                    // Button down long enough to qualifiy as a long press

                    button_long.all |= mask;
    10ee:	60 91 23 01 	lds	r22, 0x0123
    10f2:	65 2b       	or	r22, r21
    10f4:	60 93 23 01 	sts	0x0123, r22
    10f8:	1a c0       	rjmp	.+52     	; 0x112e <button_scan+0xfe>

        else {

            // Button is up (off)

            if (down_time >= BUTTON_SHORT_DELAY) {
    10fa:	8f 31       	cpi	r24, 0x1F	; 31
    10fc:	91 05       	cpc	r25, r1
    10fe:	a8 f0       	brcs	.+42     	; 0x112a <button_scan+0xfa>

                // Button was down long enough to be debounced, so generate
                // a release event

                button_released.all |= mask;
    1100:	60 91 25 01 	lds	r22, 0x0125
    1104:	65 2b       	or	r22, r21
    1106:	60 93 25 01 	sts	0x0125, r22
                button_debounced.all &= (uint8_t) ~mask;
    110a:	70 91 28 01 	lds	r23, 0x0128
    110e:	65 2f       	mov	r22, r21
    1110:	60 95       	com	r22
    1112:	67 23       	and	r22, r23
    1114:	60 93 28 01 	sts	0x0128, r22

                if (down_time < BUTTON_LONG_DELAY) {
    1118:	62 e0       	ldi	r22, 0x02	; 2
    111a:	81 37       	cpi	r24, 0x71	; 113
    111c:	96 07       	cpc	r25, r22
    111e:	28 f4       	brcc	.+10     	; 0x112a <button_scan+0xfa>

                    // Button was down longer than minimum short time,
                    // but not long enough for the long time, so it qualifies
                    // as a short press

                    button_short.all |= mask;
    1120:	80 91 24 01 	lds	r24, 0x0124
    1124:	85 2b       	or	r24, r21
    1126:	80 93 24 01 	sts	0x0124, r24
                }
            }

            down_time = 0;
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
        }

        *down_time_p = down_time;
    112e:	91 83       	std	Z+1, r25	; 0x01
    1130:	80 83       	st	Z, r24
        down_time_p++;

        mask <<= 1;
    1132:	55 0f       	add	r21, r21
    1134:	2e 5f       	subi	r18, 0xFE	; 254
    1136:	3f 4f       	sbci	r19, 0xFF	; 255

    // Put ptr to debounce counts in reg var for fast access
    down_time_p = button_timer;
    mask = 0x01;

    for (index = 0; index < NUM_BUTTONS; index++) {
    1138:	20 31       	cpi	r18, 0x10	; 16
    113a:	31 05       	cpc	r19, r1
    113c:	09 f0       	breq	.+2      	; 0x1140 <button_scan+0x110>
    113e:	b8 cf       	rjmp	.-144    	; 0x10b0 <button_scan+0x80>
        down_time_p++;

        mask <<= 1;
    }

    button_previous = button;
    1140:	40 93 22 01 	sts	0x0122, r20
    1144:	08 95       	ret

00001146 <hour_24_to_12>:
/******************************************************************************
 *
 ******************************************************************************/

void hour_24_to_12(uint8_t hour_24, uint8_t *hour_12, uint8_t *am_pm)
{
    1146:	fb 01       	movw	r30, r22
    *am_pm = (hour_24 >= 12);
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	8c 30       	cpi	r24, 0x0C	; 12
    114c:	08 f4       	brcc	.+2      	; 0x1150 <hour_24_to_12+0xa>
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	da 01       	movw	r26, r20
    1152:	9c 93       	st	X, r25

    *hour_12 = hour_24;
    1154:	80 83       	st	Z, r24
    if (hour_24 == 0) {
    1156:	88 23       	and	r24, r24
    1158:	19 f4       	brne	.+6      	; 0x1160 <hour_24_to_12+0x1a>
        *hour_12 = 12;
    115a:	8c e0       	ldi	r24, 0x0C	; 12
    115c:	80 83       	st	Z, r24
    115e:	08 95       	ret
    }
    else if (hour_24 > 12) {
    1160:	8d 30       	cpi	r24, 0x0D	; 13
    1162:	10 f0       	brcs	.+4      	; 0x1168 <hour_24_to_12+0x22>
        *hour_12 -= 12;
    1164:	8c 50       	subi	r24, 0x0C	; 12
    1166:	80 83       	st	Z, r24
    1168:	08 95       	ret

0000116a <get_time_12>:
/******************************************************************************
 *
 ******************************************************************************/

void get_time_12(time_t *t, uint8_t *am_pm)
{
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	fc 01       	movw	r30, r24
    1170:	ab 01       	movw	r20, r22
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1172:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1174:	f8 94       	cli
    {
        *t = time;
    1176:	df 01       	movw	r26, r30
    1178:	cb e2       	ldi	r28, 0x2B	; 43
    117a:	d1 e0       	ldi	r29, 0x01	; 1
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	09 90       	ld	r0, Y+
    1180:	0d 92       	st	X+, r0
    1182:	81 50       	subi	r24, 0x01	; 1
    1184:	e1 f7       	brne	.-8      	; 0x117e <get_time_12+0x14>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1186:	9f bf       	out	0x3f, r25	; 63
    }

    hour_24_to_12(t->hour, &(t->hour), am_pm);
    1188:	80 81       	ld	r24, Z
    118a:	bf 01       	movw	r22, r30
    118c:	0e 94 a3 08 	call	0x1146	; 0x1146 <hour_24_to_12>
}
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	08 95       	ret

00001196 <get_time_24>:
 *
 ******************************************************************************/

void get_time_24(time_t *t)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1196:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1198:	f8 94       	cli
    {
        *t = time;
    119a:	fc 01       	movw	r30, r24
    119c:	ab e2       	ldi	r26, 0x2B	; 43
    119e:	b1 e0       	ldi	r27, 0x01	; 1
    11a0:	83 e0       	ldi	r24, 0x03	; 3
    11a2:	0d 90       	ld	r0, X+
    11a4:	01 92       	st	Z+, r0
    11a6:	81 50       	subi	r24, 0x01	; 1
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <get_time_24+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11aa:	2f bf       	out	0x3f, r18	; 63
    }
}
    11ac:	08 95       	ret

000011ae <set_time_12>:
 *
 ******************************************************************************/

void set_time_12(time_t *t, uint8_t am_pm)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    11ae:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11b0:	f8 94       	cli
    {
        time = *t;
    11b2:	ab e2       	ldi	r26, 0x2B	; 43
    11b4:	b1 e0       	ldi	r27, 0x01	; 1
    11b6:	fc 01       	movw	r30, r24
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	01 90       	ld	r0, Z+
    11bc:	0d 92       	st	X+, r0
    11be:	81 50       	subi	r24, 0x01	; 1
    11c0:	e1 f7       	brne	.-8      	; 0x11ba <set_time_12+0xc>

        time.hour--;
    11c2:	80 91 2b 01 	lds	r24, 0x012B
    11c6:	98 2f       	mov	r25, r24
    11c8:	91 50       	subi	r25, 0x01	; 1
    11ca:	90 93 2b 01 	sts	0x012B, r25
        if (am_pm) {
    11ce:	66 23       	and	r22, r22
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <set_time_12+0x2a>
            time.hour += 12;
    11d2:	85 5f       	subi	r24, 0xF5	; 245
    11d4:	80 93 2b 01 	sts	0x012B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11d8:	2f bf       	out	0x3f, r18	; 63
        }
    }
}
    11da:	08 95       	ret

000011dc <set_time_24>:
 *
 ******************************************************************************/

void set_time_24(time_t *t)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    11dc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11de:	f8 94       	cli
    {
        time = *t;
    11e0:	ab e2       	ldi	r26, 0x2B	; 43
    11e2:	b1 e0       	ldi	r27, 0x01	; 1
    11e4:	fc 01       	movw	r30, r24
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	01 90       	ld	r0, Z+
    11ea:	0d 92       	st	X+, r0
    11ec:	81 50       	subi	r24, 0x01	; 1
    11ee:	e1 f7       	brne	.-8      	; 0x11e8 <set_time_24+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11f0:	2f bf       	out	0x3f, r18	; 63
    }
}
    11f2:	08 95       	ret

000011f4 <get_date>:
 *
 ******************************************************************************/

void get_date(date_t *d)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    11f4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11f6:	f8 94       	cli
    {
        *d = date;
    11f8:	40 91 2e 01 	lds	r20, 0x012E
    11fc:	50 91 2f 01 	lds	r21, 0x012F
    1200:	60 91 30 01 	lds	r22, 0x0130
    1204:	70 91 31 01 	lds	r23, 0x0131
    1208:	fc 01       	movw	r30, r24
    120a:	40 83       	st	Z, r20
    120c:	51 83       	std	Z+1, r21	; 0x01
    120e:	62 83       	std	Z+2, r22	; 0x02
    1210:	73 83       	std	Z+3, r23	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1212:	2f bf       	out	0x3f, r18	; 63
    }
}
    1214:	08 95       	ret

00001216 <set_date>:
 *
 ******************************************************************************/

void set_date(date_t *d)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1216:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1218:	f8 94       	cli
        date = *d;
    121a:	fc 01       	movw	r30, r24
    121c:	80 81       	ld	r24, Z
    121e:	91 81       	ldd	r25, Z+1	; 0x01
    1220:	a2 81       	ldd	r26, Z+2	; 0x02
    1222:	b3 81       	ldd	r27, Z+3	; 0x03
    1224:	80 93 2e 01 	sts	0x012E, r24
    1228:	90 93 2f 01 	sts	0x012F, r25
    122c:	a0 93 30 01 	sts	0x0130, r26
    1230:	b0 93 31 01 	sts	0x0131, r27
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1234:	2f bf       	out	0x3f, r18	; 63
    }
}
    1236:	08 95       	ret

00001238 <days_in_month>:

uint8_t days_in_month(uint8_t month, uint16_t year)
{
    uint8_t ret;

    ret = pgm_read_byte(&days_month[month]);
    1238:	e8 2f       	mov	r30, r24
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	e6 58       	subi	r30, 0x86	; 134
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	e4 91       	lpm	r30, Z

    if ((month == 2) &&
    1242:	82 30       	cpi	r24, 0x02	; 2
    1244:	71 f4       	brne	.+28     	; 0x1262 <days_in_month+0x2a>
        ((year & 0x0003) == 0) &&
    1246:	9b 01       	movw	r18, r22
    1248:	23 70       	andi	r18, 0x03	; 3
    124a:	30 70       	andi	r19, 0x00	; 0
{
    uint8_t ret;

    ret = pgm_read_byte(&days_month[month]);

    if ((month == 2) &&
    124c:	21 15       	cp	r18, r1
    124e:	31 05       	cpc	r19, r1
    1250:	41 f4       	brne	.+16     	; 0x1262 <days_in_month+0x2a>
        ((year & 0x0003) == 0) &&
        ((year % 100) != 0)) {
    1252:	cb 01       	movw	r24, r22
    1254:	64 e6       	ldi	r22, 0x64	; 100
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__udivmodhi4>
    uint8_t ret;

    ret = pgm_read_byte(&days_month[month]);

    if ((month == 2) &&
        ((year & 0x0003) == 0) &&
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	09 f0       	breq	.+2      	; 0x1262 <days_in_month+0x2a>
        ((year % 100) != 0)) {
        ret++;
    1260:	ef 5f       	subi	r30, 0xFF	; 255
    }

    return ret;
}
    1262:	8e 2f       	mov	r24, r30
    1264:	08 95       	ret

00001266 <time_date_init>:
/******************************************************************************
 *
 ******************************************************************************/

void time_date_init(void)
{
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	27 97       	sbiw	r28, 0x07	; 7
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    time_t time;
    date_t date;

    time.hour = 10;
    127a:	8a e0       	ldi	r24, 0x0A	; 10
    127c:	89 83       	std	Y+1, r24	; 0x01
    time.minute = 0;
    127e:	1a 82       	std	Y+2, r1	; 0x02
    time.second = 0;
    1280:	1b 82       	std	Y+3, r1	; 0x03
    set_time_24(&time);
    1282:	ce 01       	movw	r24, r28
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	0e 94 ee 08 	call	0x11dc	; 0x11dc <set_time_24>

    date.day = 27;
    128a:	8b e1       	ldi	r24, 0x1B	; 27
    128c:	8f 83       	std	Y+7, r24	; 0x07
    date.month = 6;
    128e:	86 e0       	ldi	r24, 0x06	; 6
    1290:	8e 83       	std	Y+6, r24	; 0x06
    date.year = 2009;
    1292:	89 ed       	ldi	r24, 0xD9	; 217
    1294:	97 e0       	ldi	r25, 0x07	; 7
    1296:	9d 83       	std	Y+5, r25	; 0x05
    1298:	8c 83       	std	Y+4, r24	; 0x04
    set_date(&date);
    129a:	ce 01       	movw	r24, r28
    129c:	04 96       	adiw	r24, 0x04	; 4
    129e:	0e 94 0b 09 	call	0x1216	; 0x1216 <set_date>
}    
    12a2:	27 96       	adiw	r28, 0x07	; 7
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <clock_run>:
 *
 ******************************************************************************/

void clock_run(uint8_t run_flag)
{
    run = run_flag;
    12b4:	80 93 32 01 	sts	0x0132, r24
}
    12b8:	08 95       	ret

000012ba <time_date_update>:
/******************************************************************************
 *
 ******************************************************************************/

void time_date_update(void)
{
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    if (!run) {
    12c2:	80 91 32 01 	lds	r24, 0x0132
    12c6:	88 23       	and	r24, r24
    12c8:	c9 f1       	breq	.+114    	; 0x133c <time_date_update+0x82>
        return;
    }

    time.second++;
    12ca:	80 91 2d 01 	lds	r24, 0x012D
    12ce:	8f 5f       	subi	r24, 0xFF	; 255
    12d0:	80 93 2d 01 	sts	0x012D, r24
    if (time.second >= 60) {
    12d4:	8c 33       	cpi	r24, 0x3C	; 60
    12d6:	90 f1       	brcs	.+100    	; 0x133c <time_date_update+0x82>
        time.second = 0;
    12d8:	10 92 2d 01 	sts	0x012D, r1
 
        time.minute++;
    12dc:	80 91 2c 01 	lds	r24, 0x012C
    12e0:	8f 5f       	subi	r24, 0xFF	; 255
    12e2:	80 93 2c 01 	sts	0x012C, r24
        if (time.minute >= 60) {
    12e6:	8c 33       	cpi	r24, 0x3C	; 60
    12e8:	48 f1       	brcs	.+82     	; 0x133c <time_date_update+0x82>
            time.minute = 0;
    12ea:	10 92 2c 01 	sts	0x012C, r1
 
            time.hour++;
    12ee:	80 91 2b 01 	lds	r24, 0x012B
    12f2:	8f 5f       	subi	r24, 0xFF	; 255
    12f4:	80 93 2b 01 	sts	0x012B, r24
            if (time.hour >= 24) {
    12f8:	88 31       	cpi	r24, 0x18	; 24
    12fa:	00 f1       	brcs	.+64     	; 0x133c <time_date_update+0x82>
                time.hour = 0;
    12fc:	10 92 2b 01 	sts	0x012B, r1
 
                date.day++;
    1300:	10 91 31 01 	lds	r17, 0x0131
    1304:	1f 5f       	subi	r17, 0xFF	; 255
    1306:	10 93 31 01 	sts	0x0131, r17
                if (date.day > days_in_month(date.month, date.year)) {
    130a:	00 91 30 01 	lds	r16, 0x0130
    130e:	c0 91 2e 01 	lds	r28, 0x012E
    1312:	d0 91 2f 01 	lds	r29, 0x012F
    1316:	80 2f       	mov	r24, r16
    1318:	be 01       	movw	r22, r28
    131a:	0e 94 1c 09 	call	0x1238	; 0x1238 <days_in_month>
    131e:	81 17       	cp	r24, r17
    1320:	68 f4       	brcc	.+26     	; 0x133c <time_date_update+0x82>
                    date.month++;
    1322:	0f 5f       	subi	r16, 0xFF	; 255
    1324:	00 93 30 01 	sts	0x0130, r16
                    if (date.month > 12) {
    1328:	0d 30       	cpi	r16, 0x0D	; 13
    132a:	40 f0       	brcs	.+16     	; 0x133c <time_date_update+0x82>
                        date.month = 1;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	80 93 30 01 	sts	0x0130, r24
                        date.year++;
    1332:	21 96       	adiw	r28, 0x01	; 1
    1334:	d0 93 2f 01 	sts	0x012F, r29
    1338:	c0 93 2e 01 	sts	0x012E, r28
                    }
                }
            }
        }
    }
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	08 95       	ret

00001346 <short_delay>:
        specified by <cyc4>
******************************************************************************/

void short_delay(uint16_t cyc4)
{
    if (cyc4 > 2) {
    1346:	83 30       	cpi	r24, 0x03	; 3
    1348:	91 05       	cpc	r25, r1
    134a:	18 f0       	brcs	.+6      	; 0x1352 <short_delay+0xc>
        cyc4 -= 2;
    134c:	02 97       	sbiw	r24, 0x02	; 2
        __asm__ __volatile__ (
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	f1 f7       	brne	.-4      	; 0x134e <short_delay+0x8>
    1352:	08 95       	ret

00001354 <delay_us>:
Note:   Due to overhead, delay may be a few microseconds more than that
        specified by <us>.
******************************************************************************/

void delay_us(uint16_t us)
{
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	ec 01       	movw	r28, r24
#elif F_CPU == 12000000UL
	short_delay(us);
	short_delay(us);
	short_delay(us);
#elif F_CPU == 16000000UL
	short_delay(us);
    135a:	0e 94 a3 09 	call	0x1346	; 0x1346 <short_delay>
	short_delay(us);
    135e:	ce 01       	movw	r24, r28
    1360:	0e 94 a3 09 	call	0x1346	; 0x1346 <short_delay>
	short_delay(us);
    1364:	ce 01       	movw	r24, r28
    1366:	0e 94 a3 09 	call	0x1346	; 0x1346 <short_delay>
	short_delay(us);
    136a:	ce 01       	movw	r24, r28
    136c:	0e 94 a3 09 	call	0x1346	; 0x1346 <short_delay>
#else
    #warning F_CPU not supported, delay_us() requires modification for accuracy
	short_delay(us);
#endif
}
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <delay_ms>:
Note:   Due to overhead, delay may be a few microseconds more than that
        specified by <ms>.
******************************************************************************/

void delay_ms(uint16_t ms)
{
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	ec 01       	movw	r28, r24
    while (ms) {
    137c:	05 c0       	rjmp	.+10     	; 0x1388 <delay_ms+0x12>
        delay_us(998);
    137e:	86 ee       	ldi	r24, 0xE6	; 230
    1380:	93 e0       	ldi	r25, 0x03	; 3
    1382:	0e 94 aa 09 	call	0x1354	; 0x1354 <delay_us>
        ms--;
    1386:	21 97       	sbiw	r28, 0x01	; 1
        specified by <ms>.
******************************************************************************/

void delay_ms(uint16_t ms)
{
    while (ms) {
    1388:	20 97       	sbiw	r28, 0x00	; 0
    138a:	c9 f7       	brne	.-14     	; 0x137e <delay_ms+0x8>
        delay_us(998);
        ms--;
    }
}
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <clear_events>:
 *
 ******************************************************************************/

void clear_events(void)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1392:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1394:	f8 94       	cli
    {
        event_queue_head = 0;
    1396:	10 92 34 01 	sts	0x0134, r1
        event_queue_tail = 0;
    139a:	10 92 33 01 	sts	0x0133, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    139e:	8f bf       	out	0x3f, r24	; 63
    }
}
    13a0:	08 95       	ret

000013a2 <add_event>:
 *
 ******************************************************************************/

void add_event(event_id event, uint8_t data)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    13a2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13a4:	f8 94       	cli
    {
        event_queue[event_queue_head].event = event;
    13a6:	e0 91 34 01 	lds	r30, 0x0134
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	ee 0f       	add	r30, r30
    13ae:	ff 1f       	adc	r31, r31
    13b0:	eb 5c       	subi	r30, 0xCB	; 203
    13b2:	fe 4f       	sbci	r31, 0xFE	; 254
    13b4:	80 83       	st	Z, r24
        event_queue[event_queue_head].data = data;
    13b6:	e0 91 34 01 	lds	r30, 0x0134
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	ee 0f       	add	r30, r30
    13be:	ff 1f       	adc	r31, r31
    13c0:	eb 5c       	subi	r30, 0xCB	; 203
    13c2:	fe 4f       	sbci	r31, 0xFE	; 254
    13c4:	61 83       	std	Z+1, r22	; 0x01

        event_queue_head++;
    13c6:	80 91 34 01 	lds	r24, 0x0134
    13ca:	8f 5f       	subi	r24, 0xFF	; 255
    13cc:	80 93 34 01 	sts	0x0134, r24
        if (event_queue_head >= EVENT_QUEUE_SIZE) {
    13d0:	80 91 34 01 	lds	r24, 0x0134
    13d4:	80 31       	cpi	r24, 0x10	; 16
    13d6:	10 f0       	brcs	.+4      	; 0x13dc <add_event+0x3a>
            event_queue_head = 0;
    13d8:	10 92 34 01 	sts	0x0134, r1
        }

        if (event_queue_head == event_queue_tail) {
    13dc:	20 91 34 01 	lds	r18, 0x0134
    13e0:	80 91 33 01 	lds	r24, 0x0133
    13e4:	28 17       	cp	r18, r24
    13e6:	29 f4       	brne	.+10     	; 0x13f2 <add_event+0x50>
            event_queue_tail++;
    13e8:	80 91 33 01 	lds	r24, 0x0133
    13ec:	8f 5f       	subi	r24, 0xFF	; 255
    13ee:	80 93 33 01 	sts	0x0133, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13f2:	9f bf       	out	0x3f, r25	; 63
        }
    }
}
    13f4:	08 95       	ret

000013f6 <scan_for_events>:
/******************************************************************************
 *
 ******************************************************************************/

static void scan_for_events()
{
    13f6:	df 92       	push	r13
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    button_t pressed, released, bshort, blong, debounced;
    int8_t index;
    uint8_t mask;
    event_id event;

    pressed = reset_buttons_pressed();
    1404:	0e 94 ef 07 	call	0xfde	; 0xfde <reset_buttons_pressed>
    1408:	d8 2e       	mov	r13, r24
    released = reset_buttons_released();
    140a:	0e 94 fa 07 	call	0xff4	; 0xff4 <reset_buttons_released>
    140e:	e8 2e       	mov	r14, r24
    bshort = reset_short_buttons();
    1410:	0e 94 05 08 	call	0x100a	; 0x100a <reset_short_buttons>
    1414:	f8 2e       	mov	r15, r24
    blong = reset_long_buttons();
    1416:	0e 94 10 08 	call	0x1020	; 0x1020 <reset_long_buttons>
    141a:	08 2f       	mov	r16, r24
    debounced = read_button_debounced();
    141c:	0e 94 de 07 	call	0xfbc	; 0xfbc <read_button_debounced>
    1420:	18 2f       	mov	r17, r24
    1422:	c4 e0       	ldi	r28, 0x04	; 4

    // Scan buttons for events
    // Pressed, released, short and long press

    event = 0;
    mask = 0x01;
    1424:	d1 e0       	ldi	r29, 0x01	; 1
    for (index = 0; index < 8; index++) {
        if (pressed.all & mask) {
    1426:	8d 2f       	mov	r24, r29
    1428:	8d 21       	and	r24, r13
    142a:	29 f0       	breq	.+10     	; 0x1436 <scan_for_events+0x40>
            add_event(event + BUTTON0_PRESSED, debounced.all);
    142c:	8c 2f       	mov	r24, r28
    142e:	83 50       	subi	r24, 0x03	; 3
    1430:	61 2f       	mov	r22, r17
    1432:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
        }
        if (released.all & mask) {
    1436:	8d 2f       	mov	r24, r29
    1438:	8e 21       	and	r24, r14
    143a:	29 f0       	breq	.+10     	; 0x1446 <scan_for_events+0x50>
            add_event(event + BUTTON0_RELEASED, debounced.all);
    143c:	8c 2f       	mov	r24, r28
    143e:	82 50       	subi	r24, 0x02	; 2
    1440:	61 2f       	mov	r22, r17
    1442:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
        }
        if (bshort.all & mask) {
    1446:	8d 2f       	mov	r24, r29
    1448:	8f 21       	and	r24, r15
    144a:	29 f0       	breq	.+10     	; 0x1456 <scan_for_events+0x60>
            add_event(event + BUTTON0_SHORT, debounced.all);
    144c:	8c 2f       	mov	r24, r28
    144e:	81 50       	subi	r24, 0x01	; 1
    1450:	61 2f       	mov	r22, r17
    1452:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
        }
        if (blong.all & mask) {
    1456:	8d 2f       	mov	r24, r29
    1458:	80 23       	and	r24, r16
    145a:	21 f0       	breq	.+8      	; 0x1464 <scan_for_events+0x6e>
            add_event(event + BUTTON0_LONG, debounced.all);
    145c:	8c 2f       	mov	r24, r28
    145e:	61 2f       	mov	r22, r17
    1460:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
        }
        event += 4;
        mask <<= 1;
    1464:	dd 0f       	add	r29, r29
    1466:	cc 5f       	subi	r28, 0xFC	; 252
    // Scan buttons for events
    // Pressed, released, short and long press

    event = 0;
    mask = 0x01;
    for (index = 0; index < 8; index++) {
    1468:	c4 32       	cpi	r28, 0x24	; 36
    146a:	e9 f6       	brne	.-70     	; 0x1426 <scan_for_events+0x30>
        mask <<= 1;
    }

    // Check for button chords

    pressed = reset_button_chord();
    146c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <reset_button_chord>
    1470:	68 2f       	mov	r22, r24
    if (pressed.all) {
    1472:	88 23       	and	r24, r24
    1474:	19 f0       	breq	.+6      	; 0x147c <scan_for_events+0x86>
        add_event(BUTTON_CHORD, pressed.all);
    1476:	82 e2       	ldi	r24, 0x22	; 34
    1478:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
    }

    // Check right rotary encoder

    index = right_rotary_relative();
    147c:	0e 94 57 12 	call	0x24ae	; 0x24ae <right_rotary_relative>
    1480:	68 2f       	mov	r22, r24
    if (index) {
    1482:	88 23       	and	r24, r24
    1484:	19 f0       	breq	.+6      	; 0x148c <scan_for_events+0x96>
        add_event(RIGHT_ROTARY_MOVED, index);
    1486:	83 e2       	ldi	r24, 0x23	; 35
    1488:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
    }

    // Check left rotary encoder

    index = left_rotary_relative();
    148c:	0e 94 4f 12 	call	0x249e	; 0x249e <left_rotary_relative>
    1490:	68 2f       	mov	r22, r24
    if (index) {
    1492:	88 23       	and	r24, r24
    1494:	19 f0       	breq	.+6      	; 0x149c <scan_for_events+0xa6>
        add_event(LEFT_ROTARY_MOVED, index);
    1496:	84 e2       	ldi	r24, 0x24	; 36
    1498:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
    }

    // Check event timers

    mask = timer_status();
    149c:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <timer_status>
    14a0:	d8 2f       	mov	r29, r24
    index = 0;
    14a2:	c0 e0       	ldi	r28, 0x00	; 0
    while (mask) {
    14a4:	0c c0       	rjmp	.+24     	; 0x14be <scan_for_events+0xc8>
        if (mask & 0x01) {
    14a6:	d0 ff       	sbrs	r29, 0
    14a8:	08 c0       	rjmp	.+16     	; 0x14ba <scan_for_events+0xc4>
            timer_expired(index, 1);            // Resets timer-expiration flag
    14aa:	8c 2f       	mov	r24, r28
    14ac:	61 e0       	ldi	r22, 0x01	; 1
    14ae:	0e 94 40 17 	call	0x2e80	; 0x2e80 <timer_expired>
            add_event(TIMER_EXPIRED, index);
    14b2:	85 e2       	ldi	r24, 0x25	; 37
    14b4:	6c 2f       	mov	r22, r28
    14b6:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
        }
        index++;
    14ba:	cf 5f       	subi	r28, 0xFF	; 255
        mask >>= 1;
    14bc:	d6 95       	lsr	r29

    // Check event timers

    mask = timer_status();
    index = 0;
    while (mask) {
    14be:	dd 23       	and	r29, r29
    14c0:	91 f7       	brne	.-28     	; 0x14a6 <scan_for_events+0xb0>
            add_event(TIMER_EXPIRED, index);
        }
        index++;
        mask >>= 1;
    }
}
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	df 90       	pop	r13
    14d0:	08 95       	ret

000014d2 <is_button_pressed_event>:
 *
 ******************************************************************************/

uint8_t is_button_pressed_event(event_id event)
{
    return ((event < LAST_BUTTON_EVENT) &&
    14d2:	81 32       	cpi	r24, 0x21	; 33
    14d4:	70 f4       	brcc	.+28     	; 0x14f2 <is_button_pressed_event+0x20>
            !((event - BUTTON0_PRESSED) & 0x03));
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	21 50       	subi	r18, 0x01	; 1
    14dc:	30 40       	sbci	r19, 0x00	; 0
    14de:	23 70       	andi	r18, 0x03	; 3
    14e0:	30 70       	andi	r19, 0x00	; 0

/******************************************************************************
 *
 ******************************************************************************/

uint8_t is_button_pressed_event(event_id event)
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	21 15       	cp	r18, r1
    14e8:	31 05       	cpc	r19, r1
    14ea:	29 f0       	breq	.+10     	; 0x14f6 <is_button_pressed_event+0x24>
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	08 95       	ret
{
    return ((event < LAST_BUTTON_EVENT) &&
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	90 e0       	ldi	r25, 0x00	; 0
            !((event - BUTTON0_PRESSED) & 0x03));
}
    14f6:	08 95       	ret

000014f8 <is_button_released_event>:
 *
 ******************************************************************************/

uint8_t is_button_released_event(event_id event)
{
    return ((event < LAST_BUTTON_EVENT) &&
    14f8:	81 32       	cpi	r24, 0x21	; 33
    14fa:	70 f4       	brcc	.+28     	; 0x1518 <is_button_released_event+0x20>
            !((event - BUTTON0_RELEASED) & 0x03));
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	22 50       	subi	r18, 0x02	; 2
    1502:	30 40       	sbci	r19, 0x00	; 0
    1504:	23 70       	andi	r18, 0x03	; 3
    1506:	30 70       	andi	r19, 0x00	; 0

/******************************************************************************
 *
 ******************************************************************************/

uint8_t is_button_released_event(event_id event)
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	21 15       	cp	r18, r1
    150e:	31 05       	cpc	r19, r1
    1510:	29 f0       	breq	.+10     	; 0x151c <is_button_released_event+0x24>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	08 95       	ret
{
    return ((event < LAST_BUTTON_EVENT) &&
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
            !((event - BUTTON0_RELEASED) & 0x03));
}
    151c:	08 95       	ret

0000151e <is_button_short_event>:
 *
 ******************************************************************************/

uint8_t is_button_short_event(event_id event)
{
    return ((event < LAST_BUTTON_EVENT) &&
    151e:	81 32       	cpi	r24, 0x21	; 33
    1520:	70 f4       	brcc	.+28     	; 0x153e <is_button_short_event+0x20>
            !((event - BUTTON0_SHORT) & 0x03));
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	23 50       	subi	r18, 0x03	; 3
    1528:	30 40       	sbci	r19, 0x00	; 0
    152a:	23 70       	andi	r18, 0x03	; 3
    152c:	30 70       	andi	r19, 0x00	; 0

/******************************************************************************
 *
 ******************************************************************************/

uint8_t is_button_short_event(event_id event)
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	21 15       	cp	r18, r1
    1534:	31 05       	cpc	r19, r1
    1536:	29 f0       	breq	.+10     	; 0x1542 <is_button_short_event+0x24>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	08 95       	ret
{
    return ((event < LAST_BUTTON_EVENT) &&
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
            !((event - BUTTON0_SHORT) & 0x03));
}
    1542:	08 95       	ret

00001544 <is_button_long_event>:
 *
 ******************************************************************************/

uint8_t is_button_long_event(event_id event)
{
    return ((event < LAST_BUTTON_EVENT) &&
    1544:	81 32       	cpi	r24, 0x21	; 33
    1546:	60 f4       	brcc	.+24     	; 0x1560 <is_button_long_event+0x1c>
            !((event - BUTTON0_LONG) & 0x03));
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	23 70       	andi	r18, 0x03	; 3
    154e:	30 70       	andi	r19, 0x00	; 0
 *
 ******************************************************************************/

uint8_t is_button_long_event(event_id event)
{
    return ((event < LAST_BUTTON_EVENT) &&
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	21 15       	cp	r18, r1
    1556:	31 05       	cpc	r19, r1
    1558:	29 f0       	breq	.+10     	; 0x1564 <is_button_long_event+0x20>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	08 95       	ret
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
            !((event - BUTTON0_LONG) & 0x03));
}
    1564:	08 95       	ret

00001566 <is_button_chord_event>:
 *
 ******************************************************************************/

uint8_t is_button_chord_event(event_id event)
{
    return (event == BUTTON_CHORD);
    1566:	91 e0       	ldi	r25, 0x01	; 1
    1568:	82 32       	cpi	r24, 0x22	; 34
    156a:	09 f0       	breq	.+2      	; 0x156e <is_button_chord_event+0x8>
    156c:	90 e0       	ldi	r25, 0x00	; 0
}
    156e:	89 2f       	mov	r24, r25
    1570:	08 95       	ret

00001572 <is_button_event>:
 *
 ******************************************************************************/

uint8_t is_button_event(event_id event)
{
    return ((event < LAST_BUTTON_EVENT) || (event == BUTTON_CHORD));
    1572:	21 e0       	ldi	r18, 0x01	; 1
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 32       	cpi	r24, 0x21	; 33
    1578:	20 f0       	brcs	.+8      	; 0x1582 <is_button_event+0x10>
    157a:	82 32       	cpi	r24, 0x22	; 34
    157c:	11 f0       	breq	.+4      	; 0x1582 <is_button_event+0x10>
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
}
    1582:	82 2f       	mov	r24, r18
    1584:	08 95       	ret

00001586 <is_left_rotary_event>:
 *
 ******************************************************************************/

uint8_t is_left_rotary_event(event_id event)
{
    return (event == LEFT_ROTARY_MOVED);
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	84 32       	cpi	r24, 0x24	; 36
    158a:	09 f0       	breq	.+2      	; 0x158e <is_left_rotary_event+0x8>
    158c:	90 e0       	ldi	r25, 0x00	; 0
}
    158e:	89 2f       	mov	r24, r25
    1590:	08 95       	ret

00001592 <is_right_rotary_event>:
 *
 ******************************************************************************/

uint8_t is_right_rotary_event(event_id event)
{
    return (event == RIGHT_ROTARY_MOVED);
    1592:	91 e0       	ldi	r25, 0x01	; 1
    1594:	83 32       	cpi	r24, 0x23	; 35
    1596:	09 f0       	breq	.+2      	; 0x159a <is_right_rotary_event+0x8>
    1598:	90 e0       	ldi	r25, 0x00	; 0
}
    159a:	89 2f       	mov	r24, r25
    159c:	08 95       	ret

0000159e <is_rotary_event>:
 *
 ******************************************************************************/

uint8_t is_rotary_event(event_id event)
{
    return ((event == LEFT_ROTARY_MOVED) || (event == RIGHT_ROTARY_MOVED));
    159e:	98 2f       	mov	r25, r24
    15a0:	93 52       	subi	r25, 0x23	; 35
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	92 30       	cpi	r25, 0x02	; 2
    15a6:	08 f0       	brcs	.+2      	; 0x15aa <is_rotary_event+0xc>
    15a8:	80 e0       	ldi	r24, 0x00	; 0
}
    15aa:	08 95       	ret

000015ac <is_timer_event>:
 *
 ******************************************************************************/

uint8_t is_timer_event(event_id event)
{
    return ((event == TIMER_EXPIRED) || (event == ONE_SECOND_ELAPSED));
    15ac:	98 2f       	mov	r25, r24
    15ae:	95 52       	subi	r25, 0x25	; 37
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	92 30       	cpi	r25, 0x02	; 2
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <is_timer_event+0xc>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
}
    15b8:	08 95       	ret

000015ba <get_next_event>:
event_t get_next_event(uint8_t mask)
{
    event_t event;

    do {
        scan_for_events();
    15ba:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <scan_for_events>

        ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    15be:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15c0:	f8 94       	cli
        {
            if (event_queue_head != event_queue_tail) {
    15c2:	90 91 34 01 	lds	r25, 0x0134
    15c6:	80 91 33 01 	lds	r24, 0x0133
    15ca:	98 17       	cp	r25, r24
    15cc:	a9 f0       	breq	.+42     	; 0x15f8 <get_next_event+0x3e>
                event = event_queue[event_queue_tail];
    15ce:	e0 91 33 01 	lds	r30, 0x0133
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	ee 0f       	add	r30, r30
    15d6:	ff 1f       	adc	r31, r31
    15d8:	eb 5c       	subi	r30, 0xCB	; 203
    15da:	fe 4f       	sbci	r31, 0xFE	; 254
    15dc:	80 81       	ld	r24, Z
    15de:	91 81       	ldd	r25, Z+1	; 0x01
 
                event_queue_tail++;
    15e0:	20 91 33 01 	lds	r18, 0x0133
    15e4:	2f 5f       	subi	r18, 0xFF	; 255
    15e6:	20 93 33 01 	sts	0x0133, r18
                if (event_queue_tail >= EVENT_QUEUE_SIZE) {
    15ea:	20 91 33 01 	lds	r18, 0x0133
    15ee:	20 31       	cpi	r18, 0x10	; 16
    15f0:	28 f0       	brcs	.+10     	; 0x15fc <get_next_event+0x42>
                    event_queue_tail = 0;
    15f2:	10 92 33 01 	sts	0x0133, r1
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <get_next_event+0x42>
                }
            }
            else {
                event.event = NO_EVENT;
                event.data = 0;
    15f8:	90 e0       	ldi	r25, 0x00	; 0
                if (event_queue_tail >= EVENT_QUEUE_SIZE) {
                    event_queue_tail = 0;
                }
            }
            else {
                event.event = NO_EVENT;
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15fc:	3f bf       	out	0x3f, r19	; 63
            }
        }
    } while (0);

    return event;
}
    15fe:	08 95       	ret

00001600 <wait_next_event>:
/******************************************************************************
 *
 ******************************************************************************/

event_t wait_next_event(uint8_t mask)
{
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	0f 92       	push	r0
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    while (event_queue_head == event_queue_tail) {
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <wait_next_event+0x14>
        scan_for_events();
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <scan_for_events>
    1612:	89 81       	ldd	r24, Y+1	; 0x01
 *
 ******************************************************************************/

event_t wait_next_event(uint8_t mask)
{
    while (event_queue_head == event_queue_tail) {
    1614:	20 91 34 01 	lds	r18, 0x0134
    1618:	90 91 33 01 	lds	r25, 0x0133
    161c:	29 17       	cp	r18, r25
    161e:	b1 f3       	breq	.-20     	; 0x160c <wait_next_event+0xc>
        scan_for_events();
    }

    return get_next_event(mask);
    1620:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <get_next_event>
}
    1624:	0f 90       	pop	r0
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	08 95       	ret

0000162c <unget_next_event>:

event_t unget_next_event(void)
{
    event_t event;

    scan_for_events();
    162c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <scan_for_events>

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1630:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1632:	f8 94       	cli
    {
        if (event_queue_head != event_queue_tail) {
    1634:	90 91 34 01 	lds	r25, 0x0134
    1638:	80 91 33 01 	lds	r24, 0x0133
    163c:	98 17       	cp	r25, r24
    163e:	51 f0       	breq	.+20     	; 0x1654 <unget_next_event+0x28>
            event = event_queue[event_queue_tail];
    1640:	e0 91 33 01 	lds	r30, 0x0133
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	ee 0f       	add	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	eb 5c       	subi	r30, 0xCB	; 203
    164c:	fe 4f       	sbci	r31, 0xFE	; 254
    164e:	80 81       	ld	r24, Z
    1650:	91 81       	ldd	r25, Z+1	; 0x01
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <unget_next_event+0x2c>
        }
        else {
            event.event = NO_EVENT;
            event.data = 0;
    1654:	90 e0       	ldi	r25, 0x00	; 0
    {
        if (event_queue_head != event_queue_tail) {
            event = event_queue[event_queue_tail];
        }
        else {
            event.event = NO_EVENT;
    1656:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1658:	2f bf       	out	0x3f, r18	; 63
            event.data = 0;
        }
    }

    return event;
}
    165a:	08 95       	ret

0000165c <clear_nixie_display>:
 *
 * Returns: Nothing
 ******************************************************************************/

static void clear_nixie_display(uint8_t *segdata)
{
    165c:	fc 01       	movw	r30, r24
    165e:	80 e4       	ldi	r24, 0x40	; 64
    uint8_t count;

    for (count = NIXIE_SEGMENTS; count; count--) {
        *segdata = 0;
    1660:	11 92       	st	Z+, r1
        segdata++;
    1662:	81 50       	subi	r24, 0x01	; 1

static void clear_nixie_display(uint8_t *segdata)
{
    uint8_t count;

    for (count = NIXIE_SEGMENTS; count; count--) {
    1664:	e9 f7       	brne	.-6      	; 0x1660 <clear_nixie_display+0x4>
        *segdata = 0;
        segdata++;
    }
}
    1666:	08 95       	ret

00001668 <set_nixie_segment>:
 * Returns: Nothing
 ******************************************************************************/

static void set_nixie_segment(uint8_t *segdata, uint8_t digit, uint8_t segment, uint8_t intensity)
{
    segdata += pgm_read_byte(&nixie_digit_offset[digit]) + segment;
    1668:	e6 2f       	mov	r30, r22
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	e9 57       	subi	r30, 0x79	; 121
    166e:	fe 4f       	sbci	r31, 0xFE	; 254
    1670:	e4 91       	lpm	r30, Z
    *segdata = intensity;
    1672:	bc 01       	movw	r22, r24
    1674:	6e 0f       	add	r22, r30
    1676:	71 1d       	adc	r23, r1
    1678:	fb 01       	movw	r30, r22
    167a:	e4 0f       	add	r30, r20
    167c:	f1 1d       	adc	r31, r1
    167e:	20 83       	st	Z, r18
}
    1680:	08 95       	ret

00001682 <inc_cursor>:
 *          of the display (it will wrap to the left side, if enabled) or if
 *          cursor autoincrement is disabled.
 ******************************************************************************/

static void inc_cursor(nixie_stream_t *control, uint8_t char_mode)
{
    1682:	fc 01       	movw	r30, r24
    if (char_mode) {
    1684:	66 23       	and	r22, r22
    1686:	39 f0       	breq	.+14     	; 0x1696 <inc_cursor+0x14>
        if (control->control.no_cursor_inc || control->control.single_no_inc) {
    1688:	85 81       	ldd	r24, Z+5	; 0x05
    168a:	98 2f       	mov	r25, r24
    168c:	93 70       	andi	r25, 0x03	; 3
    168e:	19 f0       	breq	.+6      	; 0x1696 <inc_cursor+0x14>
            control->control.single_no_inc = 0;
    1690:	8d 7f       	andi	r24, 0xFD	; 253
    1692:	85 83       	std	Z+5, r24	; 0x05
            return;
    1694:	08 95       	ret
        }
    }

    control->cursor++;
    1696:	82 81       	ldd	r24, Z+2	; 0x02
    1698:	8f 5f       	subi	r24, 0xFF	; 255
    169a:	82 83       	std	Z+2, r24	; 0x02

    if (control->control.no_cursor_wrap) {
    169c:	95 81       	ldd	r25, Z+5	; 0x05
    169e:	94 ff       	sbrs	r25, 4
    16a0:	05 c0       	rjmp	.+10     	; 0x16ac <inc_cursor+0x2a>
        if (control->cursor > NIXIE_DISPLAY_WIDTH) {
    16a2:	87 30       	cpi	r24, 0x07	; 7
    16a4:	30 f0       	brcs	.+12     	; 0x16b2 <inc_cursor+0x30>
            control->cursor = NIXIE_DISPLAY_WIDTH;
    16a6:	86 e0       	ldi	r24, 0x06	; 6
    16a8:	82 83       	std	Z+2, r24	; 0x02
    16aa:	08 95       	ret
        }
    }
    else if (control->cursor >= NIXIE_DISPLAY_WIDTH) {
    16ac:	86 30       	cpi	r24, 0x06	; 6
    16ae:	08 f0       	brcs	.+2      	; 0x16b2 <inc_cursor+0x30>
        control->cursor = 0;
    16b0:	12 82       	std	Z+2, r1	; 0x02
    16b2:	08 95       	ret

000016b4 <nixie_out>:
 *          actions that they perform are documented in the comments that
 *          can be found near the start of this source file.
 ******************************************************************************/

int16_t nixie_out(char ch, FILE *stream)
{
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	18 2f       	mov	r17, r24
    register nixie_stream_t *p;
    uint8_t char_type;

    p = stream->udata;
    16bc:	fb 01       	movw	r30, r22
    16be:	c4 85       	ldd	r28, Z+12	; 0x0c
    16c0:	d5 85       	ldd	r29, Z+13	; 0x0d

    // If previous command character requires a parameter digit, interpret
    // the next character as a parameter and set value according to previous
    // character sent.

    if (p->state != NORMAL_OUTPUT) {
    16c2:	9c 81       	ldd	r25, Y+4	; 0x04
    16c4:	80 53       	subi	r24, 0x30	; 48
    16c6:	99 23       	and	r25, r25
    16c8:	69 f0       	breq	.+26     	; 0x16e4 <nixie_out+0x30>
        ch -= '0';

        if (p->state == SET_INTENSITY) {
    16ca:	91 30       	cpi	r25, 0x01	; 1
    16cc:	21 f4       	brne	.+8      	; 0x16d6 <nixie_out+0x22>
            if (ch <= MAX_NIXIE_INTENSITY) {
    16ce:	8a 30       	cpi	r24, 0x0A	; 10
    16d0:	38 f4       	brcc	.+14     	; 0x16e0 <nixie_out+0x2c>
                p->intensity = ch;
    16d2:	8b 83       	std	Y+3, r24	; 0x03
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <nixie_out+0x2c>
            }
        }
 
        else if (p->state == SET_CURSOR_POS) {
    16d6:	92 30       	cpi	r25, 0x02	; 2
    16d8:	19 f4       	brne	.+6      	; 0x16e0 <nixie_out+0x2c>
            if (ch <= NIXIE_DISPLAY_WIDTH) {
    16da:	87 30       	cpi	r24, 0x07	; 7
    16dc:	08 f4       	brcc	.+2      	; 0x16e0 <nixie_out+0x2c>
                p->cursor = ch;
    16de:	8a 83       	std	Y+2, r24	; 0x02
            }
        }

        p->state = NORMAL_OUTPUT;
    16e0:	1c 82       	std	Y+4, r1	; 0x04
        return 0;
    16e2:	d5 c0       	rjmp	.+426    	; 0x188e <nixie_out+0x1da>
    // char_type = 1 : Single digit
    // char_type = 2 : Single digit plus '0' segment
    // char_type = 3 : Space

    char_type = 0;
    if ((ch >= '0') && (ch <= '9'))  {
    16e4:	8a 30       	cpi	r24, 0x0A	; 10
    16e6:	60 f0       	brcs	.+24     	; 0x1700 <nixie_out+0x4c>
        char_type = 1;
        ch -= '0';
    }
    else if ((ch >= 'A') && (ch <= 'I')) {
    16e8:	81 2f       	mov	r24, r17
    16ea:	81 54       	subi	r24, 0x41	; 65
    16ec:	89 30       	cpi	r24, 0x09	; 9
    16ee:	58 f0       	brcs	.+22     	; 0x1706 <nixie_out+0x52>
        char_type = 2;
        ch -= 'A';
    }
    else if ((ch >= 'a') && (ch <= 'i')) {
    16f0:	80 52       	subi	r24, 0x20	; 32
    16f2:	89 30       	cpi	r24, 0x09	; 9
    16f4:	40 f0       	brcs	.+16     	; 0x1706 <nixie_out+0x52>
        char_type = 2;
        ch -= 'a';
    }
    else if (ch == ' ') {
    16f6:	10 32       	cpi	r17, 0x20	; 32
    16f8:	09 f0       	breq	.+2      	; 0x16fc <nixie_out+0x48>
    16fa:	cf c0       	rjmp	.+414    	; 0x189a <nixie_out+0x1e6>
        char_type = 3;
    16fc:	83 e0       	ldi	r24, 0x03	; 3
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <nixie_out+0x56>
    // char_type = 1 : Single digit
    // char_type = 2 : Single digit plus '0' segment
    // char_type = 3 : Space

    char_type = 0;
    if ((ch >= '0') && (ch <= '9'))  {
    1700:	18 2f       	mov	r17, r24
        char_type = 1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	02 c0       	rjmp	.+4      	; 0x170a <nixie_out+0x56>
    }
    else if ((ch >= 'A') && (ch <= 'I')) {
        char_type = 2;
        ch -= 'A';
    }
    else if ((ch >= 'a') && (ch <= 'i')) {
    1706:	18 2f       	mov	r17, r24
        char_type = 2;
    1708:	82 e0       	ldi	r24, 0x02	; 2

    // If character is displayable, turn on appropriate segment(s)
    // on the nixie display

    if (char_type) {
        if (p->cursor < NIXIE_DISPLAY_WIDTH) {
    170a:	ea 81       	ldd	r30, Y+2	; 0x02
    170c:	e6 30       	cpi	r30, 0x06	; 6
    170e:	18 f5       	brcc	.+70     	; 0x1756 <nixie_out+0xa2>
            if (! (p->control.overlay || p->control.single_overlay)) {
    1710:	9d 81       	ldd	r25, Y+5	; 0x05
    1712:	9c 70       	andi	r25, 0x0C	; 12
    1714:	61 f4       	brne	.+24     	; 0x172e <nixie_out+0x7a>

    count = (digit < NIXIE_DISPLAY_WIDTH) ? NIXIE_SEGMENTS_PER_DIGIT : 1;

    // Get segment offset for selected digit/tube

    segdata += pgm_read_byte(&nixie_digit_offset[digit]);
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	e9 57       	subi	r30, 0x79	; 121
    171a:	fe 4f       	sbci	r31, 0xFE	; 254
    171c:	e4 91       	lpm	r30, Z
    171e:	a8 81       	ld	r26, Y
    1720:	b9 81       	ldd	r27, Y+1	; 0x01
    1722:	ae 0f       	add	r26, r30
    1724:	b1 1d       	adc	r27, r1
    1726:	9a e0       	ldi	r25, 0x0A	; 10

    // Turn off segment(s) in selected digit

    for ( ; count; count--) {
        *segdata = 0;
    1728:	1d 92       	st	X+, r1
        segdata++;
    172a:	91 50       	subi	r25, 0x01	; 1

    segdata += pgm_read_byte(&nixie_digit_offset[digit]);

    // Turn off segment(s) in selected digit

    for ( ; count; count--) {
    172c:	e9 f7       	brne	.-6      	; 0x1728 <nixie_out+0x74>
        if (p->cursor < NIXIE_DISPLAY_WIDTH) {
            if (! (p->control.overlay || p->control.single_overlay)) {
                clear_nixie_digit(p->segdata, p->cursor);
            }

            if (char_type == 2) {
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	49 f4       	brne	.+18     	; 0x1744 <nixie_out+0x90>
                set_nixie_segment(p->segdata, p->cursor, 0, p->intensity);
    1732:	88 81       	ld	r24, Y
    1734:	99 81       	ldd	r25, Y+1	; 0x01
    1736:	6a 81       	ldd	r22, Y+2	; 0x02
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	2b 81       	ldd	r18, Y+3	; 0x03
    173c:	0e 94 34 0b 	call	0x1668	; 0x1668 <set_nixie_segment>
                ch++;
    1740:	1f 5f       	subi	r17, 0xFF	; 255
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <nixie_out+0x94>
            }
            if (char_type != 3) {
    1744:	83 30       	cpi	r24, 0x03	; 3
    1746:	39 f0       	breq	.+14     	; 0x1756 <nixie_out+0xa2>
                set_nixie_segment(p->segdata, p->cursor, ch, p->intensity);
    1748:	88 81       	ld	r24, Y
    174a:	99 81       	ldd	r25, Y+1	; 0x01
    174c:	6a 81       	ldd	r22, Y+2	; 0x02
    174e:	41 2f       	mov	r20, r17
    1750:	2b 81       	ldd	r18, Y+3	; 0x03
    1752:	0e 94 34 0b 	call	0x1668	; 0x1668 <set_nixie_segment>
            }
        }

        inc_cursor(p, 1);
    1756:	ce 01       	movw	r24, r28
    1758:	61 e0       	ldi	r22, 0x01	; 1
    175a:	0e 94 41 0b 	call	0x1682	; 0x1682 <inc_cursor>
        p->control.single_overlay = 0;
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	87 7f       	andi	r24, 0xF7	; 247
    1762:	73 c0       	rjmp	.+230    	; 0x184a <nixie_out+0x196>
        case '>' :                      // Turn on right neon lamp
            set_nixie_segment(p->segdata, NIXIE_RIGHT_LAMP, 0, p->intensity);
            break;

        case '(' :                      // Turn off left neon lamp
            set_nixie_segment(p->segdata, NIXIE_LEFT_LAMP, 0, 0);
    1764:	88 81       	ld	r24, Y
    1766:	99 81       	ldd	r25, Y+1	; 0x01
    1768:	66 e0       	ldi	r22, 0x06	; 6
    176a:	33 c0       	rjmp	.+102    	; 0x17d2 <nixie_out+0x11e>
        case ')' :                      // Turn off right neon lamp
            set_nixie_segment(p->segdata, NIXIE_RIGHT_LAMP, 0, 0);
            break;

        case '`' :                      // Turn off both neon lamps
            set_nixie_segment(p->segdata, NIXIE_LEFT_LAMP, 0, 0);
    176c:	88 81       	ld	r24, Y
    176e:	99 81       	ldd	r25, Y+1	; 0x01
    1770:	66 e0       	ldi	r22, 0x06	; 6
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	0e 94 34 0b 	call	0x1668	; 0x1668 <set_nixie_segment>
            set_nixie_segment(p->segdata, NIXIE_RIGHT_LAMP, 0, 0);
    177a:	88 81       	ld	r24, Y
    177c:	99 81       	ldd	r25, Y+1	; 0x01
    177e:	67 e0       	ldi	r22, 0x07	; 7
    1780:	28 c0       	rjmp	.+80     	; 0x17d2 <nixie_out+0x11e>
            break;

        case '.' :                      // Turn on lamp to left of cursor
            if ((p->cursor == 2) || (p->cursor == 3)) {
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	98 2f       	mov	r25, r24
    1786:	92 50       	subi	r25, 0x02	; 2
    1788:	92 30       	cpi	r25, 0x02	; 2
    178a:	38 f0       	brcs	.+14     	; 0x179a <nixie_out+0xe6>
                set_nixie_segment(p->segdata, NIXIE_LEFT_LAMP, 0, p->intensity);
            }
            else if (p->cursor > 3) {
    178c:	84 30       	cpi	r24, 0x04	; 4
    178e:	08 f4       	brcc	.+2      	; 0x1792 <nixie_out+0xde>
    1790:	7e c0       	rjmp	.+252    	; 0x188e <nixie_out+0x1da>
    1792:	0a c0       	rjmp	.+20     	; 0x17a8 <nixie_out+0xf4>
                set_nixie_segment(p->segdata, NIXIE_RIGHT_LAMP, 0, p->intensity);
            }
            break;

        case ',' :                      // Turn on lamp to right of cursor
            if ((p->cursor == 0) || (p->cursor == 1)) {
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	20 f4       	brcc	.+8      	; 0x17a2 <nixie_out+0xee>
                set_nixie_segment(p->segdata, NIXIE_LEFT_LAMP, 0, p->intensity);
    179a:	88 81       	ld	r24, Y
    179c:	99 81       	ldd	r25, Y+1	; 0x01
    179e:	66 e0       	ldi	r22, 0x06	; 6
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <nixie_out+0xfa>
            }
            else if (p->cursor < 4) {
    17a2:	84 30       	cpi	r24, 0x04	; 4
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <nixie_out+0xf4>
    17a6:	73 c0       	rjmp	.+230    	; 0x188e <nixie_out+0x1da>
                set_nixie_segment(p->segdata, NIXIE_RIGHT_LAMP, 0, p->intensity);
    17a8:	88 81       	ld	r24, Y
    17aa:	99 81       	ldd	r25, Y+1	; 0x01
    17ac:	67 e0       	ldi	r22, 0x07	; 7
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	2b 81       	ldd	r18, Y+3	; 0x03
    17b2:	11 c0       	rjmp	.+34     	; 0x17d6 <nixie_out+0x122>
            }
            break;

        case 'X' :                      // Turn on AUX output A
            set_nixie_segment(p->segdata, NIXIE_AUX_A, 0, p->intensity);
    17b4:	88 81       	ld	r24, Y
    17b6:	99 81       	ldd	r25, Y+1	; 0x01
    17b8:	68 e0       	ldi	r22, 0x08	; 8
    17ba:	f9 cf       	rjmp	.-14     	; 0x17ae <nixie_out+0xfa>
            break;

        case 'x' :                      // Turn off AUX output A
            set_nixie_segment(p->segdata, NIXIE_AUX_A, 0, 0);
    17bc:	88 81       	ld	r24, Y
    17be:	99 81       	ldd	r25, Y+1	; 0x01
    17c0:	68 e0       	ldi	r22, 0x08	; 8
    17c2:	07 c0       	rjmp	.+14     	; 0x17d2 <nixie_out+0x11e>
            break;

        case 'Y' :                      // Turn on AUX output B
            set_nixie_segment(p->segdata, NIXIE_AUX_B, 0, p->intensity);
    17c4:	88 81       	ld	r24, Y
    17c6:	99 81       	ldd	r25, Y+1	; 0x01
    17c8:	69 e0       	ldi	r22, 0x09	; 9
    17ca:	f1 cf       	rjmp	.-30     	; 0x17ae <nixie_out+0xfa>
            break;

        case 'y' :                      // Turn off AUX output B
            set_nixie_segment(p->segdata, NIXIE_AUX_B, 0, 0);
    17cc:	88 81       	ld	r24, Y
    17ce:	99 81       	ldd	r25, Y+1	; 0x01
    17d0:	69 e0       	ldi	r22, 0x09	; 9
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	0e 94 34 0b 	call	0x1668	; 0x1668 <set_nixie_segment>
            break;
    17da:	59 c0       	rjmp	.+178    	; 0x188e <nixie_out+0x1da>


        case '[' :                      // Decrease intensity by 1
            if (p->intensity) {
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	88 23       	and	r24, r24
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <nixie_out+0x130>
    17e2:	55 c0       	rjmp	.+170    	; 0x188e <nixie_out+0x1da>
                p->intensity--;
    17e4:	81 50       	subi	r24, 0x01	; 1
    17e6:	09 c0       	rjmp	.+18     	; 0x17fa <nixie_out+0x146>
            }
            break;

        case ']' :                      // Increase intensity by 1
            if (p->intensity < MAX_NIXIE_INTENSITY) {
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	89 30       	cpi	r24, 0x09	; 9
    17ec:	08 f0       	brcs	.+2      	; 0x17f0 <nixie_out+0x13c>
    17ee:	4f c0       	rjmp	.+158    	; 0x188e <nixie_out+0x1da>
                p->intensity++;
    17f0:	8f 5f       	subi	r24, 0xFF	; 255
    17f2:	03 c0       	rjmp	.+6      	; 0x17fa <nixie_out+0x146>
            }
            break;

        case '*' :                      // Set intensity to following digit
            p->state = SET_INTENSITY;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	22 c0       	rjmp	.+68     	; 0x183c <nixie_out+0x188>
            break;

        case '~' :                      // Set intensity to max/nominal
            p->intensity = NOMINAL_NIXIE_INTENSITY;
    17f8:	89 e0       	ldi	r24, 0x09	; 9
    17fa:	8b 83       	std	Y+3, r24	; 0x03
            break;
    17fc:	48 c0       	rjmp	.+144    	; 0x188e <nixie_out+0x1da>

        case '$' :                      // Enable cursor auto-increment
            p->control.no_cursor_inc = 0;
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	8e 7f       	andi	r24, 0xFE	; 254
    1802:	23 c0       	rjmp	.+70     	; 0x184a <nixie_out+0x196>
            break;

        case '#' :                      // Disable cursor auto-increment
            p->control.no_cursor_inc = 1;
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	81 60       	ori	r24, 0x01	; 1
    1808:	20 c0       	rjmp	.+64     	; 0x184a <nixie_out+0x196>
            break;

        case '!' :                      // Next char does not auto-inc cursor
            p->control.single_no_inc = 1;
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	82 60       	ori	r24, 0x02	; 2
    180e:	1d c0       	rjmp	.+58     	; 0x184a <nixie_out+0x196>
            break;

        case '&' :                      // Disable overlay mode
            p->control.overlay = 0;
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	8b 7f       	andi	r24, 0xFB	; 251
    1814:	1a c0       	rjmp	.+52     	; 0x184a <nixie_out+0x196>
            break;

        case '|' :                      // Enable overlay mode
            p->control.overlay = 1;
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	84 60       	ori	r24, 0x04	; 4
    181a:	17 c0       	rjmp	.+46     	; 0x184a <nixie_out+0x196>
 *          of the display (it will wrap to the right side, if enabled)
 ******************************************************************************/

static void dec_cursor(nixie_stream_t *control)
{
    control->cursor--;
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	81 50       	subi	r24, 0x01	; 1
    1820:	8a 83       	std	Y+2, r24	; 0x02

    if (control->cursor & 0x80) {
    1822:	87 ff       	sbrs	r24, 7
    1824:	07 c0       	rjmp	.+14     	; 0x1834 <nixie_out+0x180>
        if (control->control.no_cursor_wrap) {
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	84 ff       	sbrs	r24, 4
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <nixie_out+0x17c>
            control->cursor = 0;
    182c:	1a 82       	std	Y+2, r1	; 0x02
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <nixie_out+0x180>
        }
        else {
            control->cursor = NIXIE_DISPLAY_WIDTH - 1;
    1830:	85 e0       	ldi	r24, 0x05	; 5
    1832:	8a 83       	std	Y+2, r24	; 0x02
            p->control.single_overlay = 1;
            break;

        case '^' :                      // Dec cursor, next char overlays
            dec_cursor(p);
            p->control.single_overlay = 1;
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	88 60       	ori	r24, 0x08	; 8
    1838:	08 c0       	rjmp	.+16     	; 0x184a <nixie_out+0x196>
            break;

        case '@' :                      // Set cursor to absolute position
            p->state = SET_CURSOR_POS;
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	8c 83       	std	Y+4, r24	; 0x04
            break;
    183e:	27 c0       	rjmp	.+78     	; 0x188e <nixie_out+0x1da>

        case '{' :                      // Disable cursor auto-wraparound
            p->control.no_cursor_wrap = 1;
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	80 61       	ori	r24, 0x10	; 16
    1844:	02 c0       	rjmp	.+4      	; 0x184a <nixie_out+0x196>
            break;

        case '}' :                      // Enable cursor auto-wraparound
            p->control.no_cursor_wrap = 0;
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	8f 7e       	andi	r24, 0xEF	; 239
    184a:	8d 83       	std	Y+5, r24	; 0x05
            break;
    184c:	20 c0       	rjmp	.+64     	; 0x188e <nixie_out+0x1da>

        case '\f' :                     // Clear display, cursor to left
            clear_nixie_display(p->segdata);
    184e:	88 81       	ld	r24, Y
    1850:	99 81       	ldd	r25, Y+1	; 0x01
    1852:	0e 94 2e 0b 	call	0x165c	; 0x165c <clear_nixie_display>
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <nixie_out+0x1be>
        case '\r' :                     // Move cursor to leftmost digit
            p->cursor = 0;
            break;

        case '\n' :                     // Clear display
            clear_nixie_display(p->segdata);
    1858:	88 81       	ld	r24, Y
    185a:	99 81       	ldd	r25, Y+1	; 0x01
    185c:	0e 94 2e 0b 	call	0x165c	; 0x165c <clear_nixie_display>
            break;
    1860:	16 c0       	rjmp	.+44     	; 0x188e <nixie_out+0x1da>
 *          of the display (it will wrap to the right side, if enabled)
 ******************************************************************************/

static void dec_cursor(nixie_stream_t *control)
{
    control->cursor--;
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	81 50       	subi	r24, 0x01	; 1
    1866:	8a 83       	std	Y+2, r24	; 0x02

    if (control->cursor & 0x80) {
    1868:	87 ff       	sbrs	r24, 7
    186a:	11 c0       	rjmp	.+34     	; 0x188e <nixie_out+0x1da>
        if (control->control.no_cursor_wrap) {
    186c:	8d 81       	ldd	r24, Y+5	; 0x05
    186e:	84 ff       	sbrs	r24, 4
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <nixie_out+0x1c2>
            control->cursor = 0;
    1872:	1a 82       	std	Y+2, r1	; 0x02
    1874:	0c c0       	rjmp	.+24     	; 0x188e <nixie_out+0x1da>
        }
        else {
            control->cursor = NIXIE_DISPLAY_WIDTH - 1;
    1876:	85 e0       	ldi	r24, 0x05	; 5
    1878:	8a 83       	std	Y+2, r24	; 0x02
    187a:	09 c0       	rjmp	.+18     	; 0x188e <nixie_out+0x1da>
        case '\b' :                     // Move cursor left 1 digit
            dec_cursor(p);
            break;

        case '\t' :                     // Move cursor right 1 digit
            inc_cursor(p, 0);
    187c:	ce 01       	movw	r24, r28
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	0e 94 41 0b 	call	0x1682	; 0x1682 <inc_cursor>
            break;
    1884:	04 c0       	rjmp	.+8      	; 0x188e <nixie_out+0x1da>

        case '\v' :                     // Partial display init
            p->intensity = MAX_NIXIE_INTENSITY;
    1886:	89 e0       	ldi	r24, 0x09	; 9
    1888:	8b 83       	std	Y+3, r24	; 0x03
            p->cursor = 0;
    188a:	1a 82       	std	Y+2, r1	; 0x02
            p->control.all = 0;
    188c:	1d 82       	std	Y+5, r1	; 0x05
            break;
    }

    return 0;
}
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	08 95       	ret
    }

    // Character is not displayable
    // Check for valid control characters

    switch(ch) {
    189a:	1c 33       	cpi	r17, 0x3C	; 60
    189c:	09 f4       	brne	.+2      	; 0x18a0 <nixie_out+0x1ec>
    189e:	7d cf       	rjmp	.-262    	; 0x179a <nixie_out+0xe6>
    18a0:	1d 33       	cpi	r17, 0x3D	; 61
    18a2:	70 f5       	brcc	.+92     	; 0x1900 <nixie_out+0x24c>
    18a4:	13 32       	cpi	r17, 0x23	; 35
    18a6:	09 f4       	brne	.+2      	; 0x18aa <nixie_out+0x1f6>
    18a8:	ad cf       	rjmp	.-166    	; 0x1804 <nixie_out+0x150>
    18aa:	14 32       	cpi	r17, 0x24	; 36
    18ac:	90 f4       	brcc	.+36     	; 0x18d2 <nixie_out+0x21e>
    18ae:	1b 30       	cpi	r17, 0x0B	; 11
    18b0:	51 f3       	breq	.-44     	; 0x1886 <nixie_out+0x1d2>
    18b2:	1c 30       	cpi	r17, 0x0C	; 12
    18b4:	38 f4       	brcc	.+14     	; 0x18c4 <nixie_out+0x210>
    18b6:	19 30       	cpi	r17, 0x09	; 9
    18b8:	09 f3       	breq	.-62     	; 0x187c <nixie_out+0x1c8>
    18ba:	1a 30       	cpi	r17, 0x0A	; 10
    18bc:	68 f6       	brcc	.-102    	; 0x1858 <nixie_out+0x1a4>
    18be:	18 30       	cpi	r17, 0x08	; 8
    18c0:	31 f7       	brne	.-52     	; 0x188e <nixie_out+0x1da>
    18c2:	cf cf       	rjmp	.-98     	; 0x1862 <nixie_out+0x1ae>
    18c4:	1d 30       	cpi	r17, 0x0D	; 13
    18c6:	a9 f2       	breq	.-86     	; 0x1872 <nixie_out+0x1be>
    18c8:	1d 30       	cpi	r17, 0x0D	; 13
    18ca:	08 f2       	brcs	.-126    	; 0x184e <nixie_out+0x19a>
    18cc:	11 32       	cpi	r17, 0x21	; 33
    18ce:	f9 f6       	brne	.-66     	; 0x188e <nixie_out+0x1da>
    18d0:	9c cf       	rjmp	.-200    	; 0x180a <nixie_out+0x156>
    18d2:	19 32       	cpi	r17, 0x29	; 41
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <nixie_out+0x224>
    18d6:	51 cf       	rjmp	.-350    	; 0x177a <nixie_out+0xc6>
    18d8:	1a 32       	cpi	r17, 0x2A	; 42
    18da:	48 f4       	brcc	.+18     	; 0x18ee <nixie_out+0x23a>
    18dc:	16 32       	cpi	r17, 0x26	; 38
    18de:	09 f4       	brne	.+2      	; 0x18e2 <nixie_out+0x22e>
    18e0:	97 cf       	rjmp	.-210    	; 0x1810 <nixie_out+0x15c>
    18e2:	18 32       	cpi	r17, 0x28	; 40
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <nixie_out+0x234>
    18e6:	3e cf       	rjmp	.-388    	; 0x1764 <nixie_out+0xb0>
    18e8:	14 32       	cpi	r17, 0x24	; 36
    18ea:	89 f6       	brne	.-94     	; 0x188e <nixie_out+0x1da>
    18ec:	88 cf       	rjmp	.-240    	; 0x17fe <nixie_out+0x14a>
    18ee:	1c 32       	cpi	r17, 0x2C	; 44
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <nixie_out+0x240>
    18f2:	50 cf       	rjmp	.-352    	; 0x1794 <nixie_out+0xe0>
    18f4:	1e 32       	cpi	r17, 0x2E	; 46
    18f6:	09 f4       	brne	.+2      	; 0x18fa <nixie_out+0x246>
    18f8:	44 cf       	rjmp	.-376    	; 0x1782 <nixie_out+0xce>
    18fa:	1a 32       	cpi	r17, 0x2A	; 42
    18fc:	41 f6       	brne	.-112    	; 0x188e <nixie_out+0x1da>
    18fe:	7a cf       	rjmp	.-268    	; 0x17f4 <nixie_out+0x140>
    1900:	1f 35       	cpi	r17, 0x5F	; 95
    1902:	09 f4       	brne	.+2      	; 0x1906 <nixie_out+0x252>
    1904:	97 cf       	rjmp	.-210    	; 0x1834 <nixie_out+0x180>
    1906:	10 36       	cpi	r17, 0x60	; 96
    1908:	c8 f4       	brcc	.+50     	; 0x193c <nixie_out+0x288>
    190a:	19 35       	cpi	r17, 0x59	; 89
    190c:	09 f4       	brne	.+2      	; 0x1910 <nixie_out+0x25c>
    190e:	5a cf       	rjmp	.-332    	; 0x17c4 <nixie_out+0x110>
    1910:	1a 35       	cpi	r17, 0x5A	; 90
    1912:	50 f4       	brcc	.+20     	; 0x1928 <nixie_out+0x274>
    1914:	10 34       	cpi	r17, 0x40	; 64
    1916:	09 f4       	brne	.+2      	; 0x191a <nixie_out+0x266>
    1918:	90 cf       	rjmp	.-224    	; 0x183a <nixie_out+0x186>
    191a:	18 35       	cpi	r17, 0x58	; 88
    191c:	09 f4       	brne	.+2      	; 0x1920 <nixie_out+0x26c>
    191e:	4a cf       	rjmp	.-364    	; 0x17b4 <nixie_out+0x100>
    1920:	1e 33       	cpi	r17, 0x3E	; 62
    1922:	09 f0       	breq	.+2      	; 0x1926 <nixie_out+0x272>
    1924:	b4 cf       	rjmp	.-152    	; 0x188e <nixie_out+0x1da>
    1926:	40 cf       	rjmp	.-384    	; 0x17a8 <nixie_out+0xf4>
    1928:	1d 35       	cpi	r17, 0x5D	; 93
    192a:	09 f4       	brne	.+2      	; 0x192e <nixie_out+0x27a>
    192c:	5d cf       	rjmp	.-326    	; 0x17e8 <nixie_out+0x134>
    192e:	1e 35       	cpi	r17, 0x5E	; 94
    1930:	08 f0       	brcs	.+2      	; 0x1934 <nixie_out+0x280>
    1932:	74 cf       	rjmp	.-280    	; 0x181c <nixie_out+0x168>
    1934:	1b 35       	cpi	r17, 0x5B	; 91
    1936:	09 f0       	breq	.+2      	; 0x193a <nixie_out+0x286>
    1938:	aa cf       	rjmp	.-172    	; 0x188e <nixie_out+0x1da>
    193a:	50 cf       	rjmp	.-352    	; 0x17dc <nixie_out+0x128>
    193c:	1b 37       	cpi	r17, 0x7B	; 123
    193e:	09 f4       	brne	.+2      	; 0x1942 <nixie_out+0x28e>
    1940:	7f cf       	rjmp	.-258    	; 0x1840 <nixie_out+0x18c>
    1942:	1c 37       	cpi	r17, 0x7C	; 124
    1944:	50 f4       	brcc	.+20     	; 0x195a <nixie_out+0x2a6>
    1946:	18 37       	cpi	r17, 0x78	; 120
    1948:	09 f4       	brne	.+2      	; 0x194c <nixie_out+0x298>
    194a:	38 cf       	rjmp	.-400    	; 0x17bc <nixie_out+0x108>
    194c:	19 37       	cpi	r17, 0x79	; 121
    194e:	09 f4       	brne	.+2      	; 0x1952 <nixie_out+0x29e>
    1950:	3d cf       	rjmp	.-390    	; 0x17cc <nixie_out+0x118>
    1952:	10 36       	cpi	r17, 0x60	; 96
    1954:	09 f0       	breq	.+2      	; 0x1958 <nixie_out+0x2a4>
    1956:	9b cf       	rjmp	.-202    	; 0x188e <nixie_out+0x1da>
    1958:	09 cf       	rjmp	.-494    	; 0x176c <nixie_out+0xb8>
    195a:	1d 37       	cpi	r17, 0x7D	; 125
    195c:	09 f4       	brne	.+2      	; 0x1960 <nixie_out+0x2ac>
    195e:	73 cf       	rjmp	.-282    	; 0x1846 <nixie_out+0x192>
    1960:	1d 37       	cpi	r17, 0x7D	; 125
    1962:	08 f4       	brcc	.+2      	; 0x1966 <nixie_out+0x2b2>
    1964:	58 cf       	rjmp	.-336    	; 0x1816 <nixie_out+0x162>
    1966:	1e 37       	cpi	r17, 0x7E	; 126
    1968:	09 f0       	breq	.+2      	; 0x196c <nixie_out+0x2b8>
    196a:	91 cf       	rjmp	.-222    	; 0x188e <nixie_out+0x1da>
    196c:	45 cf       	rjmp	.-374    	; 0x17f8 <nixie_out+0x144>

0000196e <nixie_display_refresh>:
    register uint8_t nixie_data;        // Data accumulator, sent to SPI, 8 bits of segment on/off data
    register uint8_t bit_mask;          // ORed into nixie_data if a given segment should be ON

    // Exit if display refresh disabled

    if (!nixie_control.refresh_enable) {
    196e:	80 91 00 01 	lds	r24, 0x0100
    1972:	87 ff       	sbrs	r24, 7
    1974:	3a c0       	rjmp	.+116    	; 0x19ea <nixie_display_refresh+0x7c>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	21 e0       	ldi	r18, 0x01	; 1
    197c:	30 e0       	ldi	r19, 0x00	; 0
        // A given nixie display segment should be ON for this PWM sub-cycle
        // if its intensity setting is greater than the current sub-cycle
        // count, which cycles from 0..MAX_NIXIE_INTENSITY and is incremented
        // on every entry into the ISR.

        if (nixie_segment_ptr[segment_index] > intensity_count) {
    197e:	e0 91 55 01 	lds	r30, 0x0155
    1982:	f0 91 56 01 	lds	r31, 0x0156
    1986:	e8 0f       	add	r30, r24
    1988:	f9 1f       	adc	r31, r25
    198a:	50 81       	ld	r21, Z
    198c:	40 91 57 01 	lds	r20, 0x0157
    1990:	45 17       	cp	r20, r21
    1992:	08 f4       	brcc	.+2      	; 0x1996 <nixie_display_refresh+0x28>
            // Turn nixie segment on for this PWM subcycle
            nixie_data |= bit_mask;
    1994:	32 2b       	or	r19, r18
        }

        if (bit_mask & 0x80) {
    1996:	27 ff       	sbrs	r18, 7
    1998:	07 c0       	rjmp	.+14     	; 0x19a8 <nixie_display_refresh+0x3a>
            // 8 bits of segment data have been processed
            // Send the data to the display driver via SPI, and reset data
            // accumulator and bit-on mask for the next 8 bits of data to
            // send out.

            while (!(SPSR & BM(SPIF))); // Wait for previous byte to finish shifting out
    199a:	0d b4       	in	r0, 0x2d	; 45
    199c:	07 fe       	sbrs	r0, 7
    199e:	fd cf       	rjmp	.-6      	; 0x199a <nixie_display_refresh+0x2c>
            SPDR = nixie_data;
    19a0:	3e bd       	out	0x2e, r19	; 46
            bit_mask = 0x01;
    19a2:	21 e0       	ldi	r18, 0x01	; 1
            nixie_data = 0x00;
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	01 c0       	rjmp	.+2      	; 0x19aa <nixie_display_refresh+0x3c>

        else {

            // Advance bit-on mask for the next display segment

            bit_mask <<= 1;
    19a8:	22 0f       	add	r18, r18
    19aa:	01 96       	adiw	r24, 0x01	; 1
    nixie_data = 0x00;

    // Build and shift out via SPI 64 bits (NIXIE_SEGMENTS) worth of
    // nixie segment on/off data

    for (segment_index = 0; segment_index < NIXIE_SEGMENTS; segment_index++) {
    19ac:	80 34       	cpi	r24, 0x40	; 64
    19ae:	91 05       	cpc	r25, r1
    19b0:	31 f7       	brne	.-52     	; 0x197e <nixie_display_refresh+0x10>
    }

    // Display driver has all 64 bits of data it needs
    // Pulse latch-data pin on display driver

    while (!(SPSR & BM(SPIF))); // Wait for last byte to finish shifting out
    19b2:	0d b4       	in	r0, 0x2d	; 45
    19b4:	07 fe       	sbrs	r0, 7
    19b6:	fd cf       	rjmp	.-6      	; 0x19b2 <nixie_display_refresh+0x44>
    BSET(DRIVER_LATCH);
    19b8:	2a 9a       	sbi	0x05, 2	; 5
    BCLR(DRIVER_LATCH);
    19ba:	2a 98       	cbi	0x05, 2	; 5

    // Increment intensity counter for next display PWM sub-cycle
    // When this count exceeds the max intensity setting, reset it to 0

    intensity_count++;
    19bc:	80 91 57 01 	lds	r24, 0x0157
    19c0:	8f 5f       	subi	r24, 0xFF	; 255
    19c2:	80 93 57 01 	sts	0x0157, r24
    if (intensity_count >= MAX_NIXIE_INTENSITY) {
    19c6:	89 30       	cpi	r24, 0x09	; 9
    19c8:	80 f0       	brcs	.+32     	; 0x19ea <nixie_display_refresh+0x7c>
        intensity_count = 0;
    19ca:	10 92 57 01 	sts	0x0157, r1
        nixie_control.one_cycle_done = 1;
    19ce:	80 91 00 01 	lds	r24, 0x0100
    19d2:	80 62       	ori	r24, 0x20	; 32
    19d4:	80 93 00 01 	sts	0x0100, r24

        // Suspend display refresh if one-cycle-only mode in effect
        // (Used for crossfade synchronization)

        if (nixie_control.one_cycle_only) {
    19d8:	80 91 00 01 	lds	r24, 0x0100
    19dc:	86 ff       	sbrs	r24, 6
    19de:	05 c0       	rjmp	.+10     	; 0x19ea <nixie_display_refresh+0x7c>
            nixie_control.refresh_enable = 0;
    19e0:	80 91 00 01 	lds	r24, 0x0100
    19e4:	8f 77       	andi	r24, 0x7F	; 127
    19e6:	80 93 00 01 	sts	0x0100, r24
    19ea:	08 95       	ret

000019ec <nixie_display_enable>:
 *          0/FALSE.
 ******************************************************************************/

void nixie_display_enable(uint8_t enable)
{
    if (enable) {
    19ec:	88 23       	and	r24, r24
    19ee:	61 f0       	breq	.+24     	; 0x1a08 <nixie_display_enable+0x1c>
        nixie_control.one_cycle_only = 0;
    19f0:	80 91 00 01 	lds	r24, 0x0100
    19f4:	8f 7b       	andi	r24, 0xBF	; 191
    19f6:	80 93 00 01 	sts	0x0100, r24
        nixie_control.refresh_enable = 1;
    19fa:	80 91 00 01 	lds	r24, 0x0100
    19fe:	80 68       	ori	r24, 0x80	; 128
    1a00:	80 93 00 01 	sts	0x0100, r24
        BSET(DRIVER_ENABLE);
    1a04:	40 9a       	sbi	0x08, 0	; 8
    1a06:	08 95       	ret
    }
    else {
        nixie_control.refresh_enable = 0;
    1a08:	80 91 00 01 	lds	r24, 0x0100
    1a0c:	8f 77       	andi	r24, 0x7F	; 127
    1a0e:	80 93 00 01 	sts	0x0100, r24
        BCLR(DRIVER_ENABLE);
    1a12:	40 98       	cbi	0x08, 0	; 8
    1a14:	08 95       	ret

00001a16 <nixie_stream_init>:
 *          initialize them and link them together to build a FILE object
 *          that can be used by the stdio library output functions.
 ******************************************************************************/

void nixie_stream_init(FILE *stream, nixie_stream_t *control, uint8_t *segdata)
{
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	eb 01       	movw	r28, r22
    1a1e:	ca 01       	movw	r24, r20
    stream->put = &nixie_out;
    1a20:	2a e5       	ldi	r18, 0x5A	; 90
    1a22:	3b e0       	ldi	r19, 0x0B	; 11
    1a24:	31 87       	std	Z+9, r19	; 0x09
    1a26:	20 87       	std	Z+8, r18	; 0x08
    stream->get = NULL;
    1a28:	13 86       	std	Z+11, r1	; 0x0b
    1a2a:	12 86       	std	Z+10, r1	; 0x0a
    stream->flags = _FDEV_SETUP_WRITE;
    1a2c:	22 e0       	ldi	r18, 0x02	; 2
    1a2e:	23 83       	std	Z+3, r18	; 0x03
    stream->udata = control;
    1a30:	75 87       	std	Z+13, r23	; 0x0d
    1a32:	64 87       	std	Z+12, r22	; 0x0c

    ((nixie_stream_t *) (stream->udata))->segdata = segdata;
    1a34:	59 83       	std	Y+1, r21	; 0x01
    1a36:	48 83       	st	Y, r20
 * Returns: Nothing
 ******************************************************************************/

static void nixie_control_init(nixie_stream_t *control)
{
    clear_nixie_display(control->segdata);
    1a38:	0e 94 2e 0b 	call	0x165c	; 0x165c <clear_nixie_display>
    control->cursor = 0;
    1a3c:	1a 82       	std	Y+2, r1	; 0x02
    control->intensity = MAX_NIXIE_INTENSITY;
    1a3e:	89 e0       	ldi	r24, 0x09	; 9
    1a40:	8b 83       	std	Y+3, r24	; 0x03
    control->control.all = 0;
    1a42:	1d 82       	std	Y+5, r1	; 0x05
    control->state = NORMAL_OUTPUT;
    1a44:	1c 82       	std	Y+4, r1	; 0x04
    stream->udata = control;

    ((nixie_stream_t *) (stream->udata))->segdata = segdata;

    nixie_control_init(control);
}
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	08 95       	ret

00001a4c <nixie_show_stream>:
 * Returns: Nothing
 ******************************************************************************/

void nixie_show_stream(FILE *stream)
{
    nixie_segment_ptr = ((nixie_stream_t *) stream->udata)->segdata;
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	1c 96       	adiw	r26, 0x0c	; 12
    1a50:	ed 91       	ld	r30, X+
    1a52:	fc 91       	ld	r31, X
    1a54:	1d 97       	sbiw	r26, 0x0d	; 13
    1a56:	80 81       	ld	r24, Z
    1a58:	91 81       	ldd	r25, Z+1	; 0x01
    1a5a:	90 93 56 01 	sts	0x0156, r25
    1a5e:	80 93 55 01 	sts	0x0155, r24
}
    1a62:	08 95       	ret

00001a64 <nixie_crossfade>:
 *          the state of the new (to_stream) and old displays, this can take
 *          several hundred milliseconds to complete.
 ******************************************************************************/

void nixie_crossfade(FILE *to_stream)
{
    1a64:	cf 93       	push	r28
    register uint8_t *p_from;
    register uint8_t *p_to;
    register uint8_t activity;
    register uint8_t index;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1a66:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a68:	f8 94       	cli
    {
        nixie_control.one_cycle_only = 1;
    1a6a:	20 91 00 01 	lds	r18, 0x0100
    1a6e:	20 64       	ori	r18, 0x40	; 64
    1a70:	20 93 00 01 	sts	0x0100, r18
        nixie_control.one_cycle_done = 0;
    1a74:	20 91 00 01 	lds	r18, 0x0100
    1a78:	2f 7d       	andi	r18, 0xDF	; 223
    1a7a:	20 93 00 01 	sts	0x0100, r18
        nixie_control.crossfade_count = 3;
    1a7e:	20 91 00 01 	lds	r18, 0x0100
    1a82:	2c 60       	ori	r18, 0x0C	; 12
    1a84:	20 93 00 01 	sts	0x0100, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a88:	3f bf       	out	0x3f, r19	; 63

    do {
        // Set up for next crossfade pass
        // Reset pointers to segment data arrays

        p_from = nixie_segment_ptr;
    1a8a:	70 91 55 01 	lds	r23, 0x0155
    1a8e:	60 91 56 01 	lds	r22, 0x0156
        p_to = ((nixie_stream_t *) to_stream->udata)->segdata;
    1a92:	dc 01       	movw	r26, r24
    1a94:	1c 96       	adiw	r26, 0x0c	; 12
    1a96:	ed 91       	ld	r30, X+
    1a98:	fc 91       	ld	r31, X
    1a9a:	1d 97       	sbiw	r26, 0x0d	; 13
    1a9c:	c0 81       	ld	r28, Z
    1a9e:	e1 81       	ldd	r30, Z+1	; 0x01
        // Wait for one display PWM cycle to complete
        //
        // With one_cycle_only in effect, refresh is suspended after one full
        // PWM cycle has completed.

        while (! nixie_control.one_cycle_done) ;
    1aa0:	20 91 00 01 	lds	r18, 0x0100
    1aa4:	25 ff       	sbrs	r18, 5
    1aa6:	fc cf       	rjmp	.-8      	; 0x1aa0 <nixie_crossfade+0x3c>
        nixie_control.one_cycle_done = 0;
    1aa8:	20 91 00 01 	lds	r18, 0x0100
    1aac:	2f 7d       	andi	r18, 0xDF	; 223
    1aae:	20 93 00 01 	sts	0x0100, r18

        // Perform crossfade intensity adjustment only every other cycle if
        // slow crossfade mode is enabled

        if (nixie_control.crossfade_count < nixie_control.crossfade_rate) {
    1ab2:	40 91 00 01 	lds	r20, 0x0100
    1ab6:	46 95       	lsr	r20
    1ab8:	46 95       	lsr	r20
    1aba:	43 70       	andi	r20, 0x03	; 3
    1abc:	20 91 00 01 	lds	r18, 0x0100
    1ac0:	23 70       	andi	r18, 0x03	; 3
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	42 17       	cp	r20, r18
    1ac8:	53 07       	cpc	r21, r19
    1aca:	a4 f4       	brge	.+40     	; 0x1af4 <nixie_crossfade+0x90>
            nixie_control.refresh_enable = 1;
    1acc:	20 91 00 01 	lds	r18, 0x0100
    1ad0:	20 68       	ori	r18, 0x80	; 128
    1ad2:	20 93 00 01 	sts	0x0100, r18
            nixie_control.crossfade_count++;
    1ad6:	20 91 00 01 	lds	r18, 0x0100
    1ada:	26 95       	lsr	r18
    1adc:	26 95       	lsr	r18
    1ade:	2f 5f       	subi	r18, 0xFF	; 255
    1ae0:	23 70       	andi	r18, 0x03	; 3
    1ae2:	22 0f       	add	r18, r18
    1ae4:	22 0f       	add	r18, r18
    1ae6:	30 91 00 01 	lds	r19, 0x0100
    1aea:	33 7f       	andi	r19, 0xF3	; 243
    1aec:	32 2b       	or	r19, r18
    1aee:	30 93 00 01 	sts	0x0100, r19
    1af2:	cf cf       	rjmp	.-98     	; 0x1a92 <nixie_crossfade+0x2e>
    1af4:	ac 2f       	mov	r26, r28
    1af6:	be 2f       	mov	r27, r30
        nixie_control.one_cycle_done = 0;

        // Perform crossfade intensity adjustment only every other cycle if
        // slow crossfade mode is enabled

        if (nixie_control.crossfade_count < nixie_control.crossfade_rate) {
    1af8:	e7 2f       	mov	r30, r23
    1afa:	f6 2f       	mov	r31, r22
    1afc:	30 e4       	ldi	r19, 0x40	; 64
    1afe:	20 e0       	ldi	r18, 0x00	; 0
        // Fade segments that are ON in "to" display up 
        // Fade segments that are OFF in "to" display down

        activity = 0;
        for (index = 0; index < NIXIE_SEGMENTS; index++) {
            if (*p_to) {            // Is segment in new display on ?
    1b00:	5d 91       	ld	r21, X+
                if (*p_from < *p_to) {
    1b02:	40 81       	ld	r20, Z
        // Fade segments that are ON in "to" display up 
        // Fade segments that are OFF in "to" display down

        activity = 0;
        for (index = 0; index < NIXIE_SEGMENTS; index++) {
            if (*p_to) {            // Is segment in new display on ?
    1b04:	55 23       	and	r21, r21
    1b06:	21 f0       	breq	.+8      	; 0x1b10 <nixie_crossfade+0xac>
                if (*p_from < *p_to) {
    1b08:	45 17       	cp	r20, r21
    1b0a:	38 f4       	brcc	.+14     	; 0x1b1a <nixie_crossfade+0xb6>
                    // Fade segment up to new intensity level
                    (*p_from)++;
    1b0c:	4f 5f       	subi	r20, 0xFF	; 255
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <nixie_crossfade+0xb2>
                    activity++;
                }
            }
            else if (*p_from) {     // Is segment that is supposed to be off still on?
    1b10:	44 23       	and	r20, r20
    1b12:	19 f0       	breq	.+6      	; 0x1b1a <nixie_crossfade+0xb6>
                // Fade segment down to off
                (*p_from)--;
    1b14:	41 50       	subi	r20, 0x01	; 1
    1b16:	40 83       	st	Z, r20
                activity++;
    1b18:	2f 5f       	subi	r18, 0xFF	; 255
            }

            // Point to next segment to work on

            p_from++;
    1b1a:	31 96       	adiw	r30, 0x01	; 1
    1b1c:	31 50       	subi	r19, 0x01	; 1

        // Fade segments that are ON in "to" display up 
        // Fade segments that are OFF in "to" display down

        activity = 0;
        for (index = 0; index < NIXIE_SEGMENTS; index++) {
    1b1e:	81 f7       	brne	.-32     	; 0x1b00 <nixie_crossfade+0x9c>
            p_to++;
        }

        // One crossfade cycle completed, perform another PWM cycle

        nixie_control.refresh_enable = 1;
    1b20:	30 91 00 01 	lds	r19, 0x0100
    1b24:	30 68       	ori	r19, 0x80	; 128
    1b26:	30 93 00 01 	sts	0x0100, r19
        nixie_control.crossfade_count = 0;
    1b2a:	30 91 00 01 	lds	r19, 0x0100
    1b2e:	33 7f       	andi	r19, 0xF3	; 243
    1b30:	30 93 00 01 	sts	0x0100, r19
    } while (activity);
    1b34:	22 23       	and	r18, r18
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <nixie_crossfade+0xd6>
    1b38:	ac cf       	rjmp	.-168    	; 0x1a92 <nixie_crossfade+0x2e>

    // Crossfading complete, enable normal display refresh

    nixie_control.one_cycle_only = 0;
    1b3a:	80 91 00 01 	lds	r24, 0x0100
    1b3e:	8f 7b       	andi	r24, 0xBF	; 191
    1b40:	80 93 00 01 	sts	0x0100, r24
}
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <nixie_crossfade_rate>:
 * Returns: Nothing
 ******************************************************************************/

void nixie_crossfade_rate(uint8_t rate)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1b48:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b4a:	f8 94       	cli
    {
        nixie_control.crossfade_rate =
    1b4c:	84 30       	cpi	r24, 0x04	; 4
    1b4e:	08 f0       	brcs	.+2      	; 0x1b52 <nixie_crossfade_rate+0xa>
    1b50:	83 e0       	ldi	r24, 0x03	; 3
    1b52:	83 70       	andi	r24, 0x03	; 3
    1b54:	90 91 00 01 	lds	r25, 0x0100
    1b58:	9c 7f       	andi	r25, 0xFC	; 252
    1b5a:	98 2b       	or	r25, r24
    1b5c:	90 93 00 01 	sts	0x0100, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b60:	2f bf       	out	0x3f, r18	; 63
            (rate <= MAX_NIXIE_CROSSFADE_RATE) ? rate : MAX_NIXIE_CROSSFADE_RATE;
    }
}
    1b62:	08 95       	ret

00001b64 <next_player_char>:

static uint8_t next_player_char(void)
{
    uint8_t data;

    if (player_mem_space == PLAYER_MEM_RAM) {
    1b64:	20 91 5a 01 	lds	r18, 0x015A
    1b68:	80 91 58 01 	lds	r24, 0x0158
    1b6c:	90 91 59 01 	lds	r25, 0x0159
    1b70:	22 23       	and	r18, r18
    1b72:	19 f4       	brne	.+6      	; 0x1b7a <next_player_char+0x16>
        data = *player_ptr;
    1b74:	fc 01       	movw	r30, r24
    1b76:	80 81       	ld	r24, Z
    1b78:	0b c0       	rjmp	.+22     	; 0x1b90 <next_player_char+0x2c>
    }
    else if (player_mem_space == PLAYER_MEM_PGM) {
    1b7a:	21 30       	cpi	r18, 0x01	; 1
    1b7c:	19 f4       	brne	.+6      	; 0x1b84 <next_player_char+0x20>
        data = pgm_read_byte(player_ptr);
    1b7e:	fc 01       	movw	r30, r24
    1b80:	84 91       	lpm	r24, Z
    1b82:	06 c0       	rjmp	.+12     	; 0x1b90 <next_player_char+0x2c>
    }
    else if (player_mem_space == PLAYER_MEM_EEPROM) {
    1b84:	22 30       	cpi	r18, 0x02	; 2
    1b86:	19 f4       	brne	.+6      	; 0x1b8e <next_player_char+0x2a>
        data = eeprom_read_byte(player_ptr);
    1b88:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__eerd_byte_m328p>
    1b8c:	01 c0       	rjmp	.+2      	; 0x1b90 <next_player_char+0x2c>
    }
    else {
        data = 0;
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    }

    if ((data >= 'a') && (data <= 'z')) {
    1b90:	98 2f       	mov	r25, r24
    1b92:	91 56       	subi	r25, 0x61	; 97
    1b94:	9a 31       	cpi	r25, 0x1A	; 26
    1b96:	08 f4       	brcc	.+2      	; 0x1b9a <next_player_char+0x36>
        data &= (uint8_t) ~0x20;
    1b98:	8f 7d       	andi	r24, 0xDF	; 223
    }

    player_ptr++;
    1b9a:	20 91 58 01 	lds	r18, 0x0158
    1b9e:	30 91 59 01 	lds	r19, 0x0159
    1ba2:	2f 5f       	subi	r18, 0xFF	; 255
    1ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba6:	30 93 59 01 	sts	0x0159, r19
    1baa:	20 93 58 01 	sts	0x0158, r18

    return data;
}
    1bae:	08 95       	ret

00001bb0 <beeper_init>:
void beeper_init(void)
{
    // Stop timer 1 during init
    // Disable timer 1 interrupts

    TCCR1B &= (uint8_t) ~PRESCALE_STOP;
    1bb0:	e1 e8       	ldi	r30, 0x81	; 129
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	80 83       	st	Z, r24
    TCNT1 = 0;
    1bb8:	10 92 85 00 	sts	0x0085, r1
    1bbc:	10 92 84 00 	sts	0x0084, r1
    TIMSK1 = 0;
    1bc0:	10 92 6f 00 	sts	0x006F, r1

    // Set initial frequency to 440 Hz

    OCR1A = F_CPU / 1 / 440 / 2;
    1bc4:	85 e0       	ldi	r24, 0x05	; 5
    1bc6:	97 e4       	ldi	r25, 0x47	; 71
    1bc8:	90 93 89 00 	sts	0x0089, r25
    1bcc:	80 93 88 00 	sts	0x0088, r24

    // Timer 1 configuration:
    // Toggle OC1A on compare match and reset counter
    // Keep counter stopped, use beep_period() to enable

    TCCR1A = _BV(COM1A0);                   // Toggle OC1A on compare match
    1bd0:	80 e4       	ldi	r24, 0x40	; 64
    1bd2:	80 93 80 00 	sts	0x0080, r24
    TCCR1B = _BV(WGM12);                    // CTC mode, reset when count == OCR1A
    1bd6:	88 e0       	ldi	r24, 0x08	; 8
    1bd8:	80 83       	st	Z, r24
    DDR(BEEPER_PORT) |= _BV(BEEPER_PIN);
    1bda:	21 9a       	sbi	0x04, 1	; 4
    BEEPER_PORT &= (uint8_t) ~_BV(BEEPER_PIN);
    1bdc:	29 98       	cbi	0x05, 1	; 5
}
    1bde:	08 95       	ret

00001be0 <beep_period>:

void beep_period(uint16_t period, prescale_t prescale)
{
    // Stop counter & reset it

    TCCR1B &= (uint8_t) ~PRESCALE_STOP;
    1be0:	e1 e8       	ldi	r30, 0x81	; 129
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	20 81       	ld	r18, Z
    1be6:	20 83       	st	Z, r18
    TCNT1 = 0;
    1be8:	10 92 85 00 	sts	0x0085, r1
    1bec:	10 92 84 00 	sts	0x0084, r1

#if CS10 != 0
    prescale <<= CS10;
#endif

    OCR1A = period;
    1bf0:	90 93 89 00 	sts	0x0089, r25
    1bf4:	80 93 88 00 	sts	0x0088, r24
    TCCR1B |= prescale & (0x07 << CS10);
    1bf8:	80 81       	ld	r24, Z
    1bfa:	67 70       	andi	r22, 0x07	; 7
    1bfc:	68 2b       	or	r22, r24
    1bfe:	60 83       	st	Z, r22
}
    1c00:	08 95       	ret

00001c02 <beep_mute>:
 * Returns: Nothing
 ******************************************************************************/

void beep_mute(uint8_t mute)
{
    if (mute) {
    1c02:	88 23       	and	r24, r24
    1c04:	21 f0       	breq	.+8      	; 0x1c0e <beep_mute+0xc>
        TCCR1B &= (uint8_t) ~PRESCALE_STOP;
    1c06:	80 91 81 00 	lds	r24, 0x0081
    1c0a:	80 93 81 00 	sts	0x0081, r24
    1c0e:	08 95       	ret

00001c10 <beep_gain>:
 *          available, this function should be declared empty.
 ******************************************************************************/

void beep_gain(uint8_t gain)
{
}
    1c10:	08 95       	ret

00001c12 <player_stop>:
 * Returns: Nothing
 ******************************************************************************/

void player_stop(void)
{
    player_enable = PLAYER_STOP;
    1c12:	10 92 79 01 	sts	0x0179, r1
    beep_mute(1);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <beep_mute>
    beep_period(0xFF, PRESCALE_STOP);
    1c1c:	8f ef       	ldi	r24, 0xFF	; 255
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <beep_period>
}
    1c26:	08 95       	ret

00001c28 <player_start>:
 * Notes:   The player_service() function must be called periodically, typically
 *          from a timer interrupt, for the music <str> to be played back.
 ******************************************************************************/

void player_start(const char *str, player_space_t mem_space)
{
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	0f 92       	push	r0
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	8c 01       	movw	r16, r24
    uint8_t index;

    // Set player string index and memory space to values passed in

    player_stop();                      // Stop playing previous string
    1c3c:	69 83       	std	Y+1, r22	; 0x01
    1c3e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <player_stop>
    player_ptr = (uint8_t *) str;       // Typecast prevents compiler warning
    1c42:	10 93 59 01 	sts	0x0159, r17
    1c46:	00 93 58 01 	sts	0x0158, r16
    player_mem_space = mem_space;
    1c4a:	69 81       	ldd	r22, Y+1	; 0x01
    1c4c:	60 93 5a 01 	sts	0x015A, r22
    1c50:	ed e5       	ldi	r30, 0x5D	; 93
    1c52:	f1 e0       	ldi	r31, 0x01	; 1

    // Clear all bookmarks

    for (index = 0; index < NUM_BOOKMARKS; index++) {
    1c54:	80 e0       	ldi	r24, 0x00	; 0
        bookmark[index].repeat = 0;
    1c56:	10 82       	st	Z, r1
 *
 * Notes:   The player_service() function must be called periodically, typically
 *          from a timer interrupt, for the music <str> to be played back.
 ******************************************************************************/

void player_start(const char *str, player_space_t mem_space)
    1c58:	df 01       	movw	r26, r30
    1c5a:	12 97       	sbiw	r26, 0x02	; 2

    // Clear all bookmarks

    for (index = 0; index < NUM_BOOKMARKS; index++) {
        bookmark[index].repeat = 0;
        bookmark[index].position = 0;
    1c5c:	11 96       	adiw	r26, 0x01	; 1
    1c5e:	1c 92       	st	X, r1
    1c60:	1e 92       	st	-X, r1
    player_ptr = (uint8_t *) str;       // Typecast prevents compiler warning
    player_mem_space = mem_space;

    // Clear all bookmarks

    for (index = 0; index < NUM_BOOKMARKS; index++) {
    1c62:	8f 5f       	subi	r24, 0xFF	; 255
    1c64:	33 96       	adiw	r30, 0x03	; 3
    1c66:	8a 30       	cpi	r24, 0x0A	; 10
    1c68:	b1 f7       	brne	.-20     	; 0x1c56 <player_start+0x2e>
    found_mark = 0;                     // Bookmark not found yet

    // Scan play string for bookmark(s)

    do {
        ch = next_player_char();
    1c6a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <next_player_char>
        if (is_bookmark(ch)) {          // Bookmark lead-in character found
    1c6e:	8b 35       	cpi	r24, 0x5B	; 91
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <player_start+0x4c>
    1c72:	42 c0       	rjmp	.+132    	; 0x1cf8 <player_start+0xd0>
            repeat = 0;
            mark = next_player_char();  // Fetch bookmark #
    1c74:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <next_player_char>

            if (is_separator(mark)) {   // Assume bookmark #0 if seperator
    1c78:	80 32       	cpi	r24, 0x20	; 32
    1c7a:	11 f0       	breq	.+4      	; 0x1c80 <player_start+0x58>
    1c7c:	8a 33       	cpi	r24, 0x3A	; 58
    1c7e:	a9 f7       	brne	.-22     	; 0x1c6a <player_start+0x42>
            }
            else {                      // Skip analysis if bookmark # invalid
                continue;
            }

            ch = next_player_char();    // Fetch 1st digit of repeat count
    1c80:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <next_player_char>
            if (is_separator(ch)) {     // Skip past possible seperator
    1c84:	80 32       	cpi	r24, 0x20	; 32
    1c86:	11 f0       	breq	.+4      	; 0x1c8c <player_start+0x64>
    1c88:	8a 33       	cpi	r24, 0x3A	; 58
    1c8a:	11 f4       	brne	.+4      	; 0x1c90 <player_start+0x68>
                ch = next_player_char();
    1c8c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <next_player_char>
    player_ptr = (uint8_t *) str;       // Typecast prevents compiler warning
    player_mem_space = mem_space;

    // Clear all bookmarks

    for (index = 0; index < NUM_BOOKMARKS; index++) {
    1c90:	ee 24       	eor	r14, r14
    1c92:	ff 24       	eor	r15, r15
    1c94:	0e c0       	rjmp	.+28     	; 0x1cb2 <player_start+0x8a>
                ch = next_player_char();
            }

            while (is_digit(ch)) {      // Convert repeat count to integer
                ch -= '0';
                repeat = repeat * 10 + ch;
    1c96:	c7 01       	movw	r24, r14
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	63 e0       	ldi	r22, 0x03	; 3
    1c9e:	ee 0c       	add	r14, r14
    1ca0:	ff 1c       	adc	r15, r15
    1ca2:	6a 95       	dec	r22
    1ca4:	e1 f7       	brne	.-8      	; 0x1c9e <player_start+0x76>
    1ca6:	e8 0e       	add	r14, r24
    1ca8:	f9 1e       	adc	r15, r25
    1caa:	e2 0e       	add	r14, r18
    1cac:	f1 1c       	adc	r15, r1
                ch = next_player_char();
    1cae:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <next_player_char>
            ch = next_player_char();    // Fetch 1st digit of repeat count
            if (is_separator(ch)) {     // Skip past possible seperator
                ch = next_player_char();
            }

            while (is_digit(ch)) {      // Convert repeat count to integer
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	20 53       	subi	r18, 0x30	; 48
    1cb6:	2a 30       	cpi	r18, 0x0A	; 10
    1cb8:	70 f3       	brcs	.-36     	; 0x1c96 <player_start+0x6e>
                ch -= '0';
                repeat = repeat * 10 + ch;
                ch = next_player_char();
            }
            player_ptr--;               // Last char not a digit, back up
    1cba:	20 91 58 01 	lds	r18, 0x0158
    1cbe:	30 91 59 01 	lds	r19, 0x0159
    1cc2:	21 50       	subi	r18, 0x01	; 1
    1cc4:	30 40       	sbci	r19, 0x00	; 0
    1cc6:	30 93 59 01 	sts	0x0159, r19
    1cca:	20 93 58 01 	sts	0x0158, r18

            if (repeat > 0xFE) {        // Valid repeat counts are 0..254
    1cce:	9f ef       	ldi	r25, 0xFF	; 255
    1cd0:	e9 16       	cp	r14, r25
    1cd2:	f1 04       	cpc	r15, r1
    1cd4:	20 f4       	brcc	.+8      	; 0x1cde <player_start+0xb6>
                repeat = 0xFE;          //   Force to maximum if > 254
            }
            if (! repeat) {             // Repeat count of 0 is "infinite"
    1cd6:	e1 14       	cp	r14, r1
    1cd8:	f1 04       	cpc	r15, r1
    1cda:	29 f0       	breq	.+10     	; 0x1ce6 <player_start+0xbe>
    1cdc:	07 c0       	rjmp	.+14     	; 0x1cec <player_start+0xc4>
                ch = next_player_char();
            }
            player_ptr--;               // Last char not a digit, back up

            if (repeat > 0xFE) {        // Valid repeat counts are 0..254
                repeat = 0xFE;          //   Force to maximum if > 254
    1cde:	4e ef       	ldi	r20, 0xFE	; 254
    1ce0:	e4 2e       	mov	r14, r20
    1ce2:	f1 2c       	mov	r15, r1
    1ce4:	03 c0       	rjmp	.+6      	; 0x1cec <player_start+0xc4>
            }
            if (! repeat) {             // Repeat count of 0 is "infinite"
                repeat = 0xFF;          //   0xFF = infinite, never decremented
    1ce6:	9f ef       	ldi	r25, 0xFF	; 255
    1ce8:	e9 2e       	mov	r14, r25
    1cea:	f1 2c       	mov	r15, r1

            // Save bookmark data

            found_mark = (mark == search_mark);
            if (found_mark || (search_mark == 0xFF)) {
                bookmark[mark].repeat = repeat;
    1cec:	e0 92 5d 01 	sts	0x015D, r14
                bookmark[mark].position = player_ptr;
    1cf0:	30 93 5c 01 	sts	0x015C, r19
    1cf4:	20 93 5b 01 	sts	0x015B, r18
            }
        }
    } while (ch && !found_mark);
    1cf8:	88 23       	and	r24, r24
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <player_start+0xd6>
    1cfc:	b6 cf       	rjmp	.-148    	; 0x1c6a <player_start+0x42>

    // Return address of play string immediately following bookmark spec
    // Restore play string pointer to position it was at upon entry

    return_ptr = player_ptr;
    player_ptr = save_ptr;
    1cfe:	10 93 59 01 	sts	0x0159, r17
    1d02:	00 93 58 01 	sts	0x0158, r16

    find_bookmark(0xFF);

    // Allow playback to start

    player_enable = PLAYER_INIT;
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	80 93 79 01 	sts	0x0179, r24
}
    1d0c:	0f 90       	pop	r0
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	08 95       	ret

00001d1c <player_is_stopped>:
 * Returns: Nonzero value if player is idle.
 ******************************************************************************/

uint8_t player_is_stopped(void)
{
    return player_enable == PLAYER_STOP;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 91 79 01 	lds	r25, 0x0179
    1d22:	91 11       	cpse	r25, r1
    1d24:	80 e0       	ldi	r24, 0x00	; 0
}
    1d26:	08 95       	ret

00001d28 <player_service>:
static const int8_t c_major_scale[7] PROGMEM = { 9,11, 0, 2, 4, 5, 7};

#define NOTE_IS_REST    0xFF

void player_service(void)
{
    1d28:	5f 92       	push	r5
    1d2a:	6f 92       	push	r6
    1d2c:	7f 92       	push	r7
    1d2e:	8f 92       	push	r8
    1d30:	9f 92       	push	r9
    1d32:	af 92       	push	r10
    1d34:	bf 92       	push	r11
    1d36:	cf 92       	push	r12
    1d38:	df 92       	push	r13
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    uint16_t number;                    // Integerized multi-digit parameter
    note_t *n;                          // Pointer to tone generator note data

    // Exit player if stopped

    if (player_enable == PLAYER_STOP) {
    1d46:	80 91 79 01 	lds	r24, 0x0179
    1d4a:	88 23       	and	r24, r24
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <player_service+0x28>
    1d4e:	74 c3       	rjmp	.+1768   	; 0x2438 <player_service+0x710>

    number = 0;
    digit = 0;
    ch = 0;

    player_timer++;
    1d50:	80 91 7a 01 	lds	r24, 0x017A
    1d54:	90 91 7b 01 	lds	r25, 0x017B
    1d58:	01 96       	adiw	r24, 0x01	; 1
    1d5a:	90 93 7b 01 	sts	0x017B, r25
    1d5e:	80 93 7a 01 	sts	0x017A, r24
    }

    // <number> and <digit> init not really needed, but prevents compiler
    // from complaining

    number = 0;
    1d62:	cc 24       	eor	r12, r12
    1d64:	dd 24       	eor	r13, r13
    digit = 0;
    1d66:	d0 e0       	ldi	r29, 0x00	; 0
    ch = 0;
    1d68:	c0 e0       	ldi	r28, 0x00	; 0
        }

        // Unknown state - force to STOP

        else {
            state = STATE_STOP;
    1d6a:	a5 e1       	ldi	r26, 0x15	; 21
    1d6c:	ba 2e       	mov	r11, r26
                    bookmark[digit].repeat--;
                }
                player_ptr = bookmark[digit].position;
            }
            // Resume note/command processing at new position
            state = STATE_GET_NOTE;
    1d6e:	ff 24       	eor	r15, r15
    1d70:	f3 94       	inc	r15

        else if (state == STATE_SET_BOOKMARK) {
            // Upon entry to this state, the bookmark # has been fetched
            // and is in <digit>.
            // Set up to fetch repeat count
            state = STATE_GET_NUMBER;
    1d72:	b8 e0       	ldi	r27, 0x08	; 8
    1d74:	eb 2e       	mov	r14, r27
            // After repeat count is fetched, finalize bookmark setting
            next_state = STATE_SET_BOOKMARK_2;
    1d76:	13 e1       	ldi	r17, 0x13	; 19
    1d78:	81 2e       	mov	r8, r17
            if (size_modifier & MOD_DOTTED) {
                whole_note_period += whole_note_period >> 1;
            }
            // One-thrid of beat time if tripleted
            if (size_modifier & MOD_TRIPLET) {
                whole_note_period /= 3;
    1d7a:	03 e0       	ldi	r16, 0x03	; 3
    1d7c:	60 2e       	mov	r6, r16
    1d7e:	71 2c       	mov	r7, r1

        else if (state == STATE_SET_TEMPO) {
            // Upon entry to this state, the beat unit <note_size> has been
            // fetched.  Now fetch beats/min parameter.
            state = STATE_GET_NUMBER;
            next_state = STATE_SET_TEMPO_2;
    1d80:	21 e1       	ldi	r18, 0x11	; 17
    1d82:	92 2e       	mov	r9, r18
                digit += accidental;
                scale[ch] = digit;
                continue;
            }
            else if (is_flat(ch)) {
                accidental = ACCIDENTAL_FLAT;
    1d84:	aa 24       	eor	r10, r10
    1d86:	aa 94       	dec	r10
        else if (state == STATE_SET_KEY) {
            for (digit = 0; digit < 7; digit++) {
                scale[digit] = pgm_read_byte(&c_major_scale[digit]);
            }
            accidental = ACCIDENTAL_SHARP;  // Default: Sharps
            state = STATE_SET_KEY_2;
    1d88:	3f e0       	ldi	r19, 0x0F	; 15
    1d8a:	53 2e       	mov	r5, r19
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <player_service+0x68>
            state = next_state;
            // Get digit character
            digit = next_player_char();
            // Assume '0' for digit if seperator character
            if (is_separator(digit)) {
                digit = 0;
    1d8e:	d0 e0       	ldi	r29, 0x00	; 0
        // RESET state
        // Resets all player variables to their default state.
        // This state is forced as the first state to be executed when
        // a new play string is defined using the start_player() function.

        if ((state == STATE_RESET) ||
    1d90:	80 91 7c 01 	lds	r24, 0x017C
    1d94:	88 23       	and	r24, r24
    1d96:	21 f0       	breq	.+8      	; 0x1da0 <player_service+0x78>
    1d98:	90 91 79 01 	lds	r25, 0x0179
    1d9c:	92 30       	cpi	r25, 0x02	; 2
    1d9e:	a1 f5       	brne	.+104    	; 0x1e08 <player_service+0xe0>
    1da0:	ad e7       	ldi	r26, 0x7D	; 125
    1da2:	b1 e0       	ldi	r27, 0x01	; 1
    // <number> and <digit> init not really needed, but prevents compiler
    // from complaining

    number = 0;
    digit = 0;
    ch = 0;
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
        // a new play string is defined using the start_player() function.

        if ((state == STATE_RESET) ||
            (player_enable == PLAYER_INIT)) {
            for (digit = 0; digit < 7; digit++) {
                scale[digit] = pgm_read_byte(&c_major_scale[digit]);
    1da8:	fc 01       	movw	r30, r24
    1daa:	ef 56       	subi	r30, 0x6F	; 111
    1dac:	fe 4f       	sbci	r31, 0xFE	; 254
    1dae:	e4 91       	lpm	r30, Z
    1db0:	ed 93       	st	X+, r30
    1db2:	01 96       	adiw	r24, 0x01	; 1
        // This state is forced as the first state to be executed when
        // a new play string is defined using the start_player() function.

        if ((state == STATE_RESET) ||
            (player_enable == PLAYER_INIT)) {
            for (digit = 0; digit < 7; digit++) {
    1db4:	87 30       	cpi	r24, 0x07	; 7
    1db6:	91 05       	cpc	r25, r1
    1db8:	b9 f7       	brne	.-18     	; 0x1da8 <player_service+0x80>
                scale[digit] = pgm_read_byte(&c_major_scale[digit]);
            }
            note = 0;
    1dba:	10 92 84 01 	sts	0x0184, r1
            octave = 4;
    1dbe:	84 e0       	ldi	r24, 0x04	; 4
    1dc0:	80 93 85 01 	sts	0x0185, r24
            accidental = ACCIDENTAL_NATURAL;
    1dc4:	10 92 86 01 	sts	0x0186, r1
            transposition = 0;
    1dc8:	10 92 87 01 	sts	0x0187, r1
            note_size = 4;
    1dcc:	80 93 88 01 	sts	0x0188, r24
            size_modifier = 0;
    1dd0:	10 92 89 01 	sts	0x0189, r1
            note_rest_ratio = 7;
    1dd4:	87 e0       	ldi	r24, 0x07	; 7
    1dd6:	80 93 8a 01 	sts	0x018A, r24
            whole_note_period = (uint16_t) (PLAYER_TICKS_PER_SECOND * 60U * (uint32_t) DEFAULT_BEAT / DEFAULT_TEMPO);
    1dda:	82 ee       	ldi	r24, 0xE2	; 226
    1ddc:	94 e0       	ldi	r25, 0x04	; 4
    1dde:	90 93 8c 01 	sts	0x018C, r25
    1de2:	80 93 8b 01 	sts	0x018B, r24
            player_timer = 0;
    1de6:	10 92 7b 01 	sts	0x017B, r1
    1dea:	10 92 7a 01 	sts	0x017A, r1
            beep_period(0xFF, PRESCALE_STOP);
    1dee:	8f ef       	ldi	r24, 0xFF	; 255
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <beep_period>
            beep_mute(0);
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <beep_mute>
            beep_gain(5);
            player_enable = PLAYER_RUN;
    1dfe:	f0 92 79 01 	sts	0x0179, r15
            state = STATE_GET_NOTE;
    1e02:	f0 92 7c 01 	sts	0x017C, r15
    1e06:	47 c2       	rjmp	.+1166   	; 0x2296 <player_service+0x56e>

        // GET NOTE state
        // This is the base state for the player.  Characters are fetched from
        // the play string, and interpreted as notes or commands.

        else if (state == STATE_GET_NOTE) {
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <player_service+0xe6>
    1e0c:	9f c0       	rjmp	.+318    	; 0x1f4c <player_service+0x224>
            ch = next_player_char();
    1e0e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <next_player_char>
    1e12:	c8 2f       	mov	r28, r24
            if (is_separator(ch)) {
    1e14:	80 32       	cpi	r24, 0x20	; 32
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <player_service+0xf2>
    1e18:	bb cf       	rjmp	.-138    	; 0x1d90 <player_service+0x68>
    1e1a:	8a 33       	cpi	r24, 0x3A	; 58
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <player_service+0xf8>
    1e1e:	b8 cf       	rjmp	.-144    	; 0x1d90 <player_service+0x68>
                continue;
            }
            else if (is_note(ch)) {
    1e20:	81 54       	subi	r24, 0x41	; 65
    1e22:	87 30       	cpi	r24, 0x07	; 7
    1e24:	68 f4       	brcc	.+26     	; 0x1e40 <player_service+0x118>
                ch -= 'A';
    1e26:	c8 2f       	mov	r28, r24
                note = scale[ch];
    1e28:	e8 2f       	mov	r30, r24
    1e2a:	ff 27       	eor	r31, r31
    1e2c:	e7 fd       	sbrc	r30, 7
    1e2e:	f0 95       	com	r31
    1e30:	e3 58       	subi	r30, 0x83	; 131
    1e32:	fe 4f       	sbci	r31, 0xFE	; 254
    1e34:	80 81       	ld	r24, Z
    1e36:	80 93 84 01 	sts	0x0184, r24
                accidental = ACCIDENTAL_NATURAL;
    1e3a:	10 92 86 01 	sts	0x0186, r1
    1e3e:	06 c0       	rjmp	.+12     	; 0x1e4c <player_service+0x124>
                state = STATE_GET_MODIFIER;
                next_state = STATE_START_NOTE;
                continue;
            }
            else if (is_rest(ch)) {
    1e40:	c2 35       	cpi	r28, 0x52	; 82
    1e42:	11 f0       	breq	.+4      	; 0x1e48 <player_service+0x120>
    1e44:	cc 32       	cpi	r28, 0x2C	; 44
    1e46:	49 f4       	brne	.+18     	; 0x1e5a <player_service+0x132>
                note = NOTE_IS_REST;
    1e48:	a0 92 84 01 	sts	0x0184, r10
                state = STATE_GET_MODIFIER;
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	80 93 7c 01 	sts	0x017C, r24
                next_state = STATE_START_NOTE;
    1e52:	83 e0       	ldi	r24, 0x03	; 3
    1e54:	80 93 8d 01 	sts	0x018D, r24
                continue;
    1e58:	9b cf       	rjmp	.-202    	; 0x1d90 <player_service+0x68>
            }
            else if (is_repeat_note(ch)) {
    1e5a:	c1 32       	cpi	r28, 0x21	; 33
    1e5c:	11 f4       	brne	.+4      	; 0x1e62 <player_service+0x13a>
                state = STATE_START_NOTE;
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	32 c0       	rjmp	.+100    	; 0x1ec6 <player_service+0x19e>
                continue;
            }
            else if (is_octave_cmd(ch)) {
    1e62:	cf 34       	cpi	r28, 0x4F	; 79
    1e64:	29 f4       	brne	.+10     	; 0x1e70 <player_service+0x148>
                state = STATE_GET_DIGIT;
    1e66:	87 e0       	ldi	r24, 0x07	; 7
    1e68:	80 93 7c 01 	sts	0x017C, r24
                next_state = STATE_SET_OCTAVE;
    1e6c:	8a e0       	ldi	r24, 0x0A	; 10
    1e6e:	f2 cf       	rjmp	.-28     	; 0x1e54 <player_service+0x12c>
                continue;
            }
            else if (is_octave_up(ch)) {
    1e70:	ce 33       	cpi	r28, 0x3E	; 62
    1e72:	39 f4       	brne	.+14     	; 0x1e82 <player_service+0x15a>
                if (octave < (OCTAVES - 1)) {
    1e74:	80 91 85 01 	lds	r24, 0x0185
    1e78:	89 30       	cpi	r24, 0x09	; 9
    1e7a:	0c f0       	brlt	.+2      	; 0x1e7e <player_service+0x156>
    1e7c:	89 cf       	rjmp	.-238    	; 0x1d90 <player_service+0x68>
                    octave++;
    1e7e:	8f 5f       	subi	r24, 0xFF	; 255
    1e80:	08 c0       	rjmp	.+16     	; 0x1e92 <player_service+0x16a>
                }
                continue;
            }
            else if (is_octave_down(ch)) {
    1e82:	cc 33       	cpi	r28, 0x3C	; 60
    1e84:	49 f4       	brne	.+18     	; 0x1e98 <player_service+0x170>
                if (octave > 0) {
    1e86:	80 91 85 01 	lds	r24, 0x0185
    1e8a:	18 16       	cp	r1, r24
    1e8c:	0c f0       	brlt	.+2      	; 0x1e90 <player_service+0x168>
    1e8e:	80 cf       	rjmp	.-256    	; 0x1d90 <player_service+0x68>
                    octave--;
    1e90:	81 50       	subi	r24, 0x01	; 1
    1e92:	80 93 85 01 	sts	0x0185, r24
    1e96:	7c cf       	rjmp	.-264    	; 0x1d90 <player_service+0x68>
                }
                continue;
            }
            else if (is_ratio_cmd(ch)) {
    1e98:	cd 34       	cpi	r28, 0x4D	; 77
    1e9a:	29 f4       	brne	.+10     	; 0x1ea6 <player_service+0x17e>
                state = STATE_GET_DIGIT;
    1e9c:	87 e0       	ldi	r24, 0x07	; 7
    1e9e:	80 93 7c 01 	sts	0x017C, r24
                next_state = STATE_SET_NOTE_RATIO;
    1ea2:	8b e0       	ldi	r24, 0x0B	; 11
    1ea4:	d7 cf       	rjmp	.-82     	; 0x1e54 <player_service+0x12c>
                continue;
            }
            else if (is_volume_cmd(ch)) {
    1ea6:	c6 35       	cpi	r28, 0x56	; 86
    1ea8:	29 f4       	brne	.+10     	; 0x1eb4 <player_service+0x18c>
                state = STATE_GET_DIGIT;
    1eaa:	87 e0       	ldi	r24, 0x07	; 7
    1eac:	80 93 7c 01 	sts	0x017C, r24
                next_state = STATE_SET_VOLUME;
    1eb0:	8c e0       	ldi	r24, 0x0C	; 12
    1eb2:	d0 cf       	rjmp	.-96     	; 0x1e54 <player_service+0x12c>
                continue;
            }
            else if (is_transpose_cmd(ch)) {
    1eb4:	c0 35       	cpi	r28, 0x50	; 80
    1eb6:	21 f4       	brne	.+8      	; 0x1ec0 <player_service+0x198>
                state = STATE_GET_NUMBER;
                next_state = STATE_SET_TRANSPOSITION;
    1eb8:	8d e0       	ldi	r24, 0x0D	; 13
    1eba:	80 93 8d 01 	sts	0x018D, r24
    1ebe:	b9 c2       	rjmp	.+1394   	; 0x2432 <player_service+0x70a>
            }
            else if (is_key_cmd(ch)) {
    1ec0:	cb 34       	cpi	r28, 0x4B	; 75
    1ec2:	21 f4       	brne	.+8      	; 0x1ecc <player_service+0x1a4>
                state = STATE_SET_KEY;
    1ec4:	8e e0       	ldi	r24, 0x0E	; 14
    1ec6:	80 93 7c 01 	sts	0x017C, r24
                continue;
    1eca:	62 cf       	rjmp	.-316    	; 0x1d90 <player_service+0x68>
            }
            else if (is_tempo_cmd(ch)) {
    1ecc:	c4 35       	cpi	r28, 0x54	; 84
    1ece:	f1 f4       	brne	.+60     	; 0x1f0c <player_service+0x1e4>
                // Assume quarter note gets 1 beat
                note_size = DEFAULT_BEAT;
    1ed0:	84 e0       	ldi	r24, 0x04	; 4
    1ed2:	80 93 88 01 	sts	0x0188, r24
                size_modifier = 0;
    1ed6:	10 92 89 01 	sts	0x0189, r1
                ch = next_player_char();
    1eda:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <next_player_char>
    1ede:	c8 2f       	mov	r28, r24
                // Use default note size if not specified
                if (is_separator(ch) || is_digit(ch)) {
    1ee0:	80 32       	cpi	r24, 0x20	; 32
    1ee2:	29 f0       	breq	.+10     	; 0x1eee <player_service+0x1c6>
    1ee4:	8a 33       	cpi	r24, 0x3A	; 58
    1ee6:	19 f0       	breq	.+6      	; 0x1eee <player_service+0x1c6>
    1ee8:	80 53       	subi	r24, 0x30	; 48
    1eea:	8a 30       	cpi	r24, 0x0A	; 10
    1eec:	50 f4       	brcc	.+20     	; 0x1f02 <player_service+0x1da>
                    player_ptr--;
    1eee:	80 91 58 01 	lds	r24, 0x0158
    1ef2:	90 91 59 01 	lds	r25, 0x0159
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	90 93 59 01 	sts	0x0159, r25
    1efc:	80 93 58 01 	sts	0x0158, r24
    1f00:	00 c2       	rjmp	.+1024   	; 0x2302 <player_service+0x5da>
                    state = STATE_GET_NUMBER;
                    next_state = STATE_SET_TEMPO_2;
                }
                // Get a note size
                else {
                    state = STATE_GET_MODIFIER;
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	80 93 7c 01 	sts	0x017C, r24
                    next_state = STATE_SET_TEMPO;
    1f08:	80 e1       	ldi	r24, 0x10	; 16
    1f0a:	a4 cf       	rjmp	.-184    	; 0x1e54 <player_service+0x12c>
                }
                continue;
            }
            else if (is_bookmark(ch)) {
    1f0c:	cb 35       	cpi	r28, 0x5B	; 91
    1f0e:	29 f4       	brne	.+10     	; 0x1f1a <player_service+0x1f2>
                state = STATE_GET_DIGIT;
    1f10:	87 e0       	ldi	r24, 0x07	; 7
    1f12:	80 93 7c 01 	sts	0x017C, r24
                next_state = STATE_SET_BOOKMARK;
    1f16:	82 e1       	ldi	r24, 0x12	; 18
    1f18:	9d cf       	rjmp	.-198    	; 0x1e54 <player_service+0x12c>
                continue;
            }
            else if (is_goto_mark(ch)) {
    1f1a:	cd 35       	cpi	r28, 0x5D	; 93
    1f1c:	29 f4       	brne	.+10     	; 0x1f28 <player_service+0x200>
                state = STATE_GET_DIGIT;
    1f1e:	87 e0       	ldi	r24, 0x07	; 7
    1f20:	80 93 7c 01 	sts	0x017C, r24
                next_state = STATE_GOTO_BOOKMARK;
    1f24:	84 e1       	ldi	r24, 0x14	; 20
    1f26:	96 cf       	rjmp	.-212    	; 0x1e54 <player_service+0x12c>
                continue;
            }
            else if (is_reset_cmd(ch)) {
    1f28:	ca 32       	cpi	r28, 0x2A	; 42
    1f2a:	19 f4       	brne	.+6      	; 0x1f32 <player_service+0x20a>
                state = STATE_RESET;
    1f2c:	10 92 7c 01 	sts	0x017C, r1
                continue;
    1f30:	2f cf       	rjmp	.-418    	; 0x1d90 <player_service+0x68>
            }
            else if (!ch) {
    1f32:	cc 23       	and	r28, r28
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <player_service+0x210>
    1f36:	7d c2       	rjmp	.+1274   	; 0x2432 <player_service+0x70a>
                player_ptr--;
    1f38:	80 91 58 01 	lds	r24, 0x0158
    1f3c:	90 91 59 01 	lds	r25, 0x0159
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	90 93 59 01 	sts	0x0159, r25
    1f46:	80 93 58 01 	sts	0x0158, r24
    1f4a:	73 c2       	rjmp	.+1254   	; 0x2432 <player_service+0x70a>
        // GET MODIFIER state
        // This state is entered after a note or rest value has been parsed.
        // Note time and pitch modifiers are fetched and processed in this
        // state.

        else if (state == STATE_GET_MODIFIER) {
    1f4c:	82 30       	cpi	r24, 0x02	; 2
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <player_service+0x22a>
    1f50:	57 c0       	rjmp	.+174    	; 0x2000 <player_service+0x2d8>
            ch = next_player_char();
    1f52:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <next_player_char>
    1f56:	c8 2f       	mov	r28, r24
            if (is_separator(ch)) {
    1f58:	80 32       	cpi	r24, 0x20	; 32
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <player_service+0x236>
    1f5c:	5f c1       	rjmp	.+702    	; 0x221c <player_service+0x4f4>
    1f5e:	8a 33       	cpi	r24, 0x3A	; 58
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <player_service+0x23c>
    1f62:	5c c1       	rjmp	.+696    	; 0x221c <player_service+0x4f4>
                state = next_state;
                continue;
            }
            else if (is_octave_mod(ch)) {
    1f64:	80 53       	subi	r24, 0x30	; 48
    1f66:	8a 30       	cpi	r24, 0x0A	; 10
    1f68:	08 f4       	brcc	.+2      	; 0x1f6c <player_service+0x244>
    1f6a:	93 cf       	rjmp	.-218    	; 0x1e92 <player_service+0x16a>
                octave = ch - '0';
                continue;
            }
            else if (is_dotted(ch)) {
    1f6c:	ce 32       	cpi	r28, 0x2E	; 46
    1f6e:	21 f4       	brne	.+8      	; 0x1f78 <player_service+0x250>
                size_modifier |= MOD_DOTTED;
    1f70:	80 91 89 01 	lds	r24, 0x0189
    1f74:	81 60       	ori	r24, 0x01	; 1
    1f76:	13 c0       	rjmp	.+38     	; 0x1f9e <player_service+0x276>
                continue;
            }
            else if (is_triplet(ch)) {
    1f78:	cf 32       	cpi	r28, 0x2F	; 47
    1f7a:	21 f4       	brne	.+8      	; 0x1f84 <player_service+0x25c>
                size_modifier |= MOD_TRIPLET;
    1f7c:	80 91 89 01 	lds	r24, 0x0189
    1f80:	82 60       	ori	r24, 0x02	; 2
    1f82:	0d c0       	rjmp	.+26     	; 0x1f9e <player_service+0x276>
                continue;
            }
            else if (is_tied(ch)) {
    1f84:	cc 37       	cpi	r28, 0x7C	; 124
    1f86:	11 f0       	breq	.+4      	; 0x1f8c <player_service+0x264>
    1f88:	cc 32       	cpi	r28, 0x2C	; 44
    1f8a:	21 f4       	brne	.+8      	; 0x1f94 <player_service+0x26c>
                size_modifier |= MOD_TIED;
    1f8c:	80 91 89 01 	lds	r24, 0x0189
    1f90:	84 60       	ori	r24, 0x04	; 4
    1f92:	05 c0       	rjmp	.+10     	; 0x1f9e <player_service+0x276>
                continue;
            }
            else if (is_staccato(ch)) {
    1f94:	ce 35       	cpi	r28, 0x5E	; 94
    1f96:	31 f4       	brne	.+12     	; 0x1fa4 <player_service+0x27c>
                size_modifier |= MOD_STACCATO;
    1f98:	80 91 89 01 	lds	r24, 0x0189
    1f9c:	88 60       	ori	r24, 0x08	; 8
    1f9e:	80 93 89 01 	sts	0x0189, r24
                continue;
    1fa2:	f6 ce       	rjmp	.-532    	; 0x1d90 <player_service+0x68>
            }
            else if (is_flat(ch)) {
    1fa4:	cd 32       	cpi	r28, 0x2D	; 45
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <player_service+0x282>
    1fa8:	93 c1       	rjmp	.+806    	; 0x22d0 <player_service+0x5a8>
                accidental = ACCIDENTAL_FLAT;
                continue;
            }
            else if (is_natural(ch)) {
    1faa:	ce 34       	cpi	r28, 0x4E	; 78
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <player_service+0x288>
    1fae:	97 c1       	rjmp	.+814    	; 0x22de <player_service+0x5b6>
    1fb0:	cd 33       	cpi	r28, 0x3D	; 61
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <player_service+0x28e>
    1fb4:	94 c1       	rjmp	.+808    	; 0x22de <player_service+0x5b6>
                accidental = ACCIDENTAL_NATURAL;
                continue;
            }
            else if (is_sharp(ch)) {
    1fb6:	cb 32       	cpi	r28, 0x2B	; 43
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <player_service+0x294>
    1fba:	98 c1       	rjmp	.+816    	; 0x22ec <player_service+0x5c4>
    1fbc:	c3 32       	cpi	r28, 0x23	; 35
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <player_service+0x29a>
    1fc0:	95 c1       	rjmp	.+810    	; 0x22ec <player_service+0x5c4>
                accidental = ACCIDENTAL_SHARP;
                continue;
            }
            else if (is_whole(ch)) {
    1fc2:	c7 35       	cpi	r28, 0x57	; 87
    1fc4:	19 f4       	brne	.+6      	; 0x1fcc <player_service+0x2a4>
                note_size = NOTE_WHOLE;
    1fc6:	f0 92 88 01 	sts	0x0188, r15
    1fca:	17 c0       	rjmp	.+46     	; 0x1ffa <player_service+0x2d2>
                size_modifier = 0;
                continue;
            }
            else if (is_half(ch)) {
    1fcc:	c8 34       	cpi	r28, 0x48	; 72
    1fce:	11 f4       	brne	.+4      	; 0x1fd4 <player_service+0x2ac>
                note_size = NOTE_HALF;
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	11 c0       	rjmp	.+34     	; 0x1ff6 <player_service+0x2ce>
                size_modifier = 0;
                continue;
            }
            else if (is_quarter(ch)) {
    1fd4:	c1 35       	cpi	r28, 0x51	; 81
    1fd6:	11 f4       	brne	.+4      	; 0x1fdc <player_service+0x2b4>
                note_size = NOTE_QUARTER;
    1fd8:	84 e0       	ldi	r24, 0x04	; 4
    1fda:	0d c0       	rjmp	.+26     	; 0x1ff6 <player_service+0x2ce>
                size_modifier = 0;
                continue;
            }
            else if (is_8th(ch)) {
    1fdc:	c9 34       	cpi	r28, 0x49	; 73
    1fde:	19 f4       	brne	.+6      	; 0x1fe6 <player_service+0x2be>
                note_size = NOTE_8TH;
    1fe0:	e0 92 88 01 	sts	0x0188, r14
    1fe4:	0a c0       	rjmp	.+20     	; 0x1ffa <player_service+0x2d2>
                size_modifier = 0;
                continue;
            }
            else if (is_16th(ch)) {
    1fe6:	c3 35       	cpi	r28, 0x53	; 83
    1fe8:	11 f4       	brne	.+4      	; 0x1fee <player_service+0x2c6>
                note_size = NOTE_16TH;
    1fea:	80 e1       	ldi	r24, 0x10	; 16
    1fec:	04 c0       	rjmp	.+8      	; 0x1ff6 <player_service+0x2ce>
                size_modifier = 0;
                continue;
            }
            else if (is_32nd(ch)) {
    1fee:	c9 35       	cpi	r28, 0x59	; 89
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <player_service+0x2cc>
    1ff2:	0b c1       	rjmp	.+534    	; 0x220a <player_service+0x4e2>
                note_size = NOTE_32ND;
    1ff4:	80 e2       	ldi	r24, 0x20	; 32
    1ff6:	80 93 88 01 	sts	0x0188, r24
                size_modifier = 0;
    1ffa:	10 92 89 01 	sts	0x0189, r1
                continue;
    1ffe:	c8 ce       	rjmp	.-624    	; 0x1d90 <player_service+0x68>
        // Entered following the completion of a note or rest specification.
        // Calculates note frequency and timing parameters and configures
        // beeper (unless note is a rest).  Advances to WAIT NOTE or WAIT REST
        // state as appropriate.

        else if (state == STATE_START_NOTE) {
    2000:	83 30       	cpi	r24, 0x03	; 3
    2002:	09 f0       	breq	.+2      	; 0x2006 <player_service+0x2de>
    2004:	86 c0       	rjmp	.+268    	; 0x2112 <player_service+0x3ea>
            rest_period = whole_note_period;
    2006:	40 91 8b 01 	lds	r20, 0x018B
    200a:	50 91 8c 01 	lds	r21, 0x018C
    200e:	50 93 8f 01 	sts	0x018F, r21
    2012:	40 93 8e 01 	sts	0x018E, r20
            // If dotted flag set, note period is 50% longer
            if (size_modifier & MOD_DOTTED) {
    2016:	20 91 89 01 	lds	r18, 0x0189
    201a:	20 ff       	sbrs	r18, 0
    201c:	09 c0       	rjmp	.+18     	; 0x2030 <player_service+0x308>
                rest_period += rest_period >> 1;
    201e:	ca 01       	movw	r24, r20
    2020:	96 95       	lsr	r25
    2022:	87 95       	ror	r24
    2024:	84 0f       	add	r24, r20
    2026:	95 1f       	adc	r25, r21
    2028:	90 93 8f 01 	sts	0x018F, r25
    202c:	80 93 8e 01 	sts	0x018E, r24
            }
            // If triplet flag set, note period is divided by 3
            if (size_modifier & MOD_TRIPLET) {
    2030:	21 ff       	sbrs	r18, 1
    2032:	0b c0       	rjmp	.+22     	; 0x204a <player_service+0x322>
                rest_period /= 3;
    2034:	80 91 8e 01 	lds	r24, 0x018E
    2038:	90 91 8f 01 	lds	r25, 0x018F
    203c:	b3 01       	movw	r22, r6
    203e:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__udivmodhi4>
    2042:	70 93 8f 01 	sts	0x018F, r23
    2046:	60 93 8e 01 	sts	0x018E, r22
            }
            // Divide base (whole note) period by note size
            // e.g. if quarter note, divide by 4
            rest_period /= note_size;
    204a:	60 91 88 01 	lds	r22, 0x0188
    204e:	80 91 8e 01 	lds	r24, 0x018E
    2052:	90 91 8f 01 	lds	r25, 0x018F
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__udivmodhi4>
            // with a fixed dividend of 8
            // e.g. if note_rest_ratio = 5, play note for 5/8 of note time and
            // rest for 3/8 of note time
            // If note is tied or staccato, ignore note/rest ratio setting and
            // force it to 8 (tied) or 2 (staccato).
            if (size_modifier & MOD_TIED) {
    205c:	22 fd       	sbrc	r18, 2
    205e:	05 c0       	rjmp	.+10     	; 0x206a <player_service+0x342>
                digit = 8;
            }
            else if (size_modifier & MOD_STACCATO) {
    2060:	23 fd       	sbrc	r18, 3
    2062:	05 c0       	rjmp	.+10     	; 0x206e <player_service+0x346>
                digit = 2;
            }
            else {
                digit = note_rest_ratio;
    2064:	20 91 8a 01 	lds	r18, 0x018A
    2068:	03 c0       	rjmp	.+6      	; 0x2070 <player_service+0x348>
            // e.g. if note_rest_ratio = 5, play note for 5/8 of note time and
            // rest for 3/8 of note time
            // If note is tied or staccato, ignore note/rest ratio setting and
            // force it to 8 (tied) or 2 (staccato).
            if (size_modifier & MOD_TIED) {
                digit = 8;
    206a:	28 e0       	ldi	r18, 0x08	; 8
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <player_service+0x348>
            }
            else if (size_modifier & MOD_STACCATO) {
                digit = 2;
    206e:	22 e0       	ldi	r18, 0x02	; 2
            }
            else {
                digit = note_rest_ratio;
            }
            note_period = (rest_period * digit) >> 3;
    2070:	33 27       	eor	r19, r19
    2072:	27 fd       	sbrc	r18, 7
    2074:	30 95       	com	r19
    2076:	26 9f       	mul	r18, r22
    2078:	c0 01       	movw	r24, r0
    207a:	27 9f       	mul	r18, r23
    207c:	90 0d       	add	r25, r0
    207e:	36 9f       	mul	r19, r22
    2080:	90 0d       	add	r25, r0
    2082:	11 24       	eor	r1, r1
    2084:	e3 e0       	ldi	r30, 0x03	; 3
    2086:	96 95       	lsr	r25
    2088:	87 95       	ror	r24
    208a:	ea 95       	dec	r30
    208c:	e1 f7       	brne	.-8      	; 0x2086 <player_service+0x35e>
    208e:	90 93 91 01 	sts	0x0191, r25
    2092:	80 93 90 01 	sts	0x0190, r24
            rest_period -= note_period;
    2096:	68 1b       	sub	r22, r24
    2098:	79 0b       	sbc	r23, r25
    209a:	70 93 8f 01 	sts	0x018F, r23
    209e:	60 93 8e 01 	sts	0x018E, r22
            // Adjust note tone to be played by accidental and transposition factors
            // <digit> is used as a temporary to hold the adjusted note tone
            // <ch> is temporarily used to hold adjusted octave
            digit = note + accidental + transposition;
    20a2:	20 91 86 01 	lds	r18, 0x0186
    20a6:	80 91 84 01 	lds	r24, 0x0184
    20aa:	28 0f       	add	r18, r24
    20ac:	80 91 87 01 	lds	r24, 0x0187
    20b0:	28 0f       	add	r18, r24
            ch = octave;
    20b2:	c0 91 85 01 	lds	r28, 0x0185
            // Check for note over/underflow
            if (digit < 0) {
    20b6:	27 ff       	sbrs	r18, 7
    20b8:	03 c0       	rjmp	.+6      	; 0x20c0 <player_service+0x398>
                digit += NOTES_PER_OCTAVE;
    20ba:	24 5f       	subi	r18, 0xF4	; 244
                ch--;
    20bc:	c1 50       	subi	r28, 0x01	; 1
    20be:	04 c0       	rjmp	.+8      	; 0x20c8 <player_service+0x3a0>
            }
            else if (digit >= NOTES_PER_OCTAVE) {
    20c0:	2c 30       	cpi	r18, 0x0C	; 12
    20c2:	14 f0       	brlt	.+4      	; 0x20c8 <player_service+0x3a0>
                digit -= NOTES_PER_OCTAVE;
    20c4:	2c 50       	subi	r18, 0x0C	; 12
                ch++;
    20c6:	cf 5f       	subi	r28, 0xFF	; 255
    20c8:	ca 30       	cpi	r28, 0x0A	; 10
    20ca:	0c f0       	brlt	.+2      	; 0x20ce <player_service+0x3a6>
    20cc:	c9 e0       	ldi	r28, 0x09	; 9
    20ce:	c7 fd       	sbrc	r28, 7
    20d0:	c0 e0       	ldi	r28, 0x00	; 0
            }
            else if (ch >= OCTAVES) {
                ch = OCTAVES - 1;
            }
            // Fetch timer period and prescaler from note table
            n = (note_t *) &note_table[ch][digit];
    20d2:	44 e2       	ldi	r20, 0x24	; 36
    20d4:	c4 02       	muls	r28, r20
    20d6:	a0 01       	movw	r20, r0
    20d8:	11 24       	eor	r1, r1
    20da:	33 27       	eor	r19, r19
    20dc:	27 fd       	sbrc	r18, 7
    20de:	30 95       	com	r19
    20e0:	c9 01       	movw	r24, r18
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	82 0f       	add	r24, r18
    20e8:	93 1f       	adc	r25, r19
    20ea:	48 0f       	add	r20, r24
    20ec:	59 1f       	adc	r21, r25
    20ee:	48 56       	subi	r20, 0x68	; 104
    20f0:	5e 4f       	sbci	r21, 0xFE	; 254
            number = pgm_read_word(&n->period);
    20f2:	fa 01       	movw	r30, r20
    20f4:	05 91       	lpm	r16, Z+
    20f6:	14 91       	lpm	r17, Z
            digit = pgm_read_byte(&n->prescale);
    20f8:	4e 5f       	subi	r20, 0xFE	; 254
    20fa:	5f 4f       	sbci	r21, 0xFF	; 255
    20fc:	fa 01       	movw	r30, r20
    20fe:	d4 91       	lpm	r29, Z
            // Start playing note and advance to wait state
            beep_period(number, digit);
    2100:	c8 01       	movw	r24, r16
    2102:	6d 2f       	mov	r22, r29
    2104:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <beep_period>
            state = STATE_WAIT_NOTE;
    2108:	84 e0       	ldi	r24, 0x04	; 4
    210a:	80 93 7c 01 	sts	0x017C, r24
            else if (ch >= OCTAVES) {
                ch = OCTAVES - 1;
            }
            // Fetch timer period and prescaler from note table
            n = (note_t *) &note_table[ch][digit];
            number = pgm_read_word(&n->period);
    210e:	68 01       	movw	r12, r16
            digit = pgm_read_byte(&n->prescale);
            // Start playing note and advance to wait state
            beep_period(number, digit);
            state = STATE_WAIT_NOTE;
            continue;
    2110:	3f ce       	rjmp	.-898    	; 0x1d90 <player_service+0x68>
        // WAIT NOTE state
        // Entered following the initiation of note playback (beeper
        // turned on).  Idles player until <note_period> ticks have
        // elapsed.

        else if (state == STATE_WAIT_NOTE) {
    2112:	84 30       	cpi	r24, 0x04	; 4
    2114:	d9 f4       	brne	.+54     	; 0x214c <player_service+0x424>
            // Wait until note play period has elapsed
            if (player_timer < note_period) {
    2116:	20 91 7a 01 	lds	r18, 0x017A
    211a:	30 91 7b 01 	lds	r19, 0x017B
    211e:	80 91 90 01 	lds	r24, 0x0190
    2122:	90 91 91 01 	lds	r25, 0x0191
    2126:	28 17       	cp	r18, r24
    2128:	39 07       	cpc	r19, r25
    212a:	08 f4       	brcc	.+2      	; 0x212e <player_service+0x406>
    212c:	85 c1       	rjmp	.+778    	; 0x2438 <player_service+0x710>
            // Reset tick counter
            // Subtract time from it instead of zeroing it in case some ticks
            // were "missed" due to insufficiently fast polling.  Doing this
            // ensures that tempo is maintained, even if note/rest timing is
            // less than precise.
            player_timer -= note_period;
    212e:	28 1b       	sub	r18, r24
    2130:	39 0b       	sbc	r19, r25
    2132:	30 93 7b 01 	sts	0x017B, r19
    2136:	20 93 7a 01 	sts	0x017A, r18
            // If the note has a rest period, advance to the rest state.
            // Otherwise, skip rest state and resume note/command scanning.
            if (rest_period) {
    213a:	80 91 8e 01 	lds	r24, 0x018E
    213e:	90 91 8f 01 	lds	r25, 0x018F
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	09 f4       	brne	.+2      	; 0x2148 <player_service+0x420>
    2146:	6b c1       	rjmp	.+726    	; 0x241e <player_service+0x6f6>
                state = STATE_START_REST;
    2148:	85 e0       	ldi	r24, 0x05	; 5
    214a:	bd ce       	rjmp	.-646    	; 0x1ec6 <player_service+0x19e>

        // START REST state
        // Entered following note playback or when a rest is requested.
        // Silences beeper output and sets up for rest delay.

        if (state == STATE_START_REST) {
    214c:	85 30       	cpi	r24, 0x05	; 5
    214e:	39 f4       	brne	.+14     	; 0x215e <player_service+0x436>
            // Start of note rest period
            // Turn off beeper timer to silence it
            beep_period(0xFF, PRESCALE_STOP);
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <beep_period>
            // Advance to wait-for-rest state
            state = STATE_WAIT_REST;
    215a:	86 e0       	ldi	r24, 0x06	; 6
    215c:	b4 ce       	rjmp	.-664    	; 0x1ec6 <player_service+0x19e>
        // Idles player until <rest_period> ticks have elapsed.
        // Usually entered when a rest ('R') is specified, or
        // following note playback to implement the silence period
        // between notes as specified by the <note_rest_ratio>.

        else if (state == STATE_WAIT_REST) {
    215e:	86 30       	cpi	r24, 0x06	; 6
    2160:	99 f4       	brne	.+38     	; 0x2188 <player_service+0x460>
            // Wait until rest period has elapsed
            if (player_timer < rest_period) {
    2162:	20 91 7a 01 	lds	r18, 0x017A
    2166:	30 91 7b 01 	lds	r19, 0x017B
    216a:	80 91 8e 01 	lds	r24, 0x018E
    216e:	90 91 8f 01 	lds	r25, 0x018F
    2172:	28 17       	cp	r18, r24
    2174:	39 07       	cpc	r19, r25
    2176:	08 f4       	brcc	.+2      	; 0x217a <player_service+0x452>
    2178:	5f c1       	rjmp	.+702    	; 0x2438 <player_service+0x710>
            // Reset tick counter
            // Subtract time from it instead of zeroing it in case some ticks
            // were "missed" due to insufficiently fast polling.  Doing this
            // ensures that tempo is maintained, even if note/rest timing is
            // less than precise.
            player_timer -= rest_period;
    217a:	28 1b       	sub	r18, r24
    217c:	39 0b       	sbc	r19, r25
    217e:	30 93 7b 01 	sts	0x017B, r19
    2182:	20 93 7a 01 	sts	0x017A, r18
    2186:	4b c1       	rjmp	.+662    	; 0x241e <player_service+0x6f6>
        // GET DIGIT state
        // Fetches a single ASCII decimal character and converts it to
        // an integer representation in <digit>.  Seperator characters
        // are interpreted as '0'.

        else if (state == STATE_GET_DIGIT) {
    2188:	87 30       	cpi	r24, 0x07	; 7
    218a:	99 f4       	brne	.+38     	; 0x21b2 <player_service+0x48a>
            // Assume no errors: Advance to state that will utilize digit
            state = next_state;
    218c:	80 91 8d 01 	lds	r24, 0x018D
    2190:	80 93 7c 01 	sts	0x017C, r24
            // Get digit character
            digit = next_player_char();
    2194:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <next_player_char>
    2198:	d8 2f       	mov	r29, r24
            // Assume '0' for digit if seperator character
            if (is_separator(digit)) {
    219a:	80 32       	cpi	r24, 0x20	; 32
    219c:	09 f4       	brne	.+2      	; 0x21a0 <player_service+0x478>
    219e:	f7 cd       	rjmp	.-1042   	; 0x1d8e <player_service+0x66>
    21a0:	8a 33       	cpi	r24, 0x3A	; 58
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <player_service+0x47e>
    21a4:	f4 cd       	rjmp	.-1048   	; 0x1d8e <player_service+0x66>
                digit = 0;
            }
            // If digit, convert it to integer
            else if (is_digit(digit)) {
    21a6:	80 53       	subi	r24, 0x30	; 48
    21a8:	8a 30       	cpi	r24, 0x0A	; 10
    21aa:	08 f0       	brcs	.+2      	; 0x21ae <player_service+0x486>
    21ac:	42 c1       	rjmp	.+644    	; 0x2432 <player_service+0x70a>
                digit -= '0';
    21ae:	d8 2f       	mov	r29, r24
    21b0:	ef cd       	rjmp	.-1058   	; 0x1d90 <player_service+0x68>
        // GET NUMBER state
        // Setup to fetch a multi-digit ASCII decimal value and convert it
        // to an integer representation.  Skips over any optional seperator
        // character.

        else if (state == STATE_GET_NUMBER) {
    21b2:	88 30       	cpi	r24, 0x08	; 8
    21b4:	81 f4       	brne	.+32     	; 0x21d6 <player_service+0x4ae>
            // Clear number accumulator
            number = 0;
            // Skip past (optional) data separator
            ch = next_player_char();
    21b6:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <next_player_char>
    21ba:	c8 2f       	mov	r28, r24
            if (is_separator(ch)) {
    21bc:	80 32       	cpi	r24, 0x20	; 32
    21be:	11 f0       	breq	.+4      	; 0x21c4 <player_service+0x49c>
    21c0:	8a 33       	cpi	r24, 0x3A	; 58
    21c2:	19 f4       	brne	.+6      	; 0x21ca <player_service+0x4a2>
                ch = next_player_char();
    21c4:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <next_player_char>
    21c8:	c8 2f       	mov	r28, r24
            }
            // Advance to state that will decode the multi-digit number
            state = STATE_GET_NUMBER_2;
    21ca:	89 e0       	ldi	r24, 0x09	; 9
    21cc:	80 93 7c 01 	sts	0x017C, r24
        // to an integer representation.  Skips over any optional seperator
        // character.

        else if (state == STATE_GET_NUMBER) {
            // Clear number accumulator
            number = 0;
    21d0:	cc 24       	eor	r12, r12
    21d2:	dd 24       	eor	r13, r13
            if (is_separator(ch)) {
                ch = next_player_char();
            }
            // Advance to state that will decode the multi-digit number
            state = STATE_GET_NUMBER_2;
            continue;
    21d4:	dd cd       	rjmp	.-1094   	; 0x1d90 <player_service+0x68>
        // Entered following execution of the GET NUMBER state
        // Fetches ASCII decimal digits and decimal-shifts them into the
        // <number> accumulator.  Exit from this state occurs when a
        // non-digit character is encountered.

        else if (state == STATE_GET_NUMBER_2) {
    21d6:	89 30       	cpi	r24, 0x09	; 9
    21d8:	21 f5       	brne	.+72     	; 0x2222 <player_service+0x4fa>
    21da:	13 c0       	rjmp	.+38     	; 0x2202 <player_service+0x4da>
            while (is_digit(ch)) {
                ch -= '0';
                number = (number * 10) + ch;
    21dc:	c6 01       	movw	r24, r12
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	43 e0       	ldi	r20, 0x03	; 3
    21e4:	cc 0c       	add	r12, r12
    21e6:	dd 1c       	adc	r13, r13
    21e8:	4a 95       	dec	r20
    21ea:	e1 f7       	brne	.-8      	; 0x21e4 <player_service+0x4bc>
    21ec:	8c 0d       	add	r24, r12
    21ee:	9d 1d       	adc	r25, r13
    21f0:	c2 2e       	mov	r12, r18
    21f2:	dd 24       	eor	r13, r13
    21f4:	c7 fc       	sbrc	r12, 7
    21f6:	d0 94       	com	r13
    21f8:	c8 0e       	add	r12, r24
    21fa:	d9 1e       	adc	r13, r25
                ch = next_player_char();
    21fc:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <next_player_char>
    2200:	c8 2f       	mov	r28, r24
        // Fetches ASCII decimal digits and decimal-shifts them into the
        // <number> accumulator.  Exit from this state occurs when a
        // non-digit character is encountered.

        else if (state == STATE_GET_NUMBER_2) {
            while (is_digit(ch)) {
    2202:	2c 2f       	mov	r18, r28
    2204:	20 53       	subi	r18, 0x30	; 48
    2206:	2a 30       	cpi	r18, 0x0A	; 10
    2208:	48 f3       	brcs	.-46     	; 0x21dc <player_service+0x4b4>
                ch = next_player_char();
            }
            // If not a valid digit, end of number has been reached.
            // Back up pointer so non-digit char is processed as a note/command.
            // Advance to state that will utilize numeric parameter
            player_ptr--;
    220a:	80 91 58 01 	lds	r24, 0x0158
    220e:	90 91 59 01 	lds	r25, 0x0159
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	90 93 59 01 	sts	0x0159, r25
    2218:	80 93 58 01 	sts	0x0158, r24
            state = next_state;
    221c:	80 91 8d 01 	lds	r24, 0x018D
    2220:	52 ce       	rjmp	.-860    	; 0x1ec6 <player_service+0x19e>

        // SET OCTAVE state
        // Entered after the octave value (single digit #) has been fetched.
        // Sets <octave> to the value specified.

        else if (state == STATE_SET_OCTAVE) {
    2222:	8a 30       	cpi	r24, 0x0A	; 10
    2224:	19 f4       	brne	.+6      	; 0x222c <player_service+0x504>
            octave = digit;
    2226:	d0 93 85 01 	sts	0x0185, r29
    222a:	f9 c0       	rjmp	.+498    	; 0x241e <player_service+0x6f6>

        // SET NOTE RATIO state
        // Entered after the note ratio (single-digit #) has been fetched.
        // Sets <note_rest_ratio> to the value specified.

        else if (state == STATE_SET_NOTE_RATIO) {
    222c:	8b 30       	cpi	r24, 0x0B	; 11
    222e:	31 f4       	brne	.+12     	; 0x223c <player_service+0x514>
    2230:	d9 30       	cpi	r29, 0x09	; 9
    2232:	0c f0       	brlt	.+2      	; 0x2236 <player_service+0x50e>
    2234:	d8 e0       	ldi	r29, 0x08	; 8
            // Bound ratio to maximum
            if (digit > 8) {
                digit = 8;
            }
            // Set note/rest ratio and resume note/command scanning
            note_rest_ratio = digit;
    2236:	d0 93 8a 01 	sts	0x018A, r29
    223a:	f1 c0       	rjmp	.+482    	; 0x241e <player_service+0x6f6>

        // SET VOLUME state
        // Entered after the volume level (single-digit #) has been fetched.
        // Sets the programmable gain amp to the gain value (0-7) specified.

        else if (state == STATE_SET_VOLUME) {
    223c:	8c 30       	cpi	r24, 0x0C	; 12
    223e:	61 f4       	brne	.+24     	; 0x2258 <player_service+0x530>
            // If specified volume is 0, mute speaker
            if (digit == 0) {
    2240:	dd 23       	and	r29, r29
    2242:	11 f4       	brne	.+4      	; 0x2248 <player_service+0x520>
                beep_mute(1);
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	05 c0       	rjmp	.+10     	; 0x2252 <player_service+0x52a>
            }
            // Volume > 0, set PGA to selected volume
            else {
                digit--;                // 1..8 -> 0..7
    2248:	d1 50       	subi	r29, 0x01	; 1
    224a:	d8 30       	cpi	r29, 0x08	; 8
    224c:	0c f0       	brlt	.+2      	; 0x2250 <player_service+0x528>
    224e:	d7 e0       	ldi	r29, 0x07	; 7
                if (digit > 7) {        // Bound to maximum setting
                    digit = 7;
                }
                beep_gain(digit);       // Set volume
                beep_mute(0);           // Un-mute speaker
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <beep_mute>
    2256:	e3 c0       	rjmp	.+454    	; 0x241e <player_service+0x6f6>
        // SET TRANSPOSITION state
        // Entered after the transposition factor (multi-digit #) has been
        // fetched.  Sets the note transposition factor to the value
        // specified.

        else if (state == STATE_SET_TRANSPOSITION) {
    2258:	8d 30       	cpi	r24, 0x0D	; 13
    225a:	51 f4       	brne	.+20     	; 0x2270 <player_service+0x548>
            // Set new transposition value if it is within a one-octave range.
            // Otherwise, force it to 0
            if (number < NOTES_PER_OCTAVE) {
    225c:	fc e0       	ldi	r31, 0x0C	; 12
    225e:	cf 16       	cp	r12, r31
    2260:	d1 04       	cpc	r13, r1
    2262:	18 f4       	brcc	.+6      	; 0x226a <player_service+0x542>
                transposition = number;
    2264:	c0 92 87 01 	sts	0x0187, r12
    2268:	da c0       	rjmp	.+436    	; 0x241e <player_service+0x6f6>
            }
            else {
                transposition = 0;
    226a:	10 92 87 01 	sts	0x0187, r1
    226e:	d7 c0       	rjmp	.+430    	; 0x241e <player_service+0x6f6>
            continue;
        }

        // SET KEY state

        else if (state == STATE_SET_KEY) {
    2270:	8e 30       	cpi	r24, 0x0E	; 14
    2272:	99 f4       	brne	.+38     	; 0x229a <player_service+0x572>
    2274:	ad e7       	ldi	r26, 0x7D	; 125
    2276:	b1 e0       	ldi	r27, 0x01	; 1
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
            for (digit = 0; digit < 7; digit++) {
                scale[digit] = pgm_read_byte(&c_major_scale[digit]);
    227c:	fc 01       	movw	r30, r24
    227e:	ef 56       	subi	r30, 0x6F	; 111
    2280:	fe 4f       	sbci	r31, 0xFE	; 254
    2282:	e4 91       	lpm	r30, Z
    2284:	ed 93       	st	X+, r30
    2286:	01 96       	adiw	r24, 0x01	; 1
        }

        // SET KEY state

        else if (state == STATE_SET_KEY) {
            for (digit = 0; digit < 7; digit++) {
    2288:	87 30       	cpi	r24, 0x07	; 7
    228a:	91 05       	cpc	r25, r1
    228c:	b9 f7       	brne	.-18     	; 0x227c <player_service+0x554>
                scale[digit] = pgm_read_byte(&c_major_scale[digit]);
            }
            accidental = ACCIDENTAL_SHARP;  // Default: Sharps
    228e:	f0 92 86 01 	sts	0x0186, r15
            state = STATE_SET_KEY_2;
    2292:	50 92 7c 01 	sts	0x017C, r5
            continue;
    2296:	d7 e0       	ldi	r29, 0x07	; 7
    2298:	7b cd       	rjmp	.-1290   	; 0x1d90 <player_service+0x68>
        }

        // SET KEY 2 state

        else if (state == STATE_SET_KEY_2) {
    229a:	8f 30       	cpi	r24, 0x0F	; 15
    229c:	81 f5       	brne	.+96     	; 0x22fe <player_service+0x5d6>
            ch = next_player_char();
    229e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <next_player_char>
            if (is_note(ch)) {
    22a2:	c8 2f       	mov	r28, r24
    22a4:	c1 54       	subi	r28, 0x41	; 65
    22a6:	c7 30       	cpi	r28, 0x07	; 7
    22a8:	80 f4       	brcc	.+32     	; 0x22ca <player_service+0x5a2>
                ch -= 'A';
                digit = pgm_read_byte(&c_major_scale[ch]);
    22aa:	8c 2f       	mov	r24, r28
    22ac:	99 27       	eor	r25, r25
    22ae:	87 fd       	sbrc	r24, 7
    22b0:	90 95       	com	r25
    22b2:	fc 01       	movw	r30, r24
    22b4:	ef 56       	subi	r30, 0x6F	; 111
    22b6:	fe 4f       	sbci	r31, 0xFE	; 254
    22b8:	d4 91       	lpm	r29, Z
                digit += accidental;
    22ba:	20 91 86 01 	lds	r18, 0x0186
    22be:	d2 0f       	add	r29, r18
                scale[ch] = digit;
    22c0:	83 58       	subi	r24, 0x83	; 131
    22c2:	9e 4f       	sbci	r25, 0xFE	; 254
    22c4:	fc 01       	movw	r30, r24
    22c6:	d0 83       	st	Z, r29
                continue;
    22c8:	63 cd       	rjmp	.-1338   	; 0x1d90 <player_service+0x68>
        }

        // SET KEY 2 state

        else if (state == STATE_SET_KEY_2) {
            ch = next_player_char();
    22ca:	c8 2f       	mov	r28, r24
                digit = pgm_read_byte(&c_major_scale[ch]);
                digit += accidental;
                scale[ch] = digit;
                continue;
            }
            else if (is_flat(ch)) {
    22cc:	8d 32       	cpi	r24, 0x2D	; 45
    22ce:	19 f4       	brne	.+6      	; 0x22d6 <player_service+0x5ae>
                accidental = ACCIDENTAL_FLAT;
    22d0:	a0 92 86 01 	sts	0x0186, r10
                continue;
    22d4:	5d cd       	rjmp	.-1350   	; 0x1d90 <player_service+0x68>
            }
            else if (is_natural(ch)) {
    22d6:	8e 34       	cpi	r24, 0x4E	; 78
    22d8:	11 f0       	breq	.+4      	; 0x22de <player_service+0x5b6>
    22da:	8d 33       	cpi	r24, 0x3D	; 61
    22dc:	19 f4       	brne	.+6      	; 0x22e4 <player_service+0x5bc>
                accidental = ACCIDENTAL_NATURAL;
    22de:	10 92 86 01 	sts	0x0186, r1
                continue;
    22e2:	56 cd       	rjmp	.-1364   	; 0x1d90 <player_service+0x68>
            }
            else if (is_sharp(ch)) {
    22e4:	8b 32       	cpi	r24, 0x2B	; 43
    22e6:	11 f0       	breq	.+4      	; 0x22ec <player_service+0x5c4>
    22e8:	83 32       	cpi	r24, 0x23	; 35
    22ea:	19 f4       	brne	.+6      	; 0x22f2 <player_service+0x5ca>
                accidental = ACCIDENTAL_SHARP;
    22ec:	f0 92 86 01 	sts	0x0186, r15
                continue;
    22f0:	4f cd       	rjmp	.-1378   	; 0x1d90 <player_service+0x68>
            }
            player_ptr--;
    22f2:	80 91 58 01 	lds	r24, 0x0158
    22f6:	90 91 59 01 	lds	r25, 0x0159
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	8c c0       	rjmp	.+280    	; 0x2416 <player_service+0x6ee>

        // SET TEMPO state
        // Entered after the beat unit (WHQISY) has been fetched, but before
        // the beats/min parameter is fetched.

        else if (state == STATE_SET_TEMPO) {
    22fe:	80 31       	cpi	r24, 0x10	; 16
    2300:	29 f4       	brne	.+10     	; 0x230c <player_service+0x5e4>
            // Upon entry to this state, the beat unit <note_size> has been
            // fetched.  Now fetch beats/min parameter.
            state = STATE_GET_NUMBER;
    2302:	e0 92 7c 01 	sts	0x017C, r14
            next_state = STATE_SET_TEMPO_2;
    2306:	90 92 8d 01 	sts	0x018D, r9
            continue;
    230a:	42 cd       	rjmp	.-1404   	; 0x1d90 <player_service+0x68>
        // Entered following the fetch of the beat unit (WHQISY) and beats/min
        // (multi-digit #) specification.
        // Sets <whole_note_period> based on this information, on which all
        // note timing is based.

        else if (state == STATE_SET_TEMPO_2) {
    230c:	81 31       	cpi	r24, 0x11	; 17
    230e:	c1 f5       	brne	.+112    	; 0x2380 <player_service+0x658>
            // Use 120 BPM if no BPM rate specified
            if (!number) {
    2310:	c1 14       	cp	r12, r1
    2312:	d1 04       	cpc	r13, r1
    2314:	19 f4       	brne	.+6      	; 0x231c <player_service+0x5f4>
                number = DEFAULT_TEMPO;
    2316:	88 e7       	ldi	r24, 0x78	; 120
    2318:	c8 2e       	mov	r12, r24
    231a:	d1 2c       	mov	r13, r1
            }
            // Both note unit (<note_size>, <size_modifier>) and beats/min
            // (<number>) parameters have been fetched
            // Calculate whole note period based on these parameters
            whole_note_period =
                (uint16_t) (PLAYER_TICKS_PER_SECOND * 60U * (uint32_t) note_size / number);
    231c:	60 91 88 01 	lds	r22, 0x0188
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	2c e7       	ldi	r18, 0x7C	; 124
    2328:	32 e9       	ldi	r19, 0x92	; 146
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	50 e0       	ldi	r21, 0x00	; 0
    232e:	0e 94 32 18 	call	0x3064	; 0x3064 <__mulsi3>
    2332:	96 01       	movw	r18, r12
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	50 e0       	ldi	r21, 0x00	; 0
    2338:	0e 94 65 18 	call	0x30ca	; 0x30ca <__udivmodsi4>
    233c:	89 01       	movw	r16, r18
    233e:	9a 01       	movw	r18, r20
    2340:	a8 01       	movw	r20, r16
                number = DEFAULT_TEMPO;
            }
            // Both note unit (<note_size>, <size_modifier>) and beats/min
            // (<number>) parameters have been fetched
            // Calculate whole note period based on these parameters
            whole_note_period =
    2342:	10 93 8c 01 	sts	0x018C, r17
    2346:	00 93 8b 01 	sts	0x018B, r16
                (uint16_t) (PLAYER_TICKS_PER_SECOND * 60U * (uint32_t) note_size / number);
           // Add 50% to beat time if dotted
            if (size_modifier & MOD_DOTTED) {
    234a:	20 91 89 01 	lds	r18, 0x0189
    234e:	20 ff       	sbrs	r18, 0
    2350:	09 c0       	rjmp	.+18     	; 0x2364 <player_service+0x63c>
                whole_note_period += whole_note_period >> 1;
    2352:	ca 01       	movw	r24, r20
    2354:	96 95       	lsr	r25
    2356:	87 95       	ror	r24
    2358:	84 0f       	add	r24, r20
    235a:	95 1f       	adc	r25, r21
    235c:	90 93 8c 01 	sts	0x018C, r25
    2360:	80 93 8b 01 	sts	0x018B, r24
            }
            // One-thrid of beat time if tripleted
            if (size_modifier & MOD_TRIPLET) {
    2364:	21 ff       	sbrs	r18, 1
    2366:	5b c0       	rjmp	.+182    	; 0x241e <player_service+0x6f6>
                whole_note_period /= 3;
    2368:	80 91 8b 01 	lds	r24, 0x018B
    236c:	90 91 8c 01 	lds	r25, 0x018C
    2370:	b3 01       	movw	r22, r6
    2372:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__udivmodhi4>
    2376:	70 93 8c 01 	sts	0x018C, r23
    237a:	60 93 8b 01 	sts	0x018B, r22
    237e:	4f c0       	rjmp	.+158    	; 0x241e <player_service+0x6f6>

        // SET BOOKMARK state
        // Entered following the fetch of the bookmark number, but before
        // the repeat count is fetched.

        else if (state == STATE_SET_BOOKMARK) {
    2380:	82 31       	cpi	r24, 0x12	; 18
    2382:	29 f4       	brne	.+10     	; 0x238e <player_service+0x666>
            // Upon entry to this state, the bookmark # has been fetched
            // and is in <digit>.
            // Set up to fetch repeat count
            state = STATE_GET_NUMBER;
    2384:	e0 92 7c 01 	sts	0x017C, r14
            // After repeat count is fetched, finalize bookmark setting
            next_state = STATE_SET_BOOKMARK_2;
    2388:	80 92 8d 01 	sts	0x018D, r8
            continue;
    238c:	01 cd       	rjmp	.-1534   	; 0x1d90 <player_service+0x68>
        // Entered following the fetch of the bookmark number and repeat count
        // The current play string pointer along with the specified repeat
        // count are stored in the specified bookmark record.  This information
        // is used by the GOTO BOOKMARK state/command.

        else if (state == STATE_SET_BOOKMARK_2) {
    238e:	83 31       	cpi	r24, 0x13	; 19
    2390:	11 f5       	brne	.+68     	; 0x23d6 <player_service+0x6ae>
            // Both bookmark # <digit> and repeat count <number> have
            // been fetched.  Set bookmark based on these parameters,
            // along with the present value of <player_ptr>.
            if (number > 0xFE) {        // Bound repeat count to 8-bit max - 1
    2392:	ff ef       	ldi	r31, 0xFF	; 255
    2394:	cf 16       	cp	r12, r31
    2396:	d1 04       	cpc	r13, r1
    2398:	20 f4       	brcc	.+8      	; 0x23a2 <player_service+0x67a>
                number = 0xFE;
            }
            if (! number) {             // Repeat count of 0 means "infinite"
    239a:	c1 14       	cp	r12, r1
    239c:	d1 04       	cpc	r13, r1
    239e:	29 f0       	breq	.+10     	; 0x23aa <player_service+0x682>
    23a0:	07 c0       	rjmp	.+14     	; 0x23b0 <player_service+0x688>
        else if (state == STATE_SET_BOOKMARK_2) {
            // Both bookmark # <digit> and repeat count <number> have
            // been fetched.  Set bookmark based on these parameters,
            // along with the present value of <player_ptr>.
            if (number > 0xFE) {        // Bound repeat count to 8-bit max - 1
                number = 0xFE;
    23a2:	1e ef       	ldi	r17, 0xFE	; 254
    23a4:	c1 2e       	mov	r12, r17
    23a6:	d1 2c       	mov	r13, r1
    23a8:	03 c0       	rjmp	.+6      	; 0x23b0 <player_service+0x688>
            }
            if (! number) {             // Repeat count of 0 means "infinite"
                number = 0xFF;
    23aa:	bf ef       	ldi	r27, 0xFF	; 255
    23ac:	cb 2e       	mov	r12, r27
    23ae:	d1 2c       	mov	r13, r1
            }
            bookmark[digit].repeat = number;
    23b0:	8d 2f       	mov	r24, r29
    23b2:	99 27       	eor	r25, r25
    23b4:	87 fd       	sbrc	r24, 7
    23b6:	90 95       	com	r25
    23b8:	fc 01       	movw	r30, r24
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	e8 0f       	add	r30, r24
    23c0:	f9 1f       	adc	r31, r25
    23c2:	e5 5a       	subi	r30, 0xA5	; 165
    23c4:	fe 4f       	sbci	r31, 0xFE	; 254
    23c6:	c2 82       	std	Z+2, r12	; 0x02
            bookmark[digit].position = player_ptr;
    23c8:	80 91 58 01 	lds	r24, 0x0158
    23cc:	90 91 59 01 	lds	r25, 0x0159
    23d0:	91 83       	std	Z+1, r25	; 0x01
    23d2:	80 83       	st	Z, r24
    23d4:	24 c0       	rjmp	.+72     	; 0x241e <player_service+0x6f6>
        // GOTO BOOKMARK state
        // Enered following the fetch of a bookmark # (digit)
        // Sets playback pointer to the specified bookmark location if the
        // bookmark's repeat counter is nonzero.

        else if (state == STATE_GOTO_BOOKMARK) {
    23d6:	84 31       	cpi	r24, 0x14	; 20
    23d8:	29 f5       	brne	.+74     	; 0x2424 <player_service+0x6fc>
            // Bookmark # has been fetched
            // Jump to bookmark position if:
            //   - It is defined (e.g. not NULL)
            //   - Bookmark repeat count is not 0
            if (bookmark[digit].repeat && bookmark[digit].position) {
    23da:	2d 2f       	mov	r18, r29
    23dc:	33 27       	eor	r19, r19
    23de:	27 fd       	sbrc	r18, 7
    23e0:	30 95       	com	r19
    23e2:	a9 01       	movw	r20, r18
    23e4:	44 0f       	add	r20, r20
    23e6:	55 1f       	adc	r21, r21
    23e8:	fa 01       	movw	r30, r20
    23ea:	e2 0f       	add	r30, r18
    23ec:	f3 1f       	adc	r31, r19
    23ee:	e5 5a       	subi	r30, 0xA5	; 165
    23f0:	fe 4f       	sbci	r31, 0xFE	; 254
    23f2:	62 81       	ldd	r22, Z+2	; 0x02
    23f4:	66 23       	and	r22, r22
    23f6:	99 f0       	breq	.+38     	; 0x241e <player_service+0x6f6>
    23f8:	80 81       	ld	r24, Z
    23fa:	91 81       	ldd	r25, Z+1	; 0x01
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	79 f0       	breq	.+30     	; 0x241e <player_service+0x6f6>
                // Decrement repeat count if it is not 'infinite'
                if (bookmark[digit].repeat != 0xFF) {
    2400:	6f 3f       	cpi	r22, 0xFF	; 255
    2402:	11 f0       	breq	.+4      	; 0x2408 <player_service+0x6e0>
                    bookmark[digit].repeat--;
    2404:	61 50       	subi	r22, 0x01	; 1
    2406:	62 83       	std	Z+2, r22	; 0x02
                }
                player_ptr = bookmark[digit].position;
    2408:	24 0f       	add	r18, r20
    240a:	35 1f       	adc	r19, r21
    240c:	25 5a       	subi	r18, 0xA5	; 165
    240e:	3e 4f       	sbci	r19, 0xFE	; 254
    2410:	f9 01       	movw	r30, r18
    2412:	80 81       	ld	r24, Z
    2414:	91 81       	ldd	r25, Z+1	; 0x01
    2416:	90 93 59 01 	sts	0x0159, r25
    241a:	80 93 58 01 	sts	0x0158, r24
            }
            // Resume note/command processing at new position
            state = STATE_GET_NOTE;
    241e:	f0 92 7c 01 	sts	0x017C, r15
            continue;
    2422:	b6 cc       	rjmp	.-1684   	; 0x1d90 <player_service+0x68>

        // STOP state
        // This state will be entered when the end of the play string is
        // encountered or a parsing error occurs.

        else if (state == STATE_STOP) {
    2424:	85 31       	cpi	r24, 0x15	; 21
    2426:	29 f4       	brne	.+10     	; 0x2432 <player_service+0x70a>
            player_stop();
    2428:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <player_stop>
            state = STATE_RESET;
    242c:	10 92 7c 01 	sts	0x017C, r1
            break;
    2430:	03 c0       	rjmp	.+6      	; 0x2438 <player_service+0x710>
        }

        // Unknown state - force to STOP

        else {
            state = STATE_STOP;
    2432:	b0 92 7c 01 	sts	0x017C, r11
            continue;
    2436:	ac cc       	rjmp	.-1704   	; 0x1d90 <player_service+0x68>
        }
    } while (1);
}
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	1f 91       	pop	r17
    243e:	0f 91       	pop	r16
    2440:	ff 90       	pop	r15
    2442:	ef 90       	pop	r14
    2444:	df 90       	pop	r13
    2446:	cf 90       	pop	r12
    2448:	bf 90       	pop	r11
    244a:	af 90       	pop	r10
    244c:	9f 90       	pop	r9
    244e:	8f 90       	pop	r8
    2450:	7f 90       	pop	r7
    2452:	6f 90       	pop	r6
    2454:	5f 90       	pop	r5
    2456:	08 95       	ret

00002458 <rotary_init>:
void rotary_init(void)
{
    // Disable pin interrupts during setup
    // This needs to change if encoder is not wired to Port D

    PCICR &= INVBM(PCIE2);
    2458:	e8 e6       	ldi	r30, 0x68	; 104
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	8b 7f       	andi	r24, 0xFB	; 251
    2460:	80 83       	st	Z, r24

    previous.all = 0;
    2462:	10 92 96 01 	sts	0x0196, r1
    left_position = 0;
    2466:	10 92 95 01 	sts	0x0195, r1
    left_movement = 0;
    246a:	10 92 94 01 	sts	0x0194, r1
    right_position = 0;
    246e:	10 92 93 01 	sts	0x0193, r1
    right_movement = 0;
    2472:	10 92 92 01 	sts	0x0192, r1

    // Configure pins associated with rotary encoders as inputs
    // Turn OFF pull-ups for these pins

    DDR(LEFT_A_PORT) &= INVBM(LEFT_A_PIN);
    2476:	54 98       	cbi	0x0a, 4	; 10
    DDR(LEFT_B_PORT) &= INVBM(LEFT_B_PIN);
    2478:	55 98       	cbi	0x0a, 5	; 10
    DDR(RIGHT_A_PORT) &= INVBM(RIGHT_A_PIN);
    247a:	56 98       	cbi	0x0a, 6	; 10
    DDR(RIGHT_B_PORT) &= INVBM(RIGHT_B_PIN);
    247c:	57 98       	cbi	0x0a, 7	; 10

    BCLR(LEFT_A);
    247e:	5c 98       	cbi	0x0b, 4	; 11
    BCLR(LEFT_B);
    2480:	5d 98       	cbi	0x0b, 5	; 11
    BCLR(RIGHT_A);
    2482:	5e 98       	cbi	0x0b, 6	; 11
    BCLR(RIGHT_B);
    2484:	5f 98       	cbi	0x0b, 7	; 11
    // Enable pin change interrupts for encoder 'B' inputs
    // Note: PCMSK2 is associated with Port D pins.  IF the encoder inputs are
    //       moved to a different port, the assignment below must be done
    //       to the appropriate PCMSKx register.

    PCMSK2 |= BM(LEFT_B_PIN) | BM(RIGHT_B_PIN);
    2486:	ad e6       	ldi	r26, 0x6D	; 109
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	8c 91       	ld	r24, X
    248c:	80 6a       	ori	r24, 0xA0	; 160
    248e:	8c 93       	st	X, r24

    // Enable pin interrupts on port D
    // Note: This needs to be change if rotary encoder inputs are moved
    //       from port D to some other port

    PCICR |= BM(PCIE2);
    2490:	80 81       	ld	r24, Z
    2492:	84 60       	ori	r24, 0x04	; 4
    2494:	80 83       	st	Z, r24
}
    2496:	08 95       	ret

00002498 <rotary_status>:
 ******************************************************************************/

uint8_t rotary_status(void)
{
    return previous.all;
}
    2498:	80 91 96 01 	lds	r24, 0x0196
    249c:	08 95       	ret

0000249e <left_rotary_relative>:

int8_t left_rotary_relative(void)
{
    int8_t ret;

    ret = left_position;
    249e:	80 91 95 01 	lds	r24, 0x0195
    left_position = 0;
    24a2:	10 92 95 01 	sts	0x0195, r1

    return ret;
}
    24a6:	08 95       	ret

000024a8 <left_rotary_absolute>:
 *
 ******************************************************************************/

int8_t left_rotary_absolute(void)
{
    return left_position;
    24a8:	80 91 95 01 	lds	r24, 0x0195
}
    24ac:	08 95       	ret

000024ae <right_rotary_relative>:

int8_t right_rotary_relative(void)
{
    uint8_t ret;

    ret = right_position;
    24ae:	80 91 93 01 	lds	r24, 0x0193
    right_position = 0;
    24b2:	10 92 93 01 	sts	0x0193, r1

    return ret;
}
    24b6:	08 95       	ret

000024b8 <right_rotary_absolute>:
 *
 ******************************************************************************/

int8_t right_rotary_absolute(void)
{
    return right_position;
    24b8:	80 91 93 01 	lds	r24, 0x0193
}
    24bc:	08 95       	ret

000024be <__vector_5>:
 * Handles pin-change interrupts on Port D
 * Used for rotary encoder movement detection and logging
 ******************************************************************************/

ISR(PCINT2_vect, ISR_BLOCK)
{
    24be:	1f 92       	push	r1
    24c0:	0f 92       	push	r0
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	0f 92       	push	r0
    24c6:	11 24       	eor	r1, r1
    24c8:	2f 93       	push	r18
    24ca:	8f 93       	push	r24
    24cc:	9f 93       	push	r25

    // Read present rotary encoder state
    // Note: if (PINREAD(x)) y = 1; is the most efficient way to do this, it
    // generates the tightest code when avr-gcc is used.

    present.all = 0;
    24ce:	80 e0       	ldi	r24, 0x00	; 0

    if (PINREAD(LEFT_A)) {
    24d0:	4c 99       	sbic	0x09, 4	; 9
        present.left_a = 1;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    }
    if (PINREAD(LEFT_B)) {
    24d4:	4d 99       	sbic	0x09, 5	; 9
        present.left_b = 1;
    24d6:	82 60       	ori	r24, 0x02	; 2
    }
    if (PINREAD(RIGHT_A)) {
    24d8:	4e 99       	sbic	0x09, 6	; 9
        present.right_a = 1;
    24da:	84 60       	ori	r24, 0x04	; 4
    }
    if (PINREAD(RIGHT_B)) {
    24dc:	4f 99       	sbic	0x09, 7	; 9
        present.right_b = 1;
    24de:	88 60       	ori	r24, 0x08	; 8
    // LEFT_B toggles state every time encoder is moved
    //
    // Note: Must check if LEFT_B has changed state since last entry because
    // both left and right encoder movement will trigger the same interrupt.

    if (present.left_b != previous.left_b) {
    24e0:	90 91 96 01 	lds	r25, 0x0196
    24e4:	98 27       	eor	r25, r24
    24e6:	91 ff       	sbrs	r25, 1
    24e8:	17 c0       	rjmp	.+46     	; 0x2518 <__vector_5+0x5a>
        left_movement++;
    24ea:	20 91 94 01 	lds	r18, 0x0194
    24ee:	2f 5f       	subi	r18, 0xFF	; 255
    24f0:	20 93 94 01 	sts	0x0194, r18
    24f4:	28 2f       	mov	r18, r24
    24f6:	21 70       	andi	r18, 0x01	; 1
        if (present.left_b) {
    24f8:	81 ff       	sbrs	r24, 1
    24fa:	03 c0       	rjmp	.+6      	; 0x2502 <__vector_5+0x44>
            if (present.left_a) {
    24fc:	22 23       	and	r18, r18
    24fe:	19 f0       	breq	.+6      	; 0x2506 <__vector_5+0x48>
    2500:	06 c0       	rjmp	.+12     	; 0x250e <__vector_5+0x50>
            else {
                left_position--;    // CCW rotation, BA = 10
            }
        }
        else {
            if (present.left_a) {
    2502:	22 23       	and	r18, r18
    2504:	21 f0       	breq	.+8      	; 0x250e <__vector_5+0x50>
                left_position--;    // CCW rotation, BA = 01
    2506:	20 91 95 01 	lds	r18, 0x0195
    250a:	21 50       	subi	r18, 0x01	; 1
    250c:	03 c0       	rjmp	.+6      	; 0x2514 <__vector_5+0x56>
            }
            else {
                left_position++;    // CW rotation, BA = 00
    250e:	20 91 95 01 	lds	r18, 0x0195
    2512:	2f 5f       	subi	r18, 0xFF	; 255
    2514:	20 93 95 01 	sts	0x0195, r18
    // RIGHT_B changes state every time encoder is moved
    //
    // Note: Must check if RIGHT_B has changed state since last entry because
    // both left and right encoder movement will trigger the same interrupt.

    if (present.right_b != previous.right_b) {
    2518:	93 ff       	sbrs	r25, 3
    251a:	17 c0       	rjmp	.+46     	; 0x254a <__vector_5+0x8c>
        right_movement++;
    251c:	90 91 92 01 	lds	r25, 0x0192
    2520:	9f 5f       	subi	r25, 0xFF	; 255
    2522:	90 93 92 01 	sts	0x0192, r25
    2526:	98 2f       	mov	r25, r24
    2528:	94 70       	andi	r25, 0x04	; 4
        if (present.right_b) {
    252a:	83 ff       	sbrs	r24, 3
    252c:	03 c0       	rjmp	.+6      	; 0x2534 <__vector_5+0x76>
            if (present.right_a) {
    252e:	99 23       	and	r25, r25
    2530:	19 f0       	breq	.+6      	; 0x2538 <__vector_5+0x7a>
    2532:	06 c0       	rjmp	.+12     	; 0x2540 <__vector_5+0x82>
            else {
                right_position--;   // CCW rotation, BA = 10
            }
        }
        else {
            if (present.right_a) {
    2534:	99 23       	and	r25, r25
    2536:	21 f0       	breq	.+8      	; 0x2540 <__vector_5+0x82>
                right_position--;   // CW rotation, BA = 01
    2538:	90 91 93 01 	lds	r25, 0x0193
    253c:	91 50       	subi	r25, 0x01	; 1
    253e:	03 c0       	rjmp	.+6      	; 0x2546 <__vector_5+0x88>
            }
            else {
                right_position++;   // CCW rotation, BA = 00
    2540:	90 91 93 01 	lds	r25, 0x0193
    2544:	9f 5f       	subi	r25, 0xFF	; 255
    2546:	90 93 93 01 	sts	0x0193, r25
            }
        }
    }

    previous = present;
    254a:	80 93 96 01 	sts	0x0196, r24
}
    254e:	9f 91       	pop	r25
    2550:	8f 91       	pop	r24
    2552:	2f 91       	pop	r18
    2554:	0f 90       	pop	r0
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	0f 90       	pop	r0
    255a:	1f 90       	pop	r1
    255c:	18 95       	reti

0000255e <rx_int_off>:
Interrupt control functions
*******************************************************************************/

static inline void rx_int_off(void)
{
    UCSR0B &= INVBM(RXCIE0);
    255e:	e1 ec       	ldi	r30, 0xC1	; 193
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	8f 77       	andi	r24, 0x7F	; 127
    2566:	80 83       	st	Z, r24
}
    2568:	08 95       	ret

0000256a <rx_int_on>:
        
static inline void rx_int_on(void)
{
    UCSR0B |= BM(RXCIE0);
    256a:	e1 ec       	ldi	r30, 0xC1	; 193
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	80 68       	ori	r24, 0x80	; 128
    2572:	80 83       	st	Z, r24
}
    2574:	08 95       	ret

00002576 <tx_int_off>:
        
static inline void tx_int_off(void)
{
    UCSR0B &= INVBM(UDRIE0);
    2576:	e1 ec       	ldi	r30, 0xC1	; 193
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	8f 7d       	andi	r24, 0xDF	; 223
    257e:	80 83       	st	Z, r24
}
    2580:	08 95       	ret

00002582 <tx_int_on>:
        
static inline void tx_int_on(void)
{
    UCSR0B |= BM(UDRIE0);
    2582:	e1 ec       	ldi	r30, 0xC1	; 193
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	80 62       	ori	r24, 0x20	; 32
    258a:	80 83       	st	Z, r24
}
    258c:	08 95       	ret

0000258e <serial_in_blocking>:
Return: (return)    If blocking is disabled, will return -1 if no data available
*******************************************************************************/

void serial_in_blocking(uint8_t mode)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    258e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2590:	f8 94       	cli
    {
        if (mode)
    2592:	88 23       	and	r24, r24
    2594:	21 f0       	breq	.+8      	; 0x259e <serial_in_blocking+0x10>
            set_rx_block();
    2596:	80 91 95 02 	lds	r24, 0x0295
    259a:	80 62       	ori	r24, 0x20	; 32
    259c:	03 c0       	rjmp	.+6      	; 0x25a4 <serial_in_blocking+0x16>
        else
            clear_rx_block();
    259e:	80 91 95 02 	lds	r24, 0x0295
    25a2:	8f 7d       	andi	r24, 0xDF	; 223
    25a4:	80 93 95 02 	sts	0x0295, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    25a8:	9f bf       	out	0x3f, r25	; 63
    }
}
    25aa:	08 95       	ret

000025ac <serial_out_blocking>:
Return: (none)
*******************************************************************************/

void serial_out_blocking(uint8_t mode)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    25ac:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    25ae:	f8 94       	cli
    {
        if (mode)
    25b0:	88 23       	and	r24, r24
    25b2:	21 f0       	breq	.+8      	; 0x25bc <serial_out_blocking+0x10>
            set_tx_block();
    25b4:	80 91 96 02 	lds	r24, 0x0296
    25b8:	80 62       	ori	r24, 0x20	; 32
    25ba:	03 c0       	rjmp	.+6      	; 0x25c2 <serial_out_blocking+0x16>
        else
            clear_tx_block();
    25bc:	80 91 96 02 	lds	r24, 0x0296
    25c0:	8f 7d       	andi	r24, 0xDF	; 223
    25c2:	80 93 96 02 	sts	0x0296, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    25c6:	9f bf       	out	0x3f, r25	; 63
    }
}
    25c8:	08 95       	ret

000025ca <serial_in_empty>:

uint8_t serial_in_empty(void)
{
    uint8_t ret;

    if (rx_poll())
    25ca:	80 91 95 02 	lds	r24, 0x0295
    25ce:	84 ff       	sbrs	r24, 4
    25d0:	07 c0       	rjmp	.+14     	; 0x25e0 <serial_in_empty+0x16>
        ret = !(UCSR0A & BM(RXC0));
    25d2:	80 91 c0 00 	lds	r24, 0x00C0
    25d6:	80 95       	com	r24
    25d8:	88 1f       	adc	r24, r24
    25da:	88 27       	eor	r24, r24
    25dc:	88 1f       	adc	r24, r24
    25de:	08 95       	ret
    else
        ret = rx_empty();
    25e0:	80 91 95 02 	lds	r24, 0x0295
    25e4:	81 70       	andi	r24, 0x01	; 1

    return ret;
}
    25e6:	08 95       	ret

000025e8 <serial_in_full>:

uint8_t serial_in_full(void)
{
    uint8_t ret;

    if (rx_poll())
    25e8:	80 91 95 02 	lds	r24, 0x0295
    25ec:	84 ff       	sbrs	r24, 4
    25ee:	04 c0       	rjmp	.+8      	; 0x25f8 <serial_in_full+0x10>
        ret = (UCSR0A & BM(RXC0));
    25f0:	80 91 c0 00 	lds	r24, 0x00C0
    25f4:	80 78       	andi	r24, 0x80	; 128
    25f6:	08 95       	ret
    else
        ret = rx_full();
    25f8:	80 91 95 02 	lds	r24, 0x0295
    25fc:	82 70       	andi	r24, 0x02	; 2

    return ret;
}
    25fe:	08 95       	ret

00002600 <serial_in_used>:
                    Result is meaningless if called when receive polled mode
                    is active.
*******************************************************************************/

serial_t serial_in_used(void)
{
    2600:	1f 93       	push	r17
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	0f 92       	push	r0
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    serial_t used;

    if (rx_poll())
    260c:	80 91 95 02 	lds	r24, 0x0295
    2610:	84 fd       	sbrc	r24, 4
    2612:	24 c0       	rjmp	.+72     	; 0x265c <serial_in_used+0x5c>
        return 0;

    // Disable receive interrupt during buffer index evaluation

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2614:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2616:	f8 94       	cli
    {
        rx_int_off();
    2618:	0e 94 af 12 	call	0x255e	; 0x255e <rx_int_off>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    261c:	1f bf       	out	0x3f, r17	; 63
    }

    // Calculate used space in receive buffer

    if (rx_full())
    261e:	80 91 95 02 	lds	r24, 0x0295
    2622:	81 fd       	sbrc	r24, 1
    2624:	12 c0       	rjmp	.+36     	; 0x264a <serial_in_used+0x4a>
        used = RX_BUFSIZE;
    else if (rx_head >= rx_tail)
    2626:	90 91 98 01 	lds	r25, 0x0198
    262a:	80 91 97 01 	lds	r24, 0x0197
    262e:	98 17       	cp	r25, r24
    2630:	28 f0       	brcs	.+10     	; 0x263c <serial_in_used+0x3c>
        used = rx_head - rx_tail;
    2632:	80 91 98 01 	lds	r24, 0x0198
    2636:	90 91 97 01 	lds	r25, 0x0197
    263a:	05 c0       	rjmp	.+10     	; 0x2646 <serial_in_used+0x46>
    else
        used = RX_BUFSIZE - rx_tail + rx_head;
    263c:	80 91 98 01 	lds	r24, 0x0198
    2640:	90 91 97 01 	lds	r25, 0x0197
    2644:	80 5f       	subi	r24, 0xF0	; 240
    2646:	89 1b       	sub	r24, r25
    2648:	01 c0       	rjmp	.+2      	; 0x264c <serial_in_used+0x4c>
    }

    // Calculate used space in receive buffer

    if (rx_full())
        used = RX_BUFSIZE;
    264a:	80 e1       	ldi	r24, 0x10	; 16
    else
        used = RX_BUFSIZE - rx_tail + rx_head;

    // Enable transmit interrupt & exit

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    264c:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    264e:	f8 94       	cli
    {
        rx_int_on();
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	0e 94 b5 12 	call	0x256a	; 0x256a <rx_int_on>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2656:	1f bf       	out	0x3f, r17	; 63
    }

    return used;
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	01 c0       	rjmp	.+2      	; 0x265e <serial_in_used+0x5e>
serial_t serial_in_used(void)
{
    serial_t used;

    if (rx_poll())
        return 0;
    265c:	80 e0       	ldi	r24, 0x00	; 0
    {
        rx_int_on();
    }

    return used;
}
    265e:	0f 90       	pop	r0
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	1f 91       	pop	r17
    2666:	08 95       	ret

00002668 <serial_in_free>:
                    Result is meaningless if called when receive polled mode
                    is active.
*******************************************************************************/

uint8_t serial_in_free(void)
{
    2668:	1f 93       	push	r17
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	0f 92       	push	r0
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    serial_t free;

    if (rx_poll())
    2674:	80 91 95 02 	lds	r24, 0x0295
    2678:	84 fd       	sbrc	r24, 4
    267a:	24 c0       	rjmp	.+72     	; 0x26c4 <serial_in_free+0x5c>
        return 0;

    // Disable receive interrupt during buffer index evaluation

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    267c:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    267e:	f8 94       	cli
    {
        rx_int_off();
    2680:	0e 94 af 12 	call	0x255e	; 0x255e <rx_int_off>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2684:	1f bf       	out	0x3f, r17	; 63
    }

    // Calculate free space in receive buffer

    if (rx_empty())
    2686:	80 91 95 02 	lds	r24, 0x0295
    268a:	80 fd       	sbrc	r24, 0
    268c:	12 c0       	rjmp	.+36     	; 0x26b2 <serial_in_free+0x4a>
        free = RX_BUFSIZE;
    else if (rx_head >= rx_tail)
    268e:	90 91 98 01 	lds	r25, 0x0198
    2692:	80 91 97 01 	lds	r24, 0x0197
    2696:	98 17       	cp	r25, r24
    2698:	30 f0       	brcs	.+12     	; 0x26a6 <serial_in_free+0x3e>
        free = RX_BUFSIZE - rx_head + rx_tail;
    269a:	80 91 97 01 	lds	r24, 0x0197
    269e:	90 91 98 01 	lds	r25, 0x0198
    26a2:	80 5f       	subi	r24, 0xF0	; 240
    26a4:	04 c0       	rjmp	.+8      	; 0x26ae <serial_in_free+0x46>
    else
        free = rx_tail - rx_head;
    26a6:	80 91 97 01 	lds	r24, 0x0197
    26aa:	90 91 98 01 	lds	r25, 0x0198
    26ae:	89 1b       	sub	r24, r25
    26b0:	01 c0       	rjmp	.+2      	; 0x26b4 <serial_in_free+0x4c>
    }

    // Calculate free space in receive buffer

    if (rx_empty())
        free = RX_BUFSIZE;
    26b2:	80 e1       	ldi	r24, 0x10	; 16
    else
        free = rx_tail - rx_head;

    // Enable transmit interrupt & exit

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    26b4:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26b6:	f8 94       	cli
    {
        rx_int_on();
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	0e 94 b5 12 	call	0x256a	; 0x256a <rx_int_on>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    26be:	1f bf       	out	0x3f, r17	; 63
    }

    return free;
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	01 c0       	rjmp	.+2      	; 0x26c6 <serial_in_free+0x5e>
uint8_t serial_in_free(void)
{
    serial_t free;

    if (rx_poll())
        return 0;
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    {
        rx_int_on();
    }

    return free;
}
    26c6:	0f 90       	pop	r0
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	08 95       	ret

000026d0 <serial_out_empty>:

uint8_t serial_out_empty(void)
{
    uint8_t ret;

    if (tx_poll())
    26d0:	80 91 96 02 	lds	r24, 0x0296
    26d4:	84 ff       	sbrs	r24, 4
    26d6:	04 c0       	rjmp	.+8      	; 0x26e0 <serial_out_empty+0x10>
        ret = (UCSR0A & BM(UDRE0));
    26d8:	80 91 c0 00 	lds	r24, 0x00C0
    26dc:	80 72       	andi	r24, 0x20	; 32
    26de:	08 95       	ret
    else
        ret = tx_empty();
    26e0:	80 91 96 02 	lds	r24, 0x0296
    26e4:	81 70       	andi	r24, 0x01	; 1

    return ret;
}
    26e6:	08 95       	ret

000026e8 <serial_out_full>:

uint8_t serial_out_full(void)
{
    uint8_t ret;

    if (tx_poll())
    26e8:	80 91 96 02 	lds	r24, 0x0296
    26ec:	84 ff       	sbrs	r24, 4
    26ee:	07 c0       	rjmp	.+14     	; 0x26fe <serial_out_full+0x16>
        ret = !(UCSR0A & BM(UDRE0));
    26f0:	90 91 c0 00 	lds	r25, 0x00C0
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	95 ff       	sbrs	r25, 5
    26f8:	05 c0       	rjmp	.+10     	; 0x2704 <serial_out_full+0x1c>
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	08 95       	ret
    else
        ret = tx_full();
    26fe:	80 91 96 02 	lds	r24, 0x0296
    2702:	82 70       	andi	r24, 0x02	; 2

    return ret;
}
    2704:	08 95       	ret

00002706 <serial_out_idle>:

uint8_t serial_out_idle(void)
{
    uint8_t ret;

    if (tx_poll())
    2706:	80 91 96 02 	lds	r24, 0x0296
    270a:	84 ff       	sbrs	r24, 4
    270c:	07 c0       	rjmp	.+14     	; 0x271c <serial_out_idle+0x16>
        ret = ((UCSR0A & BM(TXC0)) != 0);
    270e:	90 91 c0 00 	lds	r25, 0x00C0
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	96 fd       	sbrc	r25, 6
    2716:	11 c0       	rjmp	.+34     	; 0x273a <serial_out_idle+0x34>
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	08 95       	ret
    else
        ret = (tx_empty() && (UCSR0A & BM(TXC0)));
    271c:	80 91 96 02 	lds	r24, 0x0296
    2720:	80 ff       	sbrs	r24, 0
    2722:	09 c0       	rjmp	.+18     	; 0x2736 <serial_out_idle+0x30>
    2724:	20 91 c0 00 	lds	r18, 0x00C0

Return: (return)    Nonzero if serial output queue is empty and the USART
                    transmitter is idle (not sending any data).
*******************************************************************************/

uint8_t serial_out_idle(void)
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	26 fd       	sbrc	r18, 6
    272e:	05 c0       	rjmp	.+10     	; 0x273a <serial_out_idle+0x34>
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	08 95       	ret
    uint8_t ret;

    if (tx_poll())
        ret = ((UCSR0A & BM(TXC0)) != 0);
    else
        ret = (tx_empty() && (UCSR0A & BM(TXC0)));
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0

    return ret;
}
    273a:	08 95       	ret

0000273c <serial_out_used>:
                    Result is meaningless if called when the transmit polled
                    mode is active.
*******************************************************************************/

serial_t serial_out_used(void)
{
    273c:	1f 93       	push	r17
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	0f 92       	push	r0
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    serial_t used;

    if (tx_poll())
    2748:	80 91 96 02 	lds	r24, 0x0296
    274c:	84 fd       	sbrc	r24, 4
    274e:	28 c0       	rjmp	.+80     	; 0x27a0 <serial_out_used+0x64>
        return 0;

    // Disable transmit interrupt during buffer index evaluation

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2750:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2752:	f8 94       	cli
    {
        tx_int_off();
    2754:	0e 94 bb 12 	call	0x2576	; 0x2576 <tx_int_off>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2758:	1f bf       	out	0x3f, r17	; 63
    }

    // Calculate used space in transmit buffer

    if (tx_full())
    275a:	80 91 96 02 	lds	r24, 0x0296
    275e:	81 fd       	sbrc	r24, 1
    2760:	12 c0       	rjmp	.+36     	; 0x2786 <serial_out_used+0x4a>
        used = TX_BUFSIZE;
    else if (tx_head >= tx_tail)
    2762:	90 91 97 02 	lds	r25, 0x0297
    2766:	80 91 98 02 	lds	r24, 0x0298
    276a:	98 17       	cp	r25, r24
    276c:	28 f0       	brcs	.+10     	; 0x2778 <serial_out_used+0x3c>
        used = tx_head - tx_tail;
    276e:	80 91 97 02 	lds	r24, 0x0297
    2772:	90 91 98 02 	lds	r25, 0x0298
    2776:	05 c0       	rjmp	.+10     	; 0x2782 <serial_out_used+0x46>
    else
        used = TX_BUFSIZE - tx_tail + tx_head;
    2778:	80 91 97 02 	lds	r24, 0x0297
    277c:	90 91 98 02 	lds	r25, 0x0298
    2780:	80 5e       	subi	r24, 0xE0	; 224
    2782:	89 1b       	sub	r24, r25
    2784:	01 c0       	rjmp	.+2      	; 0x2788 <serial_out_used+0x4c>
    }

    // Calculate used space in transmit buffer

    if (tx_full())
        used = TX_BUFSIZE;
    2786:	80 e2       	ldi	r24, 0x20	; 32
    else
        used = TX_BUFSIZE - tx_tail + tx_head;

    // Enable transmit interrupt & exit

    if (! tx_empty()) {
    2788:	90 91 96 02 	lds	r25, 0x0296
    278c:	90 fd       	sbrc	r25, 0
    278e:	09 c0       	rjmp	.+18     	; 0x27a2 <serial_out_used+0x66>
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2790:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2792:	f8 94       	cli
        {
            tx_int_on();
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	0e 94 c1 12 	call	0x2582	; 0x2582 <tx_int_on>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    279a:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	01 c0       	rjmp	.+2      	; 0x27a2 <serial_out_used+0x66>
serial_t serial_out_used(void)
{
    serial_t used;

    if (tx_poll())
        return 0;
    27a0:	80 e0       	ldi	r24, 0x00	; 0
            tx_int_on();
        }
    }

    return used;
}
    27a2:	0f 90       	pop	r0
    27a4:	df 91       	pop	r29
    27a6:	cf 91       	pop	r28
    27a8:	1f 91       	pop	r17
    27aa:	08 95       	ret

000027ac <serial_out_free>:
                    Result is meaningless if called when transmit polled mode
                    is active.
*******************************************************************************/

serial_t serial_out_free(void)
{
    27ac:	1f 93       	push	r17
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	0f 92       	push	r0
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    serial_t free;

    if (tx_poll())
    27b8:	80 91 96 02 	lds	r24, 0x0296
    27bc:	84 fd       	sbrc	r24, 4
    27be:	28 c0       	rjmp	.+80     	; 0x2810 <serial_out_free+0x64>
        return 0;

    // Disable transmit interrupt during buffer index evaluation

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    27c0:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    27c2:	f8 94       	cli
    {
        tx_int_off();
    27c4:	0e 94 bb 12 	call	0x2576	; 0x2576 <tx_int_off>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    27c8:	1f bf       	out	0x3f, r17	; 63
    }

    // Calculate free space in transmit buffer

    if (tx_empty())
    27ca:	80 91 96 02 	lds	r24, 0x0296
    27ce:	80 fd       	sbrc	r24, 0
    27d0:	12 c0       	rjmp	.+36     	; 0x27f6 <serial_out_free+0x4a>
        free = TX_BUFSIZE;
    else if (tx_head >= tx_tail)
    27d2:	90 91 97 02 	lds	r25, 0x0297
    27d6:	80 91 98 02 	lds	r24, 0x0298
    27da:	98 17       	cp	r25, r24
    27dc:	30 f0       	brcs	.+12     	; 0x27ea <serial_out_free+0x3e>
        free = TX_BUFSIZE - tx_head + tx_tail;
    27de:	80 91 98 02 	lds	r24, 0x0298
    27e2:	90 91 97 02 	lds	r25, 0x0297
    27e6:	80 5e       	subi	r24, 0xE0	; 224
    27e8:	04 c0       	rjmp	.+8      	; 0x27f2 <serial_out_free+0x46>
    else
        free = tx_tail - tx_head;
    27ea:	80 91 98 02 	lds	r24, 0x0298
    27ee:	90 91 97 02 	lds	r25, 0x0297
    27f2:	89 1b       	sub	r24, r25
    27f4:	01 c0       	rjmp	.+2      	; 0x27f8 <serial_out_free+0x4c>
    }

    // Calculate free space in transmit buffer

    if (tx_empty())
        free = TX_BUFSIZE;
    27f6:	80 e2       	ldi	r24, 0x20	; 32
    else
        free = tx_tail - tx_head;

    // Enable transmit interrupt & exit

    if (! tx_empty()) {
    27f8:	90 91 96 02 	lds	r25, 0x0296
    27fc:	90 fd       	sbrc	r25, 0
    27fe:	09 c0       	rjmp	.+18     	; 0x2812 <serial_out_free+0x66>
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2800:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2802:	f8 94       	cli
        {
            tx_int_on();
    2804:	89 83       	std	Y+1, r24	; 0x01
    2806:	0e 94 c1 12 	call	0x2582	; 0x2582 <tx_int_on>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    280a:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	01 c0       	rjmp	.+2      	; 0x2812 <serial_out_free+0x66>
serial_t serial_out_free(void)
{
    serial_t free;

    if (tx_poll())
        return 0;
    2810:	80 e0       	ldi	r24, 0x00	; 0
            tx_int_on();
        }
    }

    return free;
}
    2812:	0f 90       	pop	r0
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	1f 91       	pop	r17
    281a:	08 95       	ret

0000281c <serial_init>:
Return: (return)    Actual baud rate selected, adjusted for F_CPU and divisor
                    granularity.
*******************************************************************************/

uint16_t serial_init(uint16_t baud, uint8_t mode)
{
    281c:	af 92       	push	r10
    281e:	bf 92       	push	r11
    2820:	cf 92       	push	r12
    2822:	df 92       	push	r13
    2824:	ef 92       	push	r14
    2826:	ff 92       	push	r15
    2828:	1f 93       	push	r17
    282a:	cf 93       	push	r28
    282c:	df 93       	push	r29
    282e:	00 d0       	rcall	.+0      	; 0x2830 <serial_init+0x14>
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	16 2f       	mov	r17, r22
    uint16_t actual_baud;
    uint16_t divisor;

    // Adjust baud rate to conform to system limits (if needed)

    if (! baud)
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	29 f0       	breq	.+10     	; 0x2844 <serial_init+0x28>
        baud = 19200;                   // Default rate
    if (baud < 300)
    283a:	21 e0       	ldi	r18, 0x01	; 1
    283c:	8c 32       	cpi	r24, 0x2C	; 44
    283e:	92 07       	cpc	r25, r18
    2840:	20 f0       	brcs	.+8      	; 0x284a <serial_init+0x2e>
    2842:	05 c0       	rjmp	.+10     	; 0x284e <serial_init+0x32>
    uint16_t divisor;

    // Adjust baud rate to conform to system limits (if needed)

    if (! baud)
        baud = 19200;                   // Default rate
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	9b e4       	ldi	r25, 0x4B	; 75
    2848:	02 c0       	rjmp	.+4      	; 0x284e <serial_init+0x32>
    if (baud < 300)
        baud = 300;                     // Minimum rate
    284a:	8c e2       	ldi	r24, 0x2C	; 44
    284c:	91 e0       	ldi	r25, 0x01	; 1

    // Calculate baud rate divisor and actual baud rate

    divisor = (uint16_t) ((F_CPU >> 4) / (uint32_t) baud);
    284e:	9c 01       	movw	r18, r24
    2850:	40 e0       	ldi	r20, 0x00	; 0
    2852:	50 e0       	ldi	r21, 0x00	; 0
    2854:	60 e4       	ldi	r22, 0x40	; 64
    2856:	c6 2e       	mov	r12, r22
    2858:	62 e4       	ldi	r22, 0x42	; 66
    285a:	d6 2e       	mov	r13, r22
    285c:	6f e0       	ldi	r22, 0x0F	; 15
    285e:	e6 2e       	mov	r14, r22
    2860:	f1 2c       	mov	r15, r1
    2862:	c7 01       	movw	r24, r14
    2864:	b6 01       	movw	r22, r12
    2866:	0e 94 65 18 	call	0x30ca	; 0x30ca <__udivmodsi4>
    286a:	59 01       	movw	r10, r18
    actual_baud = (uint16_t) ((F_CPU >> 4) / (uint32_t) divisor);
    286c:	40 e0       	ldi	r20, 0x00	; 0
    286e:	50 e0       	ldi	r21, 0x00	; 0
    2870:	c7 01       	movw	r24, r14
    2872:	b6 01       	movw	r22, r12
    2874:	0e 94 65 18 	call	0x30ca	; 0x30ca <__udivmodsi4>
    2878:	c9 01       	movw	r24, r18

    // Disable transmit & receive during configuration

    UCSR0B = 0x00;
    287a:	10 92 c1 00 	sts	0x00C1, r1
    UCSR0C = 0x00;
    287e:	10 92 c2 00 	sts	0x00C2, r1

    // Reset buffer pointers and status

    rx_head = 0;
    2882:	10 92 98 01 	sts	0x0198, r1
    rx_tail = 0;
    2886:	10 92 97 01 	sts	0x0197, r1
    rx_ctrl = 0;
    288a:	10 92 95 02 	sts	0x0295, r1

    tx_head = 0;
    288e:	10 92 97 02 	sts	0x0297, r1
    tx_tail = 0;
    2892:	10 92 98 02 	sts	0x0298, r1
    tx_ctrl = 0;
    2896:	10 92 96 02 	sts	0x0296, r1

    set_rx_empty();
    289a:	20 91 95 02 	lds	r18, 0x0295
    289e:	21 60       	ori	r18, 0x01	; 1
    28a0:	20 93 95 02 	sts	0x0295, r18
    set_tx_empty();
    28a4:	20 91 96 02 	lds	r18, 0x0296
    28a8:	21 60       	ori	r18, 0x01	; 1
    28aa:	20 93 96 02 	sts	0x0296, r18
    set_tx_block();
    28ae:	20 91 96 02 	lds	r18, 0x0296
    28b2:	20 62       	ori	r18, 0x20	; 32
    28b4:	20 93 96 02 	sts	0x0296, r18

    // Set baud rate divisor

    divisor--;                          // UBBR requires divisor - 1
    28b8:	08 94       	sec
    28ba:	a1 08       	sbc	r10, r1
    28bc:	b1 08       	sbc	r11, r1
    UBRR0H = (uint8_t) (divisor >> 8);
    28be:	b0 92 c5 00 	sts	0x00C5, r11
    UBRR0L = (uint8_t) divisor;
    28c2:	a0 92 c4 00 	sts	0x00C4, r10
    //
    // Not really needed, as UART will take over these pins, but
    // ensures that these pins idle at the right state if the UART
    // is disabled.

    TXD_PORT |= BM(TXD_PIN);           // TxD idles high
    28c6:	59 9a       	sbi	0x0b, 1	; 11
    RXD_PORT |= BM(RXD_PIN);           // Enable pullup on RxD pin
    28c8:	58 9a       	sbi	0x0b, 0	; 11
    DDR(TXD_PORT) |= BM(TXD_PIN);
    28ca:	51 9a       	sbi	0x0a, 1	; 10
    DDR(RXD_PORT) &= INVBM(RXD_PIN);
    28cc:	50 98       	cbi	0x0a, 0	; 10
    // Enable transmit & receive

#ifdef UBRRH_UCSRC_SHARED
    UCSR0C = BM(URSEL) | BM(UCSZ01) | BM(UCSZ00);
#else
    UCSR0C = BM(UCSZ01) | BM(UCSZ00);
    28ce:	26 e0       	ldi	r18, 0x06	; 6
    28d0:	20 93 c2 00 	sts	0x00C2, r18
#endif
    UCSR0B = BM(RXEN0) | BM(TXEN0);
    28d4:	28 e1       	ldi	r18, 0x18	; 24
    28d6:	20 93 c1 00 	sts	0x00C1, r18

    // Configure interrupts

    if ((mode == IN_OUT_POLL) || (mode == IN_POLL_OUT_INT))
    28da:	11 23       	and	r17, r17
    28dc:	11 f0       	breq	.+4      	; 0x28e2 <serial_init+0xc6>
    28de:	12 30       	cpi	r17, 0x02	; 2
    28e0:	31 f4       	brne	.+12     	; 0x28ee <serial_init+0xd2>
        set_rx_poll();
    28e2:	20 91 95 02 	lds	r18, 0x0295
    28e6:	20 61       	ori	r18, 0x10	; 16
    28e8:	20 93 95 02 	sts	0x0295, r18
    28ec:	06 c0       	rjmp	.+12     	; 0x28fa <serial_init+0xde>
    else
        rx_int_on();
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	9a 83       	std	Y+2, r25	; 0x02
    28f2:	0e 94 b5 12 	call	0x256a	; 0x256a <rx_int_on>
    28f6:	9a 81       	ldd	r25, Y+2	; 0x02
    28f8:	89 81       	ldd	r24, Y+1	; 0x01

    if ((mode == IN_OUT_POLL) || (mode == IN_INT_OUT_POLL))
    28fa:	12 30       	cpi	r17, 0x02	; 2
    28fc:	28 f4       	brcc	.+10     	; 0x2908 <serial_init+0xec>
        set_tx_poll();
    28fe:	20 91 96 02 	lds	r18, 0x0296
    2902:	20 61       	ori	r18, 0x10	; 16
    2904:	20 93 96 02 	sts	0x0296, r18

    return actual_baud;
}
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	df 91       	pop	r29
    290e:	cf 91       	pop	r28
    2910:	1f 91       	pop	r17
    2912:	ff 90       	pop	r15
    2914:	ef 90       	pop	r14
    2916:	df 90       	pop	r13
    2918:	cf 90       	pop	r12
    291a:	bf 90       	pop	r11
    291c:	af 90       	pop	r10
    291e:	08 95       	ret

00002920 <serial_in>:

Notes:  If input blocking is enabled, will not return until data is available.
*******************************************************************************/

int16_t serial_in(void)
{
    2920:	cf 93       	push	r28
    2922:	df 93       	push	r29
    uint8_t data;

    // Polled mode reception

    if (rx_poll()) {
    2924:	80 91 95 02 	lds	r24, 0x0295
    2928:	84 ff       	sbrs	r24, 4
    292a:	10 c0       	rjmp	.+32     	; 0x294c <serial_in+0x2c>
        if (rx_block()) {
    292c:	80 91 95 02 	lds	r24, 0x0295
    2930:	85 ff       	sbrs	r24, 5
    2932:	05 c0       	rjmp	.+10     	; 0x293e <serial_in+0x1e>
            // Blocking mode - wait for reception
            while (! (UCSR0A & BM(RXC0))) ;
    2934:	80 91 c0 00 	lds	r24, 0x00C0
    2938:	87 ff       	sbrs	r24, 7
    293a:	fc cf       	rjmp	.-8      	; 0x2934 <serial_in+0x14>
    293c:	04 c0       	rjmp	.+8      	; 0x2946 <serial_in+0x26>
            return UDR0;
        }
        else {
            // Non-blocking mode - Return no-data status if nothing received
            if (UCSR0A & BM(RXC0))
    293e:	80 91 c0 00 	lds	r24, 0x00C0
    2942:	87 ff       	sbrs	r24, 7
    2944:	3d c0       	rjmp	.+122    	; 0x29c0 <serial_in+0xa0>
                return UDR0;
    2946:	80 91 c6 00 	lds	r24, 0x00C6
    294a:	38 c0       	rjmp	.+112    	; 0x29bc <serial_in+0x9c>
        }
    }

    // Buffered (interrupt-driven) reception

    if (rx_block()) {
    294c:	80 91 95 02 	lds	r24, 0x0295
    2950:	85 ff       	sbrs	r24, 5
    2952:	05 c0       	rjmp	.+10     	; 0x295e <serial_in+0x3e>
        // Blocking mode - wait for reception
        while (rx_empty()) ;
    2954:	80 91 95 02 	lds	r24, 0x0295
    2958:	80 fd       	sbrc	r24, 0
    295a:	fc cf       	rjmp	.-8      	; 0x2954 <serial_in+0x34>
    295c:	04 c0       	rjmp	.+8      	; 0x2966 <serial_in+0x46>
    }
    else {
        // Non-blocking mode: Return empty status if nothing in receive buffer
        if (rx_empty())
    295e:	80 91 95 02 	lds	r24, 0x0295
    2962:	80 fd       	sbrc	r24, 0
    2964:	2d c0       	rjmp	.+90     	; 0x29c0 <serial_in+0xa0>
            return -1;
    }

    // Disable receive interrupt during buffer/status update

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2966:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2968:	f8 94       	cli
    {
        rx_int_off();
    296a:	0e 94 af 12 	call	0x255e	; 0x255e <rx_int_off>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    296e:	cf bf       	out	0x3f, r28	; 63
    }

    // Get data from receive buffer

    data = rx_buffer[rx_tail++];
    2970:	80 91 97 01 	lds	r24, 0x0197
    2974:	e8 2f       	mov	r30, r24
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	e7 54       	subi	r30, 0x47	; 71
    297a:	fe 4f       	sbci	r31, 0xFE	; 254
    297c:	c0 81       	ld	r28, Z
    297e:	8f 5f       	subi	r24, 0xFF	; 255
    2980:	80 93 97 01 	sts	0x0197, r24

    // Check for tail index wraparound

    if (rx_tail >= RX_BUFSIZE)
    2984:	80 91 97 01 	lds	r24, 0x0197
    2988:	80 31       	cpi	r24, 0x10	; 16
    298a:	10 f0       	brcs	.+4      	; 0x2990 <serial_in+0x70>
        rx_tail = 0;
    298c:	10 92 97 01 	sts	0x0197, r1

    // Set receive buffer empty flag if buffer empty

    clear_rx_full();
    2990:	80 91 95 02 	lds	r24, 0x0295
    2994:	8d 7f       	andi	r24, 0xFD	; 253
    2996:	80 93 95 02 	sts	0x0295, r24
    if (rx_head == rx_tail)
    299a:	90 91 98 01 	lds	r25, 0x0198
    299e:	80 91 97 01 	lds	r24, 0x0197
    29a2:	98 17       	cp	r25, r24
    29a4:	29 f4       	brne	.+10     	; 0x29b0 <serial_in+0x90>
        set_rx_empty();
    29a6:	80 91 95 02 	lds	r24, 0x0295
    29aa:	81 60       	ori	r24, 0x01	; 1
    29ac:	80 93 95 02 	sts	0x0295, r24
    
    // Enable receive interrupt & exit

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    29b0:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    29b2:	f8 94       	cli
    {
        rx_int_on();
    29b4:	0e 94 b5 12 	call	0x256a	; 0x256a <rx_int_on>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    29b8:	df bf       	out	0x3f, r29	; 63
    }

    return data;
    29ba:	8c 2f       	mov	r24, r28
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <serial_in+0xa4>
        while (rx_empty()) ;
    }
    else {
        // Non-blocking mode: Return empty status if nothing in receive buffer
        if (rx_empty())
            return -1;
    29c0:	8f ef       	ldi	r24, 0xFF	; 255
    29c2:	9f ef       	ldi	r25, 0xFF	; 255
    {
        rx_int_on();
    }

    return data;
}
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	08 95       	ret

000029ca <serial_getc>:

int serial_getc(FILE *stream)
{
    // Polled mode reception

    if (rx_poll()) {
    29ca:	80 91 95 02 	lds	r24, 0x0295
    29ce:	84 ff       	sbrs	r24, 4
    29d0:	08 c0       	rjmp	.+16     	; 0x29e2 <serial_getc+0x18>
        if (UCSR0A & BM(RXC0))
    29d2:	80 91 c0 00 	lds	r24, 0x00C0
    29d6:	87 ff       	sbrs	r24, 7
    29d8:	0e c0       	rjmp	.+28     	; 0x29f6 <serial_getc+0x2c>
            return UDR0;
    29da:	80 91 c6 00 	lds	r24, 0x00C6
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	08 95       	ret
            return 0;
    }

    // Buffered (interrupt-driven) reception

    if (rx_empty())
    29e2:	80 91 95 02 	lds	r24, 0x0295
    29e6:	80 fd       	sbrc	r24, 0
    29e8:	03 c0       	rjmp	.+6      	; 0x29f0 <serial_getc+0x26>
        return 0;
    else
        return serial_in();
    29ea:	0e 94 90 14 	call	0x2920	; 0x2920 <serial_in>
    29ee:	08 95       	ret
    }

    // Buffered (interrupt-driven) reception

    if (rx_empty())
        return 0;
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	08 95       	ret

    if (rx_poll()) {
        if (UCSR0A & BM(RXC0))
            return UDR0;
        else
            return 0;
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	90 e0       	ldi	r25, 0x00	; 0

    if (rx_empty())
        return 0;
    else
        return serial_in();
}
    29fa:	08 95       	ret

000029fc <serial_out>:
        When blocking is disabled, data will be discared if it cannot be queued
        or sent.
*******************************************************************************/

void serial_out(uint8_t data)
{
    29fc:	1f 93       	push	r17
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	0f 92       	push	r0
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    // Polled mode transmission

    if (tx_poll()) {
    2a08:	90 91 96 02 	lds	r25, 0x0296
    2a0c:	94 ff       	sbrs	r25, 4
    2a0e:	10 c0       	rjmp	.+32     	; 0x2a30 <serial_out+0x34>
        if (tx_block()) {
    2a10:	90 91 96 02 	lds	r25, 0x0296
    2a14:	95 ff       	sbrs	r25, 5
    2a16:	05 c0       	rjmp	.+10     	; 0x2a22 <serial_out+0x26>
            // Blocking mode - wait for data reg to become empty
            while (! (UCSR0A & BM(UDRE0))) ;
    2a18:	90 91 c0 00 	lds	r25, 0x00C0
    2a1c:	95 ff       	sbrs	r25, 5
    2a1e:	fc cf       	rjmp	.-8      	; 0x2a18 <serial_out+0x1c>
    2a20:	04 c0       	rjmp	.+8      	; 0x2a2a <serial_out+0x2e>
        }
        else {
            // Non-blocking mode - discard data if data reg not empty
            if (! (UCSR0A & BM(UDRE0)))
    2a22:	90 91 c0 00 	lds	r25, 0x00C0
    2a26:	95 ff       	sbrs	r25, 5
    2a28:	3c c0       	rjmp	.+120    	; 0x2aa2 <serial_out+0xa6>
                return;
        }                    
        UDR0 = data;
    2a2a:	80 93 c6 00 	sts	0x00C6, r24
        return;
    2a2e:	39 c0       	rjmp	.+114    	; 0x2aa2 <serial_out+0xa6>
    }

    // Buffered (interrupt-driven) transmission

    if (tx_block()) {
    2a30:	90 91 96 02 	lds	r25, 0x0296
    2a34:	95 ff       	sbrs	r25, 5
    2a36:	05 c0       	rjmp	.+10     	; 0x2a42 <serial_out+0x46>
        // Blocking mode - wait for transmit buffer space
        while (tx_full()) ;
    2a38:	90 91 96 02 	lds	r25, 0x0296
    2a3c:	91 fd       	sbrc	r25, 1
    2a3e:	fc cf       	rjmp	.-8      	; 0x2a38 <serial_out+0x3c>
    2a40:	04 c0       	rjmp	.+8      	; 0x2a4a <serial_out+0x4e>
    }
    else {
        // Non-blocking mode - exit if no transmit buffer space
        if (tx_full())
    2a42:	90 91 96 02 	lds	r25, 0x0296
    2a46:	91 fd       	sbrc	r25, 1
    2a48:	2c c0       	rjmp	.+88     	; 0x2aa2 <serial_out+0xa6>
            return;
    }

    // Disable transmit interrupt during buffer/status update

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2a4a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a4c:	f8 94       	cli
    {
        tx_int_off();
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	0e 94 bb 12 	call	0x2576	; 0x2576 <tx_int_off>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a54:	1f bf       	out	0x3f, r17	; 63
    }

    // Put data in transmit buffer
    
    tx_buffer[tx_head++] = data;
    2a56:	90 91 97 02 	lds	r25, 0x0297
    2a5a:	e9 2f       	mov	r30, r25
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	e7 56       	subi	r30, 0x67	; 103
    2a60:	fe 4f       	sbci	r31, 0xFE	; 254
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	80 83       	st	Z, r24
    2a66:	9f 5f       	subi	r25, 0xFF	; 255
    2a68:	90 93 97 02 	sts	0x0297, r25

    // Check for head index wraparound

    if (tx_head >= TX_BUFSIZE)
    2a6c:	80 91 97 02 	lds	r24, 0x0297
    2a70:	80 32       	cpi	r24, 0x20	; 32
    2a72:	10 f0       	brcs	.+4      	; 0x2a78 <serial_out+0x7c>
        tx_head = 0;
    2a74:	10 92 97 02 	sts	0x0297, r1

    // Set transmit buffer full flag if buffer full

    clear_tx_empty();
    2a78:	80 91 96 02 	lds	r24, 0x0296
    2a7c:	8e 7f       	andi	r24, 0xFE	; 254
    2a7e:	80 93 96 02 	sts	0x0296, r24
    if (tx_head == tx_tail)
    2a82:	90 91 97 02 	lds	r25, 0x0297
    2a86:	80 91 98 02 	lds	r24, 0x0298
    2a8a:	98 17       	cp	r25, r24
    2a8c:	29 f4       	brne	.+10     	; 0x2a98 <serial_out+0x9c>
        set_tx_full();
    2a8e:	80 91 96 02 	lds	r24, 0x0296
    2a92:	82 60       	ori	r24, 0x02	; 2
    2a94:	80 93 96 02 	sts	0x0296, r24

    // Enable transmit interrupt & exit

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2a98:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a9a:	f8 94       	cli
    {
        tx_int_on();
    2a9c:	0e 94 c1 12 	call	0x2582	; 0x2582 <tx_int_on>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2aa0:	1f bf       	out	0x3f, r17	; 63
    }
}
    2aa2:	0f 90       	pop	r0
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	1f 91       	pop	r17
    2aaa:	08 95       	ret

00002aac <serial_putc>:
        Per stdio convention, serial_putc() ALWAYS blocks, even if the
        tx_blocking flag is not set.
*******************************************************************************/

int serial_putc(char ch, FILE *stream)
{
    2aac:	cf 93       	push	r28
    2aae:	c8 2f       	mov	r28, r24
    // Send CR/LF if auto-newline enabled

    if ((ch == '\n') && auto_newline())
    2ab0:	8a 30       	cpi	r24, 0x0A	; 10
    2ab2:	39 f4       	brne	.+14     	; 0x2ac2 <serial_putc+0x16>
    2ab4:	80 91 96 02 	lds	r24, 0x0296
    2ab8:	80 34       	cpi	r24, 0x40	; 64
    2aba:	19 f0       	breq	.+6      	; 0x2ac2 <serial_putc+0x16>
        serial_putc('\r', stream);
    2abc:	8d e0       	ldi	r24, 0x0D	; 13
    2abe:	0e 94 56 15 	call	0x2aac	; 0x2aac <serial_putc>

    // Polled mode transmission

    if (tx_poll()) {
    2ac2:	80 91 96 02 	lds	r24, 0x0296
    2ac6:	84 ff       	sbrs	r24, 4
    2ac8:	07 c0       	rjmp	.+14     	; 0x2ad8 <serial_putc+0x2c>
        while (! (UCSR0A & BM(UDRE0))) ;
    2aca:	80 91 c0 00 	lds	r24, 0x00C0
    2ace:	85 ff       	sbrs	r24, 5
    2ad0:	fc cf       	rjmp	.-8      	; 0x2aca <serial_putc+0x1e>
        UDR0 = ch;
    2ad2:	c0 93 c6 00 	sts	0x00C6, r28
        return 0;
    2ad6:	07 c0       	rjmp	.+14     	; 0x2ae6 <serial_putc+0x3a>
    }

    // Interrupt-driven transmission
    // Check for free buffer space (ignore blocking flag)

    while (tx_full()) ;
    2ad8:	80 91 96 02 	lds	r24, 0x0296
    2adc:	81 fd       	sbrc	r24, 1
    2ade:	fc cf       	rjmp	.-8      	; 0x2ad8 <serial_putc+0x2c>

    serial_out(ch);
    2ae0:	8c 2f       	mov	r24, r28
    2ae2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <serial_out>

    return 0;
}
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	cf 91       	pop	r28
    2aec:	08 95       	ret

00002aee <serial_putc_auto_newline>:
        output routine (serial_out()) ignores this setting.
*******************************************************************************/

void serial_putc_auto_newline(uint8_t mode)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2aee:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2af0:	f8 94       	cli
    {
        if (mode)
    2af2:	88 23       	and	r24, r24
    2af4:	21 f0       	breq	.+8      	; 0x2afe <serial_putc_auto_newline+0x10>
            set_auto_newline();
    2af6:	80 91 96 02 	lds	r24, 0x0296
    2afa:	80 64       	ori	r24, 0x40	; 64
    2afc:	03 c0       	rjmp	.+6      	; 0x2b04 <serial_putc_auto_newline+0x16>
        else
            clear_auto_newline();
    2afe:	80 91 96 02 	lds	r24, 0x0296
    2b02:	8f 7b       	andi	r24, 0xBF	; 191
    2b04:	80 93 96 02 	sts	0x0296, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b08:	9f bf       	out	0x3f, r25	; 63
    }
}
    2b0a:	08 95       	ret

00002b0c <serial_crlf>:
Return: (none)
*******************************************************************************/

void serial_crlf(void)
{
    serial_out('\r');
    2b0c:	8d e0       	ldi	r24, 0x0D	; 13
    2b0e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <serial_out>
    serial_out('\n');
    2b12:	8a e0       	ldi	r24, 0x0A	; 10
    2b14:	0e 94 fe 14 	call	0x29fc	; 0x29fc <serial_out>
}
    2b18:	08 95       	ret

00002b1a <serial_hex1>:
Return: (none)
*******************************************************************************/

void serial_hex1(uint8_t digit)
{
    digit &= 0x0F;
    2b1a:	8f 70       	andi	r24, 0x0F	; 15
    if (digit < 10)
    2b1c:	8a 30       	cpi	r24, 0x0A	; 10
    2b1e:	10 f4       	brcc	.+4      	; 0x2b24 <serial_hex1+0xa>
        digit += '0';
    2b20:	80 5d       	subi	r24, 0xD0	; 208
    2b22:	01 c0       	rjmp	.+2      	; 0x2b26 <serial_hex1+0xc>
    else
        digit += 'A' - 10;
    2b24:	89 5c       	subi	r24, 0xC9	; 201
    serial_out(digit);
    2b26:	0e 94 fe 14 	call	0x29fc	; 0x29fc <serial_out>
}
    2b2a:	08 95       	ret

00002b2c <serial_hex2>:

Return: (none)
*******************************************************************************/

void serial_hex2(uint8_t value)
{
    2b2c:	cf 93       	push	r28
    2b2e:	c8 2f       	mov	r28, r24
    serial_hex1(value >> 4);
    2b30:	82 95       	swap	r24
    2b32:	8f 70       	andi	r24, 0x0F	; 15
    2b34:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <serial_hex1>
    serial_hex1(value);
    2b38:	8c 2f       	mov	r24, r28
    2b3a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <serial_hex1>
}
    2b3e:	cf 91       	pop	r28
    2b40:	08 95       	ret

00002b42 <serial_binary>:

Return: (none)
*******************************************************************************/

void serial_binary(uint8_t value)
{
    2b42:	1f 93       	push	r17
    2b44:	cf 93       	push	r28
    2b46:	df 93       	push	r29
    2b48:	d8 2f       	mov	r29, r24
    2b4a:	c8 e0       	ldi	r28, 0x08	; 8
    uint8_t digit;

    for (digit = 8; digit; digit--) {
        serial_out((value & 0x80) ? '1' : '0');
    2b4c:	11 e3       	ldi	r17, 0x31	; 49
    2b4e:	8d 2f       	mov	r24, r29
    2b50:	80 95       	com	r24
    2b52:	88 1f       	adc	r24, r24
    2b54:	88 27       	eor	r24, r24
    2b56:	88 1f       	adc	r24, r24
    2b58:	91 2f       	mov	r25, r17
    2b5a:	98 1b       	sub	r25, r24
    2b5c:	89 2f       	mov	r24, r25
    2b5e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <serial_out>
        value <<= 1;
    2b62:	dd 0f       	add	r29, r29
    2b64:	c1 50       	subi	r28, 0x01	; 1

void serial_binary(uint8_t value)
{
    uint8_t digit;

    for (digit = 8; digit; digit--) {
    2b66:	99 f7       	brne	.-26     	; 0x2b4e <serial_binary+0xc>
        serial_out((value & 0x80) ? '1' : '0');
        value <<= 1;
    }
}
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	1f 91       	pop	r17
    2b6e:	08 95       	ret

00002b70 <serial_puts>:

Return: (none)
*******************************************************************************/

void serial_puts(const char *s)
{
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	ec 01       	movw	r28, r24
    char ch;

    do {
        ch = *s++;
    2b76:	89 91       	ld	r24, Y+
        if (! ch) break;
    2b78:	88 23       	and	r24, r24
    2b7a:	19 f0       	breq	.+6      	; 0x2b82 <serial_puts+0x12>
        serial_out(ch);
    2b7c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <serial_out>
    } while (1);
    2b80:	fa cf       	rjmp	.-12     	; 0x2b76 <serial_puts+0x6>
}
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	08 95       	ret

00002b88 <serial_puts_P>:

Return: (none)
*******************************************************************************/

void serial_puts_P(const char *s)
{
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	ec 01       	movw	r28, r24
    char ch;

    do {
        ch = pgm_read_byte(s++);
    2b8e:	fe 01       	movw	r30, r28
    2b90:	21 96       	adiw	r28, 0x01	; 1
    2b92:	84 91       	lpm	r24, Z
        if (! ch) break;
    2b94:	88 23       	and	r24, r24
    2b96:	19 f0       	breq	.+6      	; 0x2b9e <serial_puts_P+0x16>
        serial_out(ch);
    2b98:	0e 94 fe 14 	call	0x29fc	; 0x29fc <serial_out>
    } while (1);
    2b9c:	f8 cf       	rjmp	.-16     	; 0x2b8e <serial_puts_P+0x6>
}
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	08 95       	ret

00002ba4 <__vector_18>:
#ifdef USART_RX_vect
ISR(USART_RX_vect, ISR_BLOCK)
#else
ISR(USART_RXC_vect, ISR_BLOCK)
#endif
{
    2ba4:	1f 92       	push	r1
    2ba6:	0f 92       	push	r0
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	0f 92       	push	r0
    2bac:	11 24       	eor	r1, r1
    2bae:	2f 93       	push	r18
    2bb0:	3f 93       	push	r19
    2bb2:	4f 93       	push	r20
    2bb4:	5f 93       	push	r21
    2bb6:	6f 93       	push	r22
    2bb8:	7f 93       	push	r23
    2bba:	8f 93       	push	r24
    2bbc:	9f 93       	push	r25
    2bbe:	af 93       	push	r26
    2bc0:	bf 93       	push	r27
    2bc2:	ef 93       	push	r30
    2bc4:	ff 93       	push	r31
    static uint8_t data;

    // Get interrupts enabled ASAP

    rx_int_off();
    2bc6:	0e 94 af 12 	call	0x255e	; 0x255e <rx_int_off>
    sei();
    2bca:	78 94       	sei
    data = UDR0;
    2bcc:	90 91 c6 00 	lds	r25, 0x00C6
    2bd0:	90 93 c9 01 	sts	0x01C9, r25

    // Do not queue data if buffer full

    if (! rx_full()) {
    2bd4:	80 91 95 02 	lds	r24, 0x0295
    2bd8:	81 fd       	sbrc	r24, 1
    2bda:	24 c0       	rjmp	.+72     	; 0x2c24 <__vector_18+0x80>

        // Place received data in buffer

        rx_buffer[rx_head++] = data;
    2bdc:	80 91 98 01 	lds	r24, 0x0198
    2be0:	e8 2f       	mov	r30, r24
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	e7 54       	subi	r30, 0x47	; 71
    2be6:	fe 4f       	sbci	r31, 0xFE	; 254
    2be8:	90 83       	st	Z, r25
    2bea:	8f 5f       	subi	r24, 0xFF	; 255
    2bec:	80 93 98 01 	sts	0x0198, r24

        // Check for head index wraparound

        if (rx_head >= RX_BUFSIZE)
    2bf0:	80 91 98 01 	lds	r24, 0x0198
    2bf4:	80 31       	cpi	r24, 0x10	; 16
    2bf6:	10 f0       	brcs	.+4      	; 0x2bfc <__vector_18+0x58>
            rx_head = 0;
    2bf8:	10 92 98 01 	sts	0x0198, r1

        // Set receive buffer full flag if buffer full
        // Do not enable receive interrupt if buffer is full

        clear_rx_empty();
    2bfc:	80 91 95 02 	lds	r24, 0x0295
    2c00:	8e 7f       	andi	r24, 0xFE	; 254
    2c02:	80 93 95 02 	sts	0x0295, r24
        if (rx_head == rx_tail)
    2c06:	90 91 98 01 	lds	r25, 0x0198
    2c0a:	80 91 97 01 	lds	r24, 0x0197
    2c0e:	98 17       	cp	r25, r24
    2c10:	31 f4       	brne	.+12     	; 0x2c1e <__vector_18+0x7a>
            set_rx_full();
    2c12:	80 91 95 02 	lds	r24, 0x0295
    2c16:	82 60       	ori	r24, 0x02	; 2
    2c18:	80 93 95 02 	sts	0x0295, r24
    2c1c:	03 c0       	rjmp	.+6      	; 0x2c24 <__vector_18+0x80>
        else {
            cli();
    2c1e:	f8 94       	cli
            rx_int_on();
    2c20:	0e 94 b5 12 	call	0x256a	; 0x256a <rx_int_on>
        }
    }
}
    2c24:	ff 91       	pop	r31
    2c26:	ef 91       	pop	r30
    2c28:	bf 91       	pop	r27
    2c2a:	af 91       	pop	r26
    2c2c:	9f 91       	pop	r25
    2c2e:	8f 91       	pop	r24
    2c30:	7f 91       	pop	r23
    2c32:	6f 91       	pop	r22
    2c34:	5f 91       	pop	r21
    2c36:	4f 91       	pop	r20
    2c38:	3f 91       	pop	r19
    2c3a:	2f 91       	pop	r18
    2c3c:	0f 90       	pop	r0
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	0f 90       	pop	r0
    2c42:	1f 90       	pop	r1
    2c44:	18 95       	reti

00002c46 <__vector_19>:
// enable (UIDRE0) is turned off.  Thus, the interrupt is declared in BLOCKing
// mode and the entry code masks the TDRE interrupt and performs a SEI as soon
// as it can do so safely.

ISR(USART_UDRE_vect, ISR_BLOCK)
{
    2c46:	1f 92       	push	r1
    2c48:	0f 92       	push	r0
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	0f 92       	push	r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	2f 93       	push	r18
    2c52:	3f 93       	push	r19
    2c54:	4f 93       	push	r20
    2c56:	5f 93       	push	r21
    2c58:	6f 93       	push	r22
    2c5a:	7f 93       	push	r23
    2c5c:	8f 93       	push	r24
    2c5e:	9f 93       	push	r25
    2c60:	af 93       	push	r26
    2c62:	bf 93       	push	r27
    2c64:	ef 93       	push	r30
    2c66:	ff 93       	push	r31
    // Get interrupts enabled ASAP

    tx_int_off();
    2c68:	0e 94 bb 12 	call	0x2576	; 0x2576 <tx_int_off>
    sei();
    2c6c:	78 94       	sei

    // Do not transmit new data if buffer is empty

    if (! tx_empty()) {
    2c6e:	80 91 96 02 	lds	r24, 0x0296
    2c72:	80 fd       	sbrc	r24, 0
    2c74:	26 c0       	rjmp	.+76     	; 0x2cc2 <__vector_19+0x7c>

        // Transmit next byte in buffer

        UDR0 = tx_buffer[tx_tail++];
    2c76:	80 91 98 02 	lds	r24, 0x0298
    2c7a:	e8 2f       	mov	r30, r24
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	e7 56       	subi	r30, 0x67	; 103
    2c80:	fe 4f       	sbci	r31, 0xFE	; 254
    2c82:	90 81       	ld	r25, Z
    2c84:	90 93 c6 00 	sts	0x00C6, r25
    2c88:	8f 5f       	subi	r24, 0xFF	; 255
    2c8a:	80 93 98 02 	sts	0x0298, r24
        
        // Check for tail index wraparound

        if (tx_tail >= TX_BUFSIZE)
    2c8e:	80 91 98 02 	lds	r24, 0x0298
    2c92:	80 32       	cpi	r24, 0x20	; 32
    2c94:	10 f0       	brcs	.+4      	; 0x2c9a <__vector_19+0x54>
            tx_tail = 0;
    2c96:	10 92 98 02 	sts	0x0298, r1

        // Set transmit buffer empty flag if buffer empty
        // Do not re-enable transmit interrupt if the buffer is empty

        clear_tx_full();
    2c9a:	80 91 96 02 	lds	r24, 0x0296
    2c9e:	8d 7f       	andi	r24, 0xFD	; 253
    2ca0:	80 93 96 02 	sts	0x0296, r24
        if (tx_head == tx_tail)
    2ca4:	90 91 97 02 	lds	r25, 0x0297
    2ca8:	80 91 98 02 	lds	r24, 0x0298
    2cac:	98 17       	cp	r25, r24
    2cae:	31 f4       	brne	.+12     	; 0x2cbc <__vector_19+0x76>
            set_tx_empty();
    2cb0:	80 91 96 02 	lds	r24, 0x0296
    2cb4:	81 60       	ori	r24, 0x01	; 1
    2cb6:	80 93 96 02 	sts	0x0296, r24
    2cba:	03 c0       	rjmp	.+6      	; 0x2cc2 <__vector_19+0x7c>
        else {
            cli();
    2cbc:	f8 94       	cli
            tx_int_on();
    2cbe:	0e 94 c1 12 	call	0x2582	; 0x2582 <tx_int_on>
        }
    }            
}
    2cc2:	ff 91       	pop	r31
    2cc4:	ef 91       	pop	r30
    2cc6:	bf 91       	pop	r27
    2cc8:	af 91       	pop	r26
    2cca:	9f 91       	pop	r25
    2ccc:	8f 91       	pop	r24
    2cce:	7f 91       	pop	r23
    2cd0:	6f 91       	pop	r22
    2cd2:	5f 91       	pop	r21
    2cd4:	4f 91       	pop	r20
    2cd6:	3f 91       	pop	r19
    2cd8:	2f 91       	pop	r18
    2cda:	0f 90       	pop	r0
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	0f 90       	pop	r0
    2ce0:	1f 90       	pop	r1
    2ce2:	18 95       	reti

00002ce4 <spi_init>:
void spi_init(void)
{
    // Configure SPI subsystem
    // Master mode, SPI mode 2, LSbit sent first

    SPCR = BM(SPE) | BM(MSTR) | BM(CPOL) | BM(DORD);
    2ce4:	88 e7       	ldi	r24, 0x78	; 120
    2ce6:	8c bd       	out	0x2c, r24	; 44
    SPSR = BM(WCOL);
    2ce8:	80 e4       	ldi	r24, 0x40	; 64
    2cea:	8d bd       	out	0x2d, r24	; 45
    SPDR = 0;
    2cec:	1e bc       	out	0x2e, r1	; 46

    // Configure port pin direction for SPI (nixie driver) control pins

    DDR(DRIVER_DATA_PORT) |= BM(DRIVER_DATA_PIN);
    2cee:	23 9a       	sbi	0x04, 3	; 4
    DDR(DRIVER_CLOCK_PORT) |= BM(DRIVER_CLOCK_PIN);
    2cf0:	25 9a       	sbi	0x04, 5	; 4
    DDR(DRIVER_LATCH_PORT) |= BM(DRIVER_LATCH_PIN);
    2cf2:	22 9a       	sbi	0x04, 2	; 4
    DDR(DRIVER_ENABLE_PORT) |= BM(DRIVER_ENABLE_PIN);
    2cf4:	38 9a       	sbi	0x07, 0	; 7

    // Set initial level for latch-enable and output-enable pins

    BCLR(DRIVER_LATCH);
    2cf6:	2a 98       	cbi	0x05, 2	; 5
    BSET(DRIVER_ENABLE);
    2cf8:	40 9a       	sbi	0x08, 0	; 8
}
    2cfa:	08 95       	ret

00002cfc <spi_data_out>:
/******************************************************************************
 *
 ******************************************************************************/

void spi_data_out(void *data, uint8_t size)
{
    2cfc:	fc 01       	movw	r30, r24
    // Send data block

    while (size) {
    2cfe:	06 c0       	rjmp	.+12     	; 0x2d0c <spi_data_out+0x10>
        SPDR = *((uint8_t *) data++);
    2d00:	81 91       	ld	r24, Z+
    2d02:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & BM(SPIF)));
    2d04:	0d b4       	in	r0, 0x2d	; 45
    2d06:	07 fe       	sbrs	r0, 7
    2d08:	fd cf       	rjmp	.-6      	; 0x2d04 <spi_data_out+0x8>
        size--;
    2d0a:	61 50       	subi	r22, 0x01	; 1

void spi_data_out(void *data, uint8_t size)
{
    // Send data block

    while (size) {
    2d0c:	66 23       	and	r22, r22
    2d0e:	c1 f7       	brne	.-16     	; 0x2d00 <spi_data_out+0x4>
        size--;
    }

    // Pulse latch-data pin

    BSET(DRIVER_LATCH);
    2d10:	2a 9a       	sbi	0x05, 2	; 5
    BCLR(DRIVER_LATCH);
    2d12:	2a 98       	cbi	0x05, 2	; 5
}
    2d14:	08 95       	ret

00002d16 <timer_init>:
 *
 ******************************************************************************/

void timer_init(void)
{
    TCCR0B = 0;                         // Stop timer during init
    2d16:	15 bc       	out	0x25, r1	; 37

    TCCR0A = BM(WGM01);                 // OC0x pins disabled, CTC mode (WGM02..0 = 010)
    2d18:	82 e0       	ldi	r24, 0x02	; 2
    2d1a:	84 bd       	out	0x24, r24	; 36
    TCNT0 = 0;                          // Reset timer counter
    2d1c:	16 bc       	out	0x26, r1	; 38
    OCR0A = TIMER0_PERIOD_TICKS - 1;    // 625x/sec interval when prescaler = f/256 w/16MHz clock
    2d1e:	93 e6       	ldi	r25, 0x63	; 99
    2d20:	97 bd       	out	0x27, r25	; 39
    OCR0B = 0;                          // Set some known value in OCR0B (not used)
    2d22:	18 bc       	out	0x28, r1	; 40
    TIMSK0 = BM(OCIE0A);                // Enable output compare A interrupt
    2d24:	80 93 6e 00 	sts	0x006E, r24
    TIFR0 = BM(OCF0B) | BM(OCF0A) | BM(TOV0); // Clear all timer interrupt flags
    2d28:	87 e0       	ldi	r24, 0x07	; 7
    2d2a:	85 bb       	out	0x15, r24	; 21

    seconds_prescaler = TIMER0_FREQUENCY;
    2d2c:	81 e7       	ldi	r24, 0x71	; 113
    2d2e:	92 e0       	ldi	r25, 0x02	; 2
    2d30:	90 93 dc 01 	sts	0x01DC, r25
    2d34:	80 93 db 01 	sts	0x01DB, r24

    TCCR0B = TIMER0_PRESCALER_BITS;     // Select f/256 prescaler, start counter
    2d38:	84 e0       	ldi	r24, 0x04	; 4
    2d3a:	85 bd       	out	0x25, r24	; 37
}
    2d3c:	08 95       	ret

00002d3e <timer_start>:
/******************************************************************************
 *
 ******************************************************************************/

uint8_t timer_start(uint16_t period, uint8_t recurring)
{
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	8c 01       	movw	r16, r24
            }
            return timer_id;
        }
    }

    return -1;
    2d48:	ed ed       	ldi	r30, 0xDD	; 221
    2d4a:	f1 e0       	ldi	r31, 0x01	; 1
/******************************************************************************
 *
 ******************************************************************************/

uint8_t timer_start(uint16_t period, uint8_t recurring)
{
    2d4c:	40 e0       	ldi	r20, 0x00	; 0
    2d4e:	50 e0       	ldi	r21, 0x00	; 0
            }
            return timer_id;
        }
    }

    return -1;
    2d50:	84 2f       	mov	r24, r20
{
    uint8_t timer_id;
    uint16_t count;

    for (timer_id = 0; timer_id < NUM_EVENT_TIMERS; timer_id++) {
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2d52:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d54:	f8 94       	cli
        {
            count = timer_count[timer_id];
    2d56:	ea 01       	movw	r28, r20
    2d58:	cc 0f       	add	r28, r28
    2d5a:	dd 1f       	adc	r29, r29
    2d5c:	de 01       	movw	r26, r28
    2d5e:	a5 53       	subi	r26, 0x35	; 53
    2d60:	be 4f       	sbci	r27, 0xFE	; 254
    2d62:	2d 91       	ld	r18, X+
    2d64:	3c 91       	ld	r19, X
    2d66:	11 97       	sbiw	r26, 0x01	; 1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d68:	9f bf       	out	0x3f, r25	; 63
        }
        if (!count && !timer_period[timer_id]) {
    2d6a:	21 15       	cp	r18, r1
    2d6c:	31 05       	cpc	r19, r1
    2d6e:	f9 f4       	brne	.+62     	; 0x2dae <timer_start+0x70>
    2d70:	20 81       	ld	r18, Z
    2d72:	31 81       	ldd	r19, Z+1	; 0x01
    2d74:	21 15       	cp	r18, r1
    2d76:	31 05       	cpc	r19, r1
    2d78:	d1 f4       	brne	.+52     	; 0x2dae <timer_start+0x70>
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2d7a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d7c:	f8 94       	cli
            {
                timer_count[timer_id] = period;
    2d7e:	11 96       	adiw	r26, 0x01	; 1
    2d80:	1c 93       	st	X, r17
    2d82:	0e 93       	st	-X, r16
                if (recurring) {
    2d84:	66 23       	and	r22, r22
    2d86:	21 f0       	breq	.+8      	; 0x2d90 <timer_start+0x52>
                    timer_period[timer_id] = period;
    2d88:	c3 52       	subi	r28, 0x23	; 35
    2d8a:	de 4f       	sbci	r29, 0xFE	; 254
    2d8c:	19 83       	std	Y+1, r17	; 0x01
    2d8e:	08 83       	st	Y, r16
                }
                timer_flag &= (uint8_t) ~(1 << timer_id);
    2d90:	50 91 ca 01 	lds	r21, 0x01CA
    2d94:	21 e0       	ldi	r18, 0x01	; 1
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	02 c0       	rjmp	.+4      	; 0x2d9e <timer_start+0x60>
    2d9a:	22 0f       	add	r18, r18
    2d9c:	33 1f       	adc	r19, r19
    2d9e:	4a 95       	dec	r20
    2da0:	e2 f7       	brpl	.-8      	; 0x2d9a <timer_start+0x5c>
    2da2:	20 95       	com	r18
    2da4:	25 23       	and	r18, r21
    2da6:	20 93 ca 01 	sts	0x01CA, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2daa:	9f bf       	out	0x3f, r25	; 63
            }
            return timer_id;
    2dac:	07 c0       	rjmp	.+14     	; 0x2dbc <timer_start+0x7e>
    2dae:	4f 5f       	subi	r20, 0xFF	; 255
    2db0:	5f 4f       	sbci	r21, 0xFF	; 255
    2db2:	32 96       	adiw	r30, 0x02	; 2
uint8_t timer_start(uint16_t period, uint8_t recurring)
{
    uint8_t timer_id;
    uint16_t count;

    for (timer_id = 0; timer_id < NUM_EVENT_TIMERS; timer_id++) {
    2db4:	48 30       	cpi	r20, 0x08	; 8
    2db6:	51 05       	cpc	r21, r1
    2db8:	59 f6       	brne	.-106    	; 0x2d50 <timer_start+0x12>
            }
            return timer_id;
        }
    }

    return -1;
    2dba:	8f ef       	ldi	r24, 0xFF	; 255
}
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	1f 91       	pop	r17
    2dc2:	0f 91       	pop	r16
    2dc4:	08 95       	ret

00002dc6 <timer_stop>:
 *
 ******************************************************************************/

void timer_stop(uint8_t timer_id)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2dc6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2dc8:	f8 94       	cli
    {
        timer_count[timer_id] = 0;
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	88 0f       	add	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	e5 53       	subi	r30, 0x35	; 53
    2dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd6:	11 82       	std	Z+1, r1	; 0x01
    2dd8:	10 82       	st	Z, r1
        timer_period[timer_id] = 0;
    2dda:	83 52       	subi	r24, 0x23	; 35
    2ddc:	9e 4f       	sbci	r25, 0xFE	; 254
    2dde:	fc 01       	movw	r30, r24
    2de0:	11 82       	std	Z+1, r1	; 0x01
    2de2:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2de4:	2f bf       	out	0x3f, r18	; 63
    }
}
    2de6:	08 95       	ret

00002de8 <timer_restart>:
 *
 ******************************************************************************/

void timer_restart(uint8_t timer_id, uint16_t period, uint8_t recurring)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2de8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2dea:	f8 94       	cli
    {
        timer_count[timer_id] = period;
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	22 0f       	add	r18, r18
    2df2:	33 1f       	adc	r19, r19
    2df4:	f9 01       	movw	r30, r18
    2df6:	e5 53       	subi	r30, 0x35	; 53
    2df8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dfa:	71 83       	std	Z+1, r23	; 0x01
    2dfc:	60 83       	st	Z, r22
        if (recurring) {
    2dfe:	44 23       	and	r20, r20
    2e00:	29 f0       	breq	.+10     	; 0x2e0c <timer_restart+0x24>
            timer_period[timer_id] = period;
    2e02:	23 52       	subi	r18, 0x23	; 35
    2e04:	3e 4f       	sbci	r19, 0xFE	; 254
    2e06:	f9 01       	movw	r30, r18
    2e08:	71 83       	std	Z+1, r23	; 0x01
    2e0a:	60 83       	st	Z, r22
        }
        timer_flag &= (uint8_t) ~(1 << timer_id);
    2e0c:	40 91 ca 01 	lds	r20, 0x01CA
    2e10:	21 e0       	ldi	r18, 0x01	; 1
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	02 c0       	rjmp	.+4      	; 0x2e1a <timer_restart+0x32>
    2e16:	22 0f       	add	r18, r18
    2e18:	33 1f       	adc	r19, r19
    2e1a:	8a 95       	dec	r24
    2e1c:	e2 f7       	brpl	.-8      	; 0x2e16 <timer_restart+0x2e>
    2e1e:	20 95       	com	r18
    2e20:	24 23       	and	r18, r20
    2e22:	20 93 ca 01 	sts	0x01CA, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e26:	9f bf       	out	0x3f, r25	; 63
    }
}
    2e28:	08 95       	ret

00002e2a <timer_reset>:
 *
 ******************************************************************************/

void timer_reset(uint8_t timer_id)
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2e2a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e2c:	f8 94       	cli
    {
        timer_count[timer_id] = timer_period[timer_id];
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	22 0f       	add	r18, r18
    2e34:	33 1f       	adc	r19, r19
    2e36:	f9 01       	movw	r30, r18
    2e38:	e3 52       	subi	r30, 0x23	; 35
    2e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e3c:	40 81       	ld	r20, Z
    2e3e:	51 81       	ldd	r21, Z+1	; 0x01
    2e40:	25 53       	subi	r18, 0x35	; 53
    2e42:	3e 4f       	sbci	r19, 0xFE	; 254
    2e44:	f9 01       	movw	r30, r18
    2e46:	51 83       	std	Z+1, r21	; 0x01
    2e48:	40 83       	st	Z, r20
        timer_flag &= (uint8_t) ~(1 << timer_id);
    2e4a:	40 91 ca 01 	lds	r20, 0x01CA
    2e4e:	21 e0       	ldi	r18, 0x01	; 1
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	02 c0       	rjmp	.+4      	; 0x2e58 <timer_reset+0x2e>
    2e54:	22 0f       	add	r18, r18
    2e56:	33 1f       	adc	r19, r19
    2e58:	8a 95       	dec	r24
    2e5a:	e2 f7       	brpl	.-8      	; 0x2e54 <timer_reset+0x2a>
    2e5c:	20 95       	com	r18
    2e5e:	24 23       	and	r18, r20
    2e60:	20 93 ca 01 	sts	0x01CA, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e64:	9f bf       	out	0x3f, r25	; 63
    }
}
    2e66:	08 95       	ret

00002e68 <timer_read>:

uint16_t timer_read(uint8_t timer_id)
{
    uint16_t count;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2e68:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e6a:	f8 94       	cli
    {
        count = timer_count[timer_id];
    2e6c:	e8 2f       	mov	r30, r24
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	ee 0f       	add	r30, r30
    2e72:	ff 1f       	adc	r31, r31
    2e74:	e5 53       	subi	r30, 0x35	; 53
    2e76:	fe 4f       	sbci	r31, 0xFE	; 254
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e7c:	2f bf       	out	0x3f, r18	; 63
    }

    return count;
}
    2e7e:	08 95       	ret

00002e80 <timer_expired>:

uint8_t timer_expired(uint8_t timer_id, uint8_t reset)
{
    uint8_t flag;

    flag = 1 << timer_id;
    2e80:	21 e0       	ldi	r18, 0x01	; 1
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	02 c0       	rjmp	.+4      	; 0x2e8a <timer_expired+0xa>
    2e86:	22 0f       	add	r18, r18
    2e88:	33 1f       	adc	r19, r19
    2e8a:	8a 95       	dec	r24
    2e8c:	e2 f7       	brpl	.-8      	; 0x2e86 <timer_expired+0x6>
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2e8e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e90:	f8 94       	cli
    {
        flag &= timer_flag;
    2e92:	80 91 ca 01 	lds	r24, 0x01CA
    2e96:	28 23       	and	r18, r24
        if (reset) {
    2e98:	66 23       	and	r22, r22
    2e9a:	39 f0       	breq	.+14     	; 0x2eaa <timer_expired+0x2a>
            timer_flag &= (uint8_t) ~flag;
    2e9c:	30 91 ca 01 	lds	r19, 0x01CA
    2ea0:	82 2f       	mov	r24, r18
    2ea2:	80 95       	com	r24
    2ea4:	83 23       	and	r24, r19
    2ea6:	80 93 ca 01 	sts	0x01CA, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2eaa:	9f bf       	out	0x3f, r25	; 63
        }
    }

    if (flag) {
        flag = 1;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	22 23       	and	r18, r18
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <timer_expired+0x34>
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    }

    return flag;
}
    2eb4:	08 95       	ret

00002eb6 <timer_status>:
 *
 ******************************************************************************/

uint8_t timer_status(void)
{
    return timer_flag;
    2eb6:	80 91 ca 01 	lds	r24, 0x01CA
}
    2eba:	08 95       	ret

00002ebc <__vector_14>:
/******************************************************************************
 *
 ******************************************************************************/

ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
    2ebc:	1f 92       	push	r1
    2ebe:	0f 92       	push	r0
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	0f 92       	push	r0
    2ec4:	11 24       	eor	r1, r1
    2ec6:	2f 93       	push	r18
    2ec8:	3f 93       	push	r19
    2eca:	4f 93       	push	r20
    2ecc:	5f 93       	push	r21
    2ece:	6f 93       	push	r22
    2ed0:	7f 93       	push	r23
    2ed2:	8f 93       	push	r24
    2ed4:	9f 93       	push	r25
    2ed6:	af 93       	push	r26
    2ed8:	bf 93       	push	r27
    2eda:	ef 93       	push	r30
    2edc:	ff 93       	push	r31

    // Operations performed every entry

    nixie_display_refresh();
    2ede:	0e 94 b7 0c 	call	0x196e	; 0x196e <nixie_display_refresh>
    button_scan();
    2ee2:	0e 94 18 08 	call	0x1030	; 0x1030 <button_scan>
    2ee6:	ad ed       	ldi	r26, 0xDD	; 221
    2ee8:	b1 e0       	ldi	r27, 0x01	; 1
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
{
    register uint8_t index;
    register uint8_t mask;
    register uint16_t count;

    mask = 0x01;
    2eee:	61 e0       	ldi	r22, 0x01	; 1
    for (index = 0; index < NUM_EVENT_TIMERS; index++) {
        count = timer_count[index];
    2ef0:	a9 01       	movw	r20, r18
    2ef2:	44 0f       	add	r20, r20
    2ef4:	55 1f       	adc	r21, r21
    2ef6:	fa 01       	movw	r30, r20
    2ef8:	e5 53       	subi	r30, 0x35	; 53
    2efa:	fe 4f       	sbci	r31, 0xFE	; 254
    2efc:	80 81       	ld	r24, Z
    2efe:	91 81       	ldd	r25, Z+1	; 0x01
        if (count) {
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	79 f0       	breq	.+30     	; 0x2f22 <__vector_14+0x66>
            count--;
    2f04:	01 97       	sbiw	r24, 0x01	; 1
            if (!count) {
    2f06:	41 f4       	brne	.+16     	; 0x2f18 <__vector_14+0x5c>
                count = timer_period[index];
    2f08:	8d 91       	ld	r24, X+
    2f0a:	9c 91       	ld	r25, X
    2f0c:	11 97       	sbiw	r26, 0x01	; 1
                timer_flag |= mask;
    2f0e:	70 91 ca 01 	lds	r23, 0x01CA
    2f12:	76 2b       	or	r23, r22
    2f14:	70 93 ca 01 	sts	0x01CA, r23
            }
            timer_count[index] = count;
    2f18:	fa 01       	movw	r30, r20
    2f1a:	e5 53       	subi	r30, 0x35	; 53
    2f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	80 83       	st	Z, r24
        }
        mask <<= 1;
    2f22:	66 0f       	add	r22, r22
    2f24:	2f 5f       	subi	r18, 0xFF	; 255
    2f26:	3f 4f       	sbci	r19, 0xFF	; 255
    2f28:	12 96       	adiw	r26, 0x02	; 2
    register uint8_t index;
    register uint8_t mask;
    register uint16_t count;

    mask = 0x01;
    for (index = 0; index < NUM_EVENT_TIMERS; index++) {
    2f2a:	28 30       	cpi	r18, 0x08	; 8
    2f2c:	31 05       	cpc	r19, r1
    2f2e:	01 f7       	brne	.-64     	; 0x2ef0 <__vector_14+0x34>
    // Operations performed every entry

    nixie_display_refresh();
    button_scan();
    timer_update();
    player_service();
    2f30:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <player_service>

    seconds_prescaler--;
    2f34:	80 91 db 01 	lds	r24, 0x01DB
    2f38:	90 91 dc 01 	lds	r25, 0x01DC
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	90 93 dc 01 	sts	0x01DC, r25
    2f42:	80 93 db 01 	sts	0x01DB, r24
    if (!seconds_prescaler) {
    2f46:	00 97       	sbiw	r24, 0x00	; 0
    2f48:	61 f4       	brne	.+24     	; 0x2f62 <__vector_14+0xa6>

        // Operations performed once per second

        seconds_prescaler += TIMER0_FREQUENCY;
    2f4a:	81 e7       	ldi	r24, 0x71	; 113
    2f4c:	92 e0       	ldi	r25, 0x02	; 2
    2f4e:	90 93 dc 01 	sts	0x01DC, r25
    2f52:	80 93 db 01 	sts	0x01DB, r24

        time_date_update();
    2f56:	0e 94 5d 09 	call	0x12ba	; 0x12ba <time_date_update>
        add_event(ONE_SECOND_ELAPSED, 0);
    2f5a:	86 e2       	ldi	r24, 0x26	; 38
    2f5c:	60 e0       	ldi	r22, 0x00	; 0
    2f5e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <add_event>
    }
}
    2f62:	ff 91       	pop	r31
    2f64:	ef 91       	pop	r30
    2f66:	bf 91       	pop	r27
    2f68:	af 91       	pop	r26
    2f6a:	9f 91       	pop	r25
    2f6c:	8f 91       	pop	r24
    2f6e:	7f 91       	pop	r23
    2f70:	6f 91       	pop	r22
    2f72:	5f 91       	pop	r21
    2f74:	4f 91       	pop	r20
    2f76:	3f 91       	pop	r19
    2f78:	2f 91       	pop	r18
    2f7a:	0f 90       	pop	r0
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	0f 90       	pop	r0
    2f80:	1f 90       	pop	r1
    2f82:	18 95       	reti

00002f84 <main>:
/******************************************************************************
 *
 ******************************************************************************/

int main(void)
{
    2f84:	cf 93       	push	r28
    2f86:	df 93       	push	r29
    // Initialize I/O's

    DDRB = 0b00101111;
    2f88:	8f e2       	ldi	r24, 0x2F	; 47
    2f8a:	84 b9       	out	0x04, r24	; 4
    DDRC = 0b00000001;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	87 b9       	out	0x07, r24	; 7
    DDRD = 0b00000010;
    2f90:	82 e0       	ldi	r24, 0x02	; 2
    2f92:	8a b9       	out	0x0a, r24	; 10

    PORTB = 0b00000000;
    2f94:	15 b8       	out	0x05, r1	; 5
    PORTC = 0b00111111;
    2f96:	8f e3       	ldi	r24, 0x3F	; 63
    2f98:	88 b9       	out	0x08, r24	; 8
    PORTD = 0b00001100;
    2f9a:	8c e0       	ldi	r24, 0x0C	; 12
    2f9c:	8b b9       	out	0x0b, r24	; 11

    TCCR1A = 0b00000000;
    2f9e:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = 0b00000000;
    2fa2:	10 92 81 00 	sts	0x0081, r1

    // Initialize peripherals

    serial_init(38400, IN_OUT_INT);
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	96 e9       	ldi	r25, 0x96	; 150
    2faa:	63 e0       	ldi	r22, 0x03	; 3
    2fac:	0e 94 0e 14 	call	0x281c	; 0x281c <serial_init>
    spi_init();
    2fb0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <spi_init>
    rotary_init();
    2fb4:	0e 94 2c 12 	call	0x2458	; 0x2458 <rotary_init>
    timer_init();
    2fb8:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <timer_init>
    beeper_init();
    2fbc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <beeper_init>
    time_date_init();
    2fc0:	0e 94 33 09 	call	0x1266	; 0x1266 <time_date_init>

    clock_run(1);
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <clock_run>
    button_enable(1);
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <button_enable>
    // Set default time & date

    // Assign stdio file handles to use serial port
    // Note: serial_f is declared in serial.c/.h

    stdin = &serial_f;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	91 e0       	ldi	r25, 0x01	; 1
    2fd4:	90 93 9a 02 	sts	0x029A, r25
    2fd8:	80 93 99 02 	sts	0x0299, r24
    stdout = &serial_f;
    2fdc:	90 93 9c 02 	sts	0x029C, r25
    2fe0:	80 93 9b 02 	sts	0x029B, r24
    stderr = &serial_f;
    2fe4:	90 93 9e 02 	sts	0x029E, r25
    2fe8:	80 93 9d 02 	sts	0x029D, r24

    // Set up nixie display streams

    nixie_stream_init(&primary, &primary_stream, primary_data);
    2fec:	c7 e8       	ldi	r28, 0x87	; 135
    2fee:	d2 e0       	ldi	r29, 0x02	; 2
    2ff0:	ce 01       	movw	r24, r28
    2ff2:	6d e6       	ldi	r22, 0x6D	; 109
    2ff4:	72 e0       	ldi	r23, 0x02	; 2
    2ff6:	4d ee       	ldi	r20, 0xED	; 237
    2ff8:	51 e0       	ldi	r21, 0x01	; 1
    2ffa:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nixie_stream_init>
    nixie_stream_init(&secondary, &secondary_stream, secondary_data);
    2ffe:	89 e7       	ldi	r24, 0x79	; 121
    3000:	92 e0       	ldi	r25, 0x02	; 2
    3002:	63 e7       	ldi	r22, 0x73	; 115
    3004:	72 e0       	ldi	r23, 0x02	; 2
    3006:	4d e2       	ldi	r20, 0x2D	; 45
    3008:	52 e0       	ldi	r21, 0x02	; 2
    300a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nixie_stream_init>
    nixie_show_stream(&primary);
    300e:	ce 01       	movw	r24, r28
    3010:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <nixie_show_stream>
    nixie_display_enable(1);
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <nixie_display_enable>

    // Ok to enable interrupts now

    sei();
    301a:	78 94       	sei

    // Send sign-on message to serial port

    delay_us(1000);         // Needed for FTDI USB-serial IC stabilization?
    301c:	88 ee       	ldi	r24, 0xE8	; 232
    301e:	93 e0       	ldi	r25, 0x03	; 3
    3020:	0e 94 aa 09 	call	0x1354	; 0x1354 <delay_us>
    printf_P(PSTR("\r\n%S\r\n"), hello);
    3024:	00 d0       	rcall	.+0      	; 0x3026 <main+0xa2>
    3026:	00 d0       	rcall	.+0      	; 0x3028 <main+0xa4>
    3028:	83 e7       	ldi	r24, 0x73	; 115
    302a:	91 e0       	ldi	r25, 0x01	; 1
    302c:	ed b7       	in	r30, 0x3d	; 61
    302e:	fe b7       	in	r31, 0x3e	; 62
    3030:	92 83       	std	Z+2, r25	; 0x02
    3032:	81 83       	std	Z+1, r24	; 0x01
    3034:	82 e4       	ldi	r24, 0x42	; 66
    3036:	91 e0       	ldi	r25, 0x01	; 1
    3038:	94 83       	std	Z+4, r25	; 0x04
    303a:	83 83       	std	Z+3, r24	; 0x03
    303c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <printf_P>

    // Player test

    player_start(player_test, PLAYER_MEM_PGM);
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	88 e1       	ldi	r24, 0x18	; 24
    304a:	91 e0       	ldi	r25, 0x01	; 1
    304c:	61 e0       	ldi	r22, 0x01	; 1
    304e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <player_start>
        getstr(str, 40);
        player_start(str, PLAYER_MEM_RAM);
    } while (*str != '/');
*/

    display_test();
    3052:	0e 94 78 07 	call	0xef0	; 0xef0 <display_test>

    ClockDisplay();
    3056:	0e 94 09 06 	call	0xc12	; 0xc12 <ClockDisplay>
        if (count > 999999) {
            count = 0;
        }
    } while (1);
*/
}
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	08 95       	ret

00003064 <__mulsi3>:
    3064:	62 9f       	mul	r22, r18
    3066:	d0 01       	movw	r26, r0
    3068:	73 9f       	mul	r23, r19
    306a:	f0 01       	movw	r30, r0
    306c:	82 9f       	mul	r24, r18
    306e:	e0 0d       	add	r30, r0
    3070:	f1 1d       	adc	r31, r1
    3072:	64 9f       	mul	r22, r20
    3074:	e0 0d       	add	r30, r0
    3076:	f1 1d       	adc	r31, r1
    3078:	92 9f       	mul	r25, r18
    307a:	f0 0d       	add	r31, r0
    307c:	83 9f       	mul	r24, r19
    307e:	f0 0d       	add	r31, r0
    3080:	74 9f       	mul	r23, r20
    3082:	f0 0d       	add	r31, r0
    3084:	65 9f       	mul	r22, r21
    3086:	f0 0d       	add	r31, r0
    3088:	99 27       	eor	r25, r25
    308a:	72 9f       	mul	r23, r18
    308c:	b0 0d       	add	r27, r0
    308e:	e1 1d       	adc	r30, r1
    3090:	f9 1f       	adc	r31, r25
    3092:	63 9f       	mul	r22, r19
    3094:	b0 0d       	add	r27, r0
    3096:	e1 1d       	adc	r30, r1
    3098:	f9 1f       	adc	r31, r25
    309a:	bd 01       	movw	r22, r26
    309c:	cf 01       	movw	r24, r30
    309e:	11 24       	eor	r1, r1
    30a0:	08 95       	ret

000030a2 <__udivmodhi4>:
    30a2:	aa 1b       	sub	r26, r26
    30a4:	bb 1b       	sub	r27, r27
    30a6:	51 e1       	ldi	r21, 0x11	; 17
    30a8:	07 c0       	rjmp	.+14     	; 0x30b8 <__udivmodhi4_ep>

000030aa <__udivmodhi4_loop>:
    30aa:	aa 1f       	adc	r26, r26
    30ac:	bb 1f       	adc	r27, r27
    30ae:	a6 17       	cp	r26, r22
    30b0:	b7 07       	cpc	r27, r23
    30b2:	10 f0       	brcs	.+4      	; 0x30b8 <__udivmodhi4_ep>
    30b4:	a6 1b       	sub	r26, r22
    30b6:	b7 0b       	sbc	r27, r23

000030b8 <__udivmodhi4_ep>:
    30b8:	88 1f       	adc	r24, r24
    30ba:	99 1f       	adc	r25, r25
    30bc:	5a 95       	dec	r21
    30be:	a9 f7       	brne	.-22     	; 0x30aa <__udivmodhi4_loop>
    30c0:	80 95       	com	r24
    30c2:	90 95       	com	r25
    30c4:	bc 01       	movw	r22, r24
    30c6:	cd 01       	movw	r24, r26
    30c8:	08 95       	ret

000030ca <__udivmodsi4>:
    30ca:	a1 e2       	ldi	r26, 0x21	; 33
    30cc:	1a 2e       	mov	r1, r26
    30ce:	aa 1b       	sub	r26, r26
    30d0:	bb 1b       	sub	r27, r27
    30d2:	fd 01       	movw	r30, r26
    30d4:	0d c0       	rjmp	.+26     	; 0x30f0 <__udivmodsi4_ep>

000030d6 <__udivmodsi4_loop>:
    30d6:	aa 1f       	adc	r26, r26
    30d8:	bb 1f       	adc	r27, r27
    30da:	ee 1f       	adc	r30, r30
    30dc:	ff 1f       	adc	r31, r31
    30de:	a2 17       	cp	r26, r18
    30e0:	b3 07       	cpc	r27, r19
    30e2:	e4 07       	cpc	r30, r20
    30e4:	f5 07       	cpc	r31, r21
    30e6:	20 f0       	brcs	.+8      	; 0x30f0 <__udivmodsi4_ep>
    30e8:	a2 1b       	sub	r26, r18
    30ea:	b3 0b       	sbc	r27, r19
    30ec:	e4 0b       	sbc	r30, r20
    30ee:	f5 0b       	sbc	r31, r21

000030f0 <__udivmodsi4_ep>:
    30f0:	66 1f       	adc	r22, r22
    30f2:	77 1f       	adc	r23, r23
    30f4:	88 1f       	adc	r24, r24
    30f6:	99 1f       	adc	r25, r25
    30f8:	1a 94       	dec	r1
    30fa:	69 f7       	brne	.-38     	; 0x30d6 <__udivmodsi4_loop>
    30fc:	60 95       	com	r22
    30fe:	70 95       	com	r23
    3100:	80 95       	com	r24
    3102:	90 95       	com	r25
    3104:	9b 01       	movw	r18, r22
    3106:	ac 01       	movw	r20, r24
    3108:	bd 01       	movw	r22, r26
    310a:	cf 01       	movw	r24, r30
    310c:	08 95       	ret

0000310e <fprintf_P>:
    310e:	a0 e0       	ldi	r26, 0x00	; 0
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	ed e8       	ldi	r30, 0x8D	; 141
    3114:	f8 e1       	ldi	r31, 0x18	; 24
    3116:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__prologue_saves__+0x1c>
    311a:	0f 81       	ldd	r16, Y+7	; 0x07
    311c:	18 85       	ldd	r17, Y+8	; 0x08
    311e:	ae 01       	movw	r20, r28
    3120:	45 5f       	subi	r20, 0xF5	; 245
    3122:	5f 4f       	sbci	r21, 0xFF	; 255
    3124:	f8 01       	movw	r30, r16
    3126:	83 81       	ldd	r24, Z+3	; 0x03
    3128:	88 60       	ori	r24, 0x08	; 8
    312a:	83 83       	std	Z+3, r24	; 0x03
    312c:	c8 01       	movw	r24, r16
    312e:	69 85       	ldd	r22, Y+9	; 0x09
    3130:	7a 85       	ldd	r23, Y+10	; 0x0a
    3132:	0e 94 18 19 	call	0x3230	; 0x3230 <vfprintf>
    3136:	f8 01       	movw	r30, r16
    3138:	23 81       	ldd	r18, Z+3	; 0x03
    313a:	27 7f       	andi	r18, 0xF7	; 247
    313c:	23 83       	std	Z+3, r18	; 0x03
    313e:	20 96       	adiw	r28, 0x00	; 0
    3140:	e4 e0       	ldi	r30, 0x04	; 4
    3142:	0c 94 9c 1b 	jmp	0x3738	; 0x3738 <__epilogue_restores__+0x1c>

00003146 <fputc>:
    3146:	0f 93       	push	r16
    3148:	1f 93       	push	r17
    314a:	cf 93       	push	r28
    314c:	df 93       	push	r29
    314e:	8c 01       	movw	r16, r24
    3150:	eb 01       	movw	r28, r22
    3152:	8b 81       	ldd	r24, Y+3	; 0x03
    3154:	81 ff       	sbrs	r24, 1
    3156:	1b c0       	rjmp	.+54     	; 0x318e <fputc+0x48>
    3158:	82 ff       	sbrs	r24, 2
    315a:	0d c0       	rjmp	.+26     	; 0x3176 <fputc+0x30>
    315c:	2e 81       	ldd	r18, Y+6	; 0x06
    315e:	3f 81       	ldd	r19, Y+7	; 0x07
    3160:	8c 81       	ldd	r24, Y+4	; 0x04
    3162:	9d 81       	ldd	r25, Y+5	; 0x05
    3164:	28 17       	cp	r18, r24
    3166:	39 07       	cpc	r19, r25
    3168:	64 f4       	brge	.+24     	; 0x3182 <fputc+0x3c>
    316a:	e8 81       	ld	r30, Y
    316c:	f9 81       	ldd	r31, Y+1	; 0x01
    316e:	01 93       	st	Z+, r16
    3170:	f9 83       	std	Y+1, r31	; 0x01
    3172:	e8 83       	st	Y, r30
    3174:	06 c0       	rjmp	.+12     	; 0x3182 <fputc+0x3c>
    3176:	e8 85       	ldd	r30, Y+8	; 0x08
    3178:	f9 85       	ldd	r31, Y+9	; 0x09
    317a:	80 2f       	mov	r24, r16
    317c:	09 95       	icall
    317e:	00 97       	sbiw	r24, 0x00	; 0
    3180:	31 f4       	brne	.+12     	; 0x318e <fputc+0x48>
    3182:	8e 81       	ldd	r24, Y+6	; 0x06
    3184:	9f 81       	ldd	r25, Y+7	; 0x07
    3186:	01 96       	adiw	r24, 0x01	; 1
    3188:	9f 83       	std	Y+7, r25	; 0x07
    318a:	8e 83       	std	Y+6, r24	; 0x06
    318c:	02 c0       	rjmp	.+4      	; 0x3192 <fputc+0x4c>
    318e:	0f ef       	ldi	r16, 0xFF	; 255
    3190:	1f ef       	ldi	r17, 0xFF	; 255
    3192:	c8 01       	movw	r24, r16
    3194:	df 91       	pop	r29
    3196:	cf 91       	pop	r28
    3198:	1f 91       	pop	r17
    319a:	0f 91       	pop	r16
    319c:	08 95       	ret

0000319e <fputs_P>:
    319e:	ef 92       	push	r14
    31a0:	ff 92       	push	r15
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	7c 01       	movw	r14, r24
    31ac:	eb 01       	movw	r28, r22
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	81 ff       	sbrs	r24, 1
    31b2:	13 c0       	rjmp	.+38     	; 0x31da <fputs_P+0x3c>
    31b4:	00 e0       	ldi	r16, 0x00	; 0
    31b6:	10 e0       	ldi	r17, 0x00	; 0
    31b8:	0b c0       	rjmp	.+22     	; 0x31d0 <fputs_P+0x32>
    31ba:	e8 85       	ldd	r30, Y+8	; 0x08
    31bc:	f9 85       	ldd	r31, Y+9	; 0x09
    31be:	be 01       	movw	r22, r28
    31c0:	09 95       	icall
    31c2:	00 97       	sbiw	r24, 0x00	; 0
    31c4:	11 f0       	breq	.+4      	; 0x31ca <fputs_P+0x2c>
    31c6:	0f ef       	ldi	r16, 0xFF	; 255
    31c8:	1f ef       	ldi	r17, 0xFF	; 255
    31ca:	08 94       	sec
    31cc:	e1 1c       	adc	r14, r1
    31ce:	f1 1c       	adc	r15, r1
    31d0:	f7 01       	movw	r30, r14
    31d2:	84 91       	lpm	r24, Z
    31d4:	88 23       	and	r24, r24
    31d6:	89 f7       	brne	.-30     	; 0x31ba <fputs_P+0x1c>
    31d8:	02 c0       	rjmp	.+4      	; 0x31de <fputs_P+0x40>
    31da:	0f ef       	ldi	r16, 0xFF	; 255
    31dc:	1f ef       	ldi	r17, 0xFF	; 255
    31de:	c8 01       	movw	r24, r16
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	e6 e0       	ldi	r30, 0x06	; 6
    31e6:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <__epilogue_restores__+0x18>

000031ea <printf_P>:
    31ea:	a0 e0       	ldi	r26, 0x00	; 0
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	eb ef       	ldi	r30, 0xFB	; 251
    31f0:	f8 e1       	ldi	r31, 0x18	; 24
    31f2:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <__prologue_saves__+0x20>
    31f6:	fe 01       	movw	r30, r28
    31f8:	35 96       	adiw	r30, 0x05	; 5
    31fa:	61 91       	ld	r22, Z+
    31fc:	71 91       	ld	r23, Z+
    31fe:	80 91 9b 02 	lds	r24, 0x029B
    3202:	90 91 9c 02 	lds	r25, 0x029C
    3206:	dc 01       	movw	r26, r24
    3208:	13 96       	adiw	r26, 0x03	; 3
    320a:	2c 91       	ld	r18, X
    320c:	13 97       	sbiw	r26, 0x03	; 3
    320e:	28 60       	ori	r18, 0x08	; 8
    3210:	13 96       	adiw	r26, 0x03	; 3
    3212:	2c 93       	st	X, r18
    3214:	af 01       	movw	r20, r30
    3216:	0e 94 18 19 	call	0x3230	; 0x3230 <vfprintf>
    321a:	e0 91 9b 02 	lds	r30, 0x029B
    321e:	f0 91 9c 02 	lds	r31, 0x029C
    3222:	23 81       	ldd	r18, Z+3	; 0x03
    3224:	27 7f       	andi	r18, 0xF7	; 247
    3226:	23 83       	std	Z+3, r18	; 0x03
    3228:	20 96       	adiw	r28, 0x00	; 0
    322a:	e2 e0       	ldi	r30, 0x02	; 2
    322c:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__epilogue_restores__+0x20>

00003230 <vfprintf>:
    3230:	ad e0       	ldi	r26, 0x0D	; 13
    3232:	b0 e0       	ldi	r27, 0x00	; 0
    3234:	ee e1       	ldi	r30, 0x1E	; 30
    3236:	f9 e1       	ldi	r31, 0x19	; 25
    3238:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <__prologue_saves__>
    323c:	3c 01       	movw	r6, r24
    323e:	7d 87       	std	Y+13, r23	; 0x0d
    3240:	6c 87       	std	Y+12, r22	; 0x0c
    3242:	5a 01       	movw	r10, r20
    3244:	fc 01       	movw	r30, r24
    3246:	17 82       	std	Z+7, r1	; 0x07
    3248:	16 82       	std	Z+6, r1	; 0x06
    324a:	83 81       	ldd	r24, Z+3	; 0x03
    324c:	81 ff       	sbrs	r24, 1
    324e:	c8 c1       	rjmp	.+912    	; 0x35e0 <vfprintf+0x3b0>
    3250:	2e 01       	movw	r4, r28
    3252:	08 94       	sec
    3254:	41 1c       	adc	r4, r1
    3256:	51 1c       	adc	r5, r1
    3258:	f3 01       	movw	r30, r6
    325a:	93 81       	ldd	r25, Z+3	; 0x03
    325c:	ec 85       	ldd	r30, Y+12	; 0x0c
    325e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3260:	93 fd       	sbrc	r25, 3
    3262:	85 91       	lpm	r24, Z+
    3264:	93 ff       	sbrs	r25, 3
    3266:	81 91       	ld	r24, Z+
    3268:	fd 87       	std	Y+13, r31	; 0x0d
    326a:	ec 87       	std	Y+12, r30	; 0x0c
    326c:	88 23       	and	r24, r24
    326e:	09 f4       	brne	.+2      	; 0x3272 <vfprintf+0x42>
    3270:	b3 c1       	rjmp	.+870    	; 0x35d8 <vfprintf+0x3a8>
    3272:	85 32       	cpi	r24, 0x25	; 37
    3274:	41 f4       	brne	.+16     	; 0x3286 <vfprintf+0x56>
    3276:	93 fd       	sbrc	r25, 3
    3278:	85 91       	lpm	r24, Z+
    327a:	93 ff       	sbrs	r25, 3
    327c:	81 91       	ld	r24, Z+
    327e:	fd 87       	std	Y+13, r31	; 0x0d
    3280:	ec 87       	std	Y+12, r30	; 0x0c
    3282:	85 32       	cpi	r24, 0x25	; 37
    3284:	29 f4       	brne	.+10     	; 0x3290 <vfprintf+0x60>
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	b3 01       	movw	r22, r6
    328a:	0e 94 a3 18 	call	0x3146	; 0x3146 <fputc>
    328e:	e4 cf       	rjmp	.-56     	; 0x3258 <vfprintf+0x28>
    3290:	ff 24       	eor	r15, r15
    3292:	ee 24       	eor	r14, r14
    3294:	10 e0       	ldi	r17, 0x00	; 0
    3296:	10 32       	cpi	r17, 0x20	; 32
    3298:	b0 f4       	brcc	.+44     	; 0x32c6 <vfprintf+0x96>
    329a:	8b 32       	cpi	r24, 0x2B	; 43
    329c:	69 f0       	breq	.+26     	; 0x32b8 <vfprintf+0x88>
    329e:	8c 32       	cpi	r24, 0x2C	; 44
    32a0:	28 f4       	brcc	.+10     	; 0x32ac <vfprintf+0x7c>
    32a2:	80 32       	cpi	r24, 0x20	; 32
    32a4:	51 f0       	breq	.+20     	; 0x32ba <vfprintf+0x8a>
    32a6:	83 32       	cpi	r24, 0x23	; 35
    32a8:	71 f4       	brne	.+28     	; 0x32c6 <vfprintf+0x96>
    32aa:	0b c0       	rjmp	.+22     	; 0x32c2 <vfprintf+0x92>
    32ac:	8d 32       	cpi	r24, 0x2D	; 45
    32ae:	39 f0       	breq	.+14     	; 0x32be <vfprintf+0x8e>
    32b0:	80 33       	cpi	r24, 0x30	; 48
    32b2:	49 f4       	brne	.+18     	; 0x32c6 <vfprintf+0x96>
    32b4:	11 60       	ori	r17, 0x01	; 1
    32b6:	2c c0       	rjmp	.+88     	; 0x3310 <vfprintf+0xe0>
    32b8:	12 60       	ori	r17, 0x02	; 2
    32ba:	14 60       	ori	r17, 0x04	; 4
    32bc:	29 c0       	rjmp	.+82     	; 0x3310 <vfprintf+0xe0>
    32be:	18 60       	ori	r17, 0x08	; 8
    32c0:	27 c0       	rjmp	.+78     	; 0x3310 <vfprintf+0xe0>
    32c2:	10 61       	ori	r17, 0x10	; 16
    32c4:	25 c0       	rjmp	.+74     	; 0x3310 <vfprintf+0xe0>
    32c6:	17 fd       	sbrc	r17, 7
    32c8:	2e c0       	rjmp	.+92     	; 0x3326 <vfprintf+0xf6>
    32ca:	28 2f       	mov	r18, r24
    32cc:	20 53       	subi	r18, 0x30	; 48
    32ce:	2a 30       	cpi	r18, 0x0A	; 10
    32d0:	98 f4       	brcc	.+38     	; 0x32f8 <vfprintf+0xc8>
    32d2:	16 ff       	sbrs	r17, 6
    32d4:	08 c0       	rjmp	.+16     	; 0x32e6 <vfprintf+0xb6>
    32d6:	8f 2d       	mov	r24, r15
    32d8:	88 0f       	add	r24, r24
    32da:	f8 2e       	mov	r15, r24
    32dc:	ff 0c       	add	r15, r15
    32de:	ff 0c       	add	r15, r15
    32e0:	f8 0e       	add	r15, r24
    32e2:	f2 0e       	add	r15, r18
    32e4:	15 c0       	rjmp	.+42     	; 0x3310 <vfprintf+0xe0>
    32e6:	8e 2d       	mov	r24, r14
    32e8:	88 0f       	add	r24, r24
    32ea:	e8 2e       	mov	r14, r24
    32ec:	ee 0c       	add	r14, r14
    32ee:	ee 0c       	add	r14, r14
    32f0:	e8 0e       	add	r14, r24
    32f2:	e2 0e       	add	r14, r18
    32f4:	10 62       	ori	r17, 0x20	; 32
    32f6:	0c c0       	rjmp	.+24     	; 0x3310 <vfprintf+0xe0>
    32f8:	8e 32       	cpi	r24, 0x2E	; 46
    32fa:	21 f4       	brne	.+8      	; 0x3304 <vfprintf+0xd4>
    32fc:	16 fd       	sbrc	r17, 6
    32fe:	6c c1       	rjmp	.+728    	; 0x35d8 <vfprintf+0x3a8>
    3300:	10 64       	ori	r17, 0x40	; 64
    3302:	06 c0       	rjmp	.+12     	; 0x3310 <vfprintf+0xe0>
    3304:	8c 36       	cpi	r24, 0x6C	; 108
    3306:	11 f4       	brne	.+4      	; 0x330c <vfprintf+0xdc>
    3308:	10 68       	ori	r17, 0x80	; 128
    330a:	02 c0       	rjmp	.+4      	; 0x3310 <vfprintf+0xe0>
    330c:	88 36       	cpi	r24, 0x68	; 104
    330e:	59 f4       	brne	.+22     	; 0x3326 <vfprintf+0xf6>
    3310:	ec 85       	ldd	r30, Y+12	; 0x0c
    3312:	fd 85       	ldd	r31, Y+13	; 0x0d
    3314:	93 fd       	sbrc	r25, 3
    3316:	85 91       	lpm	r24, Z+
    3318:	93 ff       	sbrs	r25, 3
    331a:	81 91       	ld	r24, Z+
    331c:	fd 87       	std	Y+13, r31	; 0x0d
    331e:	ec 87       	std	Y+12, r30	; 0x0c
    3320:	88 23       	and	r24, r24
    3322:	09 f0       	breq	.+2      	; 0x3326 <vfprintf+0xf6>
    3324:	b8 cf       	rjmp	.-144    	; 0x3296 <vfprintf+0x66>
    3326:	98 2f       	mov	r25, r24
    3328:	95 54       	subi	r25, 0x45	; 69
    332a:	93 30       	cpi	r25, 0x03	; 3
    332c:	18 f0       	brcs	.+6      	; 0x3334 <vfprintf+0x104>
    332e:	90 52       	subi	r25, 0x20	; 32
    3330:	93 30       	cpi	r25, 0x03	; 3
    3332:	38 f4       	brcc	.+14     	; 0x3342 <vfprintf+0x112>
    3334:	24 e0       	ldi	r18, 0x04	; 4
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	a2 0e       	add	r10, r18
    333a:	b3 1e       	adc	r11, r19
    333c:	3f e3       	ldi	r19, 0x3F	; 63
    333e:	39 83       	std	Y+1, r19	; 0x01
    3340:	0f c0       	rjmp	.+30     	; 0x3360 <vfprintf+0x130>
    3342:	83 36       	cpi	r24, 0x63	; 99
    3344:	31 f0       	breq	.+12     	; 0x3352 <vfprintf+0x122>
    3346:	83 37       	cpi	r24, 0x73	; 115
    3348:	81 f0       	breq	.+32     	; 0x336a <vfprintf+0x13a>
    334a:	83 35       	cpi	r24, 0x53	; 83
    334c:	09 f0       	breq	.+2      	; 0x3350 <vfprintf+0x120>
    334e:	5a c0       	rjmp	.+180    	; 0x3404 <vfprintf+0x1d4>
    3350:	22 c0       	rjmp	.+68     	; 0x3396 <vfprintf+0x166>
    3352:	f5 01       	movw	r30, r10
    3354:	80 81       	ld	r24, Z
    3356:	89 83       	std	Y+1, r24	; 0x01
    3358:	22 e0       	ldi	r18, 0x02	; 2
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	a2 0e       	add	r10, r18
    335e:	b3 1e       	adc	r11, r19
    3360:	21 e0       	ldi	r18, 0x01	; 1
    3362:	c2 2e       	mov	r12, r18
    3364:	d1 2c       	mov	r13, r1
    3366:	42 01       	movw	r8, r4
    3368:	14 c0       	rjmp	.+40     	; 0x3392 <vfprintf+0x162>
    336a:	92 e0       	ldi	r25, 0x02	; 2
    336c:	29 2e       	mov	r2, r25
    336e:	31 2c       	mov	r3, r1
    3370:	2a 0c       	add	r2, r10
    3372:	3b 1c       	adc	r3, r11
    3374:	f5 01       	movw	r30, r10
    3376:	80 80       	ld	r8, Z
    3378:	91 80       	ldd	r9, Z+1	; 0x01
    337a:	16 ff       	sbrs	r17, 6
    337c:	03 c0       	rjmp	.+6      	; 0x3384 <vfprintf+0x154>
    337e:	6f 2d       	mov	r22, r15
    3380:	70 e0       	ldi	r23, 0x00	; 0
    3382:	02 c0       	rjmp	.+4      	; 0x3388 <vfprintf+0x158>
    3384:	6f ef       	ldi	r22, 0xFF	; 255
    3386:	7f ef       	ldi	r23, 0xFF	; 255
    3388:	c4 01       	movw	r24, r8
    338a:	0e 94 09 1b 	call	0x3612	; 0x3612 <strnlen>
    338e:	6c 01       	movw	r12, r24
    3390:	51 01       	movw	r10, r2
    3392:	1f 77       	andi	r17, 0x7F	; 127
    3394:	15 c0       	rjmp	.+42     	; 0x33c0 <vfprintf+0x190>
    3396:	82 e0       	ldi	r24, 0x02	; 2
    3398:	28 2e       	mov	r2, r24
    339a:	31 2c       	mov	r3, r1
    339c:	2a 0c       	add	r2, r10
    339e:	3b 1c       	adc	r3, r11
    33a0:	f5 01       	movw	r30, r10
    33a2:	80 80       	ld	r8, Z
    33a4:	91 80       	ldd	r9, Z+1	; 0x01
    33a6:	16 ff       	sbrs	r17, 6
    33a8:	03 c0       	rjmp	.+6      	; 0x33b0 <vfprintf+0x180>
    33aa:	6f 2d       	mov	r22, r15
    33ac:	70 e0       	ldi	r23, 0x00	; 0
    33ae:	02 c0       	rjmp	.+4      	; 0x33b4 <vfprintf+0x184>
    33b0:	6f ef       	ldi	r22, 0xFF	; 255
    33b2:	7f ef       	ldi	r23, 0xFF	; 255
    33b4:	c4 01       	movw	r24, r8
    33b6:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <strnlen_P>
    33ba:	6c 01       	movw	r12, r24
    33bc:	10 68       	ori	r17, 0x80	; 128
    33be:	51 01       	movw	r10, r2
    33c0:	13 fd       	sbrc	r17, 3
    33c2:	1c c0       	rjmp	.+56     	; 0x33fc <vfprintf+0x1cc>
    33c4:	06 c0       	rjmp	.+12     	; 0x33d2 <vfprintf+0x1a2>
    33c6:	80 e2       	ldi	r24, 0x20	; 32
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	b3 01       	movw	r22, r6
    33cc:	0e 94 a3 18 	call	0x3146	; 0x3146 <fputc>
    33d0:	ea 94       	dec	r14
    33d2:	8e 2d       	mov	r24, r14
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	c8 16       	cp	r12, r24
    33d8:	d9 06       	cpc	r13, r25
    33da:	a8 f3       	brcs	.-22     	; 0x33c6 <vfprintf+0x196>
    33dc:	0f c0       	rjmp	.+30     	; 0x33fc <vfprintf+0x1cc>
    33de:	f4 01       	movw	r30, r8
    33e0:	17 fd       	sbrc	r17, 7
    33e2:	85 91       	lpm	r24, Z+
    33e4:	17 ff       	sbrs	r17, 7
    33e6:	81 91       	ld	r24, Z+
    33e8:	4f 01       	movw	r8, r30
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	b3 01       	movw	r22, r6
    33ee:	0e 94 a3 18 	call	0x3146	; 0x3146 <fputc>
    33f2:	e1 10       	cpse	r14, r1
    33f4:	ea 94       	dec	r14
    33f6:	08 94       	sec
    33f8:	c1 08       	sbc	r12, r1
    33fa:	d1 08       	sbc	r13, r1
    33fc:	c1 14       	cp	r12, r1
    33fe:	d1 04       	cpc	r13, r1
    3400:	71 f7       	brne	.-36     	; 0x33de <vfprintf+0x1ae>
    3402:	e7 c0       	rjmp	.+462    	; 0x35d2 <vfprintf+0x3a2>
    3404:	84 36       	cpi	r24, 0x64	; 100
    3406:	11 f0       	breq	.+4      	; 0x340c <vfprintf+0x1dc>
    3408:	89 36       	cpi	r24, 0x69	; 105
    340a:	51 f5       	brne	.+84     	; 0x3460 <vfprintf+0x230>
    340c:	f5 01       	movw	r30, r10
    340e:	17 ff       	sbrs	r17, 7
    3410:	07 c0       	rjmp	.+14     	; 0x3420 <vfprintf+0x1f0>
    3412:	80 81       	ld	r24, Z
    3414:	91 81       	ldd	r25, Z+1	; 0x01
    3416:	a2 81       	ldd	r26, Z+2	; 0x02
    3418:	b3 81       	ldd	r27, Z+3	; 0x03
    341a:	24 e0       	ldi	r18, 0x04	; 4
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	08 c0       	rjmp	.+16     	; 0x3430 <vfprintf+0x200>
    3420:	80 81       	ld	r24, Z
    3422:	91 81       	ldd	r25, Z+1	; 0x01
    3424:	aa 27       	eor	r26, r26
    3426:	97 fd       	sbrc	r25, 7
    3428:	a0 95       	com	r26
    342a:	ba 2f       	mov	r27, r26
    342c:	22 e0       	ldi	r18, 0x02	; 2
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	a2 0e       	add	r10, r18
    3432:	b3 1e       	adc	r11, r19
    3434:	01 2f       	mov	r16, r17
    3436:	0f 76       	andi	r16, 0x6F	; 111
    3438:	b7 ff       	sbrs	r27, 7
    343a:	08 c0       	rjmp	.+16     	; 0x344c <vfprintf+0x21c>
    343c:	b0 95       	com	r27
    343e:	a0 95       	com	r26
    3440:	90 95       	com	r25
    3442:	81 95       	neg	r24
    3444:	9f 4f       	sbci	r25, 0xFF	; 255
    3446:	af 4f       	sbci	r26, 0xFF	; 255
    3448:	bf 4f       	sbci	r27, 0xFF	; 255
    344a:	00 68       	ori	r16, 0x80	; 128
    344c:	bc 01       	movw	r22, r24
    344e:	cd 01       	movw	r24, r26
    3450:	a2 01       	movw	r20, r4
    3452:	2a e0       	ldi	r18, 0x0A	; 10
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	0e 94 14 1b 	call	0x3628	; 0x3628 <__ultoa_invert>
    345a:	d8 2e       	mov	r13, r24
    345c:	d4 18       	sub	r13, r4
    345e:	3f c0       	rjmp	.+126    	; 0x34de <vfprintf+0x2ae>
    3460:	85 37       	cpi	r24, 0x75	; 117
    3462:	21 f4       	brne	.+8      	; 0x346c <vfprintf+0x23c>
    3464:	1f 7e       	andi	r17, 0xEF	; 239
    3466:	2a e0       	ldi	r18, 0x0A	; 10
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	20 c0       	rjmp	.+64     	; 0x34ac <vfprintf+0x27c>
    346c:	19 7f       	andi	r17, 0xF9	; 249
    346e:	8f 36       	cpi	r24, 0x6F	; 111
    3470:	a9 f0       	breq	.+42     	; 0x349c <vfprintf+0x26c>
    3472:	80 37       	cpi	r24, 0x70	; 112
    3474:	20 f4       	brcc	.+8      	; 0x347e <vfprintf+0x24e>
    3476:	88 35       	cpi	r24, 0x58	; 88
    3478:	09 f0       	breq	.+2      	; 0x347c <vfprintf+0x24c>
    347a:	ae c0       	rjmp	.+348    	; 0x35d8 <vfprintf+0x3a8>
    347c:	0b c0       	rjmp	.+22     	; 0x3494 <vfprintf+0x264>
    347e:	80 37       	cpi	r24, 0x70	; 112
    3480:	21 f0       	breq	.+8      	; 0x348a <vfprintf+0x25a>
    3482:	88 37       	cpi	r24, 0x78	; 120
    3484:	09 f0       	breq	.+2      	; 0x3488 <vfprintf+0x258>
    3486:	a8 c0       	rjmp	.+336    	; 0x35d8 <vfprintf+0x3a8>
    3488:	01 c0       	rjmp	.+2      	; 0x348c <vfprintf+0x25c>
    348a:	10 61       	ori	r17, 0x10	; 16
    348c:	14 ff       	sbrs	r17, 4
    348e:	09 c0       	rjmp	.+18     	; 0x34a2 <vfprintf+0x272>
    3490:	14 60       	ori	r17, 0x04	; 4
    3492:	07 c0       	rjmp	.+14     	; 0x34a2 <vfprintf+0x272>
    3494:	14 ff       	sbrs	r17, 4
    3496:	08 c0       	rjmp	.+16     	; 0x34a8 <vfprintf+0x278>
    3498:	16 60       	ori	r17, 0x06	; 6
    349a:	06 c0       	rjmp	.+12     	; 0x34a8 <vfprintf+0x278>
    349c:	28 e0       	ldi	r18, 0x08	; 8
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	05 c0       	rjmp	.+10     	; 0x34ac <vfprintf+0x27c>
    34a2:	20 e1       	ldi	r18, 0x10	; 16
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	02 c0       	rjmp	.+4      	; 0x34ac <vfprintf+0x27c>
    34a8:	20 e1       	ldi	r18, 0x10	; 16
    34aa:	32 e0       	ldi	r19, 0x02	; 2
    34ac:	f5 01       	movw	r30, r10
    34ae:	17 ff       	sbrs	r17, 7
    34b0:	07 c0       	rjmp	.+14     	; 0x34c0 <vfprintf+0x290>
    34b2:	60 81       	ld	r22, Z
    34b4:	71 81       	ldd	r23, Z+1	; 0x01
    34b6:	82 81       	ldd	r24, Z+2	; 0x02
    34b8:	93 81       	ldd	r25, Z+3	; 0x03
    34ba:	44 e0       	ldi	r20, 0x04	; 4
    34bc:	50 e0       	ldi	r21, 0x00	; 0
    34be:	06 c0       	rjmp	.+12     	; 0x34cc <vfprintf+0x29c>
    34c0:	60 81       	ld	r22, Z
    34c2:	71 81       	ldd	r23, Z+1	; 0x01
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	42 e0       	ldi	r20, 0x02	; 2
    34ca:	50 e0       	ldi	r21, 0x00	; 0
    34cc:	a4 0e       	add	r10, r20
    34ce:	b5 1e       	adc	r11, r21
    34d0:	a2 01       	movw	r20, r4
    34d2:	0e 94 14 1b 	call	0x3628	; 0x3628 <__ultoa_invert>
    34d6:	d8 2e       	mov	r13, r24
    34d8:	d4 18       	sub	r13, r4
    34da:	01 2f       	mov	r16, r17
    34dc:	0f 77       	andi	r16, 0x7F	; 127
    34de:	06 ff       	sbrs	r16, 6
    34e0:	09 c0       	rjmp	.+18     	; 0x34f4 <vfprintf+0x2c4>
    34e2:	0e 7f       	andi	r16, 0xFE	; 254
    34e4:	df 14       	cp	r13, r15
    34e6:	30 f4       	brcc	.+12     	; 0x34f4 <vfprintf+0x2c4>
    34e8:	04 ff       	sbrs	r16, 4
    34ea:	06 c0       	rjmp	.+12     	; 0x34f8 <vfprintf+0x2c8>
    34ec:	02 fd       	sbrc	r16, 2
    34ee:	04 c0       	rjmp	.+8      	; 0x34f8 <vfprintf+0x2c8>
    34f0:	0f 7e       	andi	r16, 0xEF	; 239
    34f2:	02 c0       	rjmp	.+4      	; 0x34f8 <vfprintf+0x2c8>
    34f4:	1d 2d       	mov	r17, r13
    34f6:	01 c0       	rjmp	.+2      	; 0x34fa <vfprintf+0x2ca>
    34f8:	1f 2d       	mov	r17, r15
    34fa:	80 2f       	mov	r24, r16
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	04 ff       	sbrs	r16, 4
    3500:	0c c0       	rjmp	.+24     	; 0x351a <vfprintf+0x2ea>
    3502:	fe 01       	movw	r30, r28
    3504:	ed 0d       	add	r30, r13
    3506:	f1 1d       	adc	r31, r1
    3508:	20 81       	ld	r18, Z
    350a:	20 33       	cpi	r18, 0x30	; 48
    350c:	11 f4       	brne	.+4      	; 0x3512 <vfprintf+0x2e2>
    350e:	09 7e       	andi	r16, 0xE9	; 233
    3510:	09 c0       	rjmp	.+18     	; 0x3524 <vfprintf+0x2f4>
    3512:	02 ff       	sbrs	r16, 2
    3514:	06 c0       	rjmp	.+12     	; 0x3522 <vfprintf+0x2f2>
    3516:	1e 5f       	subi	r17, 0xFE	; 254
    3518:	05 c0       	rjmp	.+10     	; 0x3524 <vfprintf+0x2f4>
    351a:	86 78       	andi	r24, 0x86	; 134
    351c:	90 70       	andi	r25, 0x00	; 0
    351e:	00 97       	sbiw	r24, 0x00	; 0
    3520:	09 f0       	breq	.+2      	; 0x3524 <vfprintf+0x2f4>
    3522:	1f 5f       	subi	r17, 0xFF	; 255
    3524:	80 2e       	mov	r8, r16
    3526:	99 24       	eor	r9, r9
    3528:	03 fd       	sbrc	r16, 3
    352a:	12 c0       	rjmp	.+36     	; 0x3550 <vfprintf+0x320>
    352c:	00 ff       	sbrs	r16, 0
    352e:	0d c0       	rjmp	.+26     	; 0x354a <vfprintf+0x31a>
    3530:	fd 2c       	mov	r15, r13
    3532:	1e 15       	cp	r17, r14
    3534:	50 f4       	brcc	.+20     	; 0x354a <vfprintf+0x31a>
    3536:	fe 0c       	add	r15, r14
    3538:	f1 1a       	sub	r15, r17
    353a:	1e 2d       	mov	r17, r14
    353c:	06 c0       	rjmp	.+12     	; 0x354a <vfprintf+0x31a>
    353e:	80 e2       	ldi	r24, 0x20	; 32
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	b3 01       	movw	r22, r6
    3544:	0e 94 a3 18 	call	0x3146	; 0x3146 <fputc>
    3548:	1f 5f       	subi	r17, 0xFF	; 255
    354a:	1e 15       	cp	r17, r14
    354c:	c0 f3       	brcs	.-16     	; 0x353e <vfprintf+0x30e>
    354e:	04 c0       	rjmp	.+8      	; 0x3558 <vfprintf+0x328>
    3550:	1e 15       	cp	r17, r14
    3552:	10 f4       	brcc	.+4      	; 0x3558 <vfprintf+0x328>
    3554:	e1 1a       	sub	r14, r17
    3556:	01 c0       	rjmp	.+2      	; 0x355a <vfprintf+0x32a>
    3558:	ee 24       	eor	r14, r14
    355a:	84 fe       	sbrs	r8, 4
    355c:	0f c0       	rjmp	.+30     	; 0x357c <vfprintf+0x34c>
    355e:	80 e3       	ldi	r24, 0x30	; 48
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	b3 01       	movw	r22, r6
    3564:	0e 94 a3 18 	call	0x3146	; 0x3146 <fputc>
    3568:	82 fe       	sbrs	r8, 2
    356a:	1f c0       	rjmp	.+62     	; 0x35aa <vfprintf+0x37a>
    356c:	81 fe       	sbrs	r8, 1
    356e:	03 c0       	rjmp	.+6      	; 0x3576 <vfprintf+0x346>
    3570:	88 e5       	ldi	r24, 0x58	; 88
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	10 c0       	rjmp	.+32     	; 0x3596 <vfprintf+0x366>
    3576:	88 e7       	ldi	r24, 0x78	; 120
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	0d c0       	rjmp	.+26     	; 0x3596 <vfprintf+0x366>
    357c:	c4 01       	movw	r24, r8
    357e:	86 78       	andi	r24, 0x86	; 134
    3580:	90 70       	andi	r25, 0x00	; 0
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	91 f0       	breq	.+36     	; 0x35aa <vfprintf+0x37a>
    3586:	81 fc       	sbrc	r8, 1
    3588:	02 c0       	rjmp	.+4      	; 0x358e <vfprintf+0x35e>
    358a:	80 e2       	ldi	r24, 0x20	; 32
    358c:	01 c0       	rjmp	.+2      	; 0x3590 <vfprintf+0x360>
    358e:	8b e2       	ldi	r24, 0x2B	; 43
    3590:	07 fd       	sbrc	r16, 7
    3592:	8d e2       	ldi	r24, 0x2D	; 45
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	b3 01       	movw	r22, r6
    3598:	0e 94 a3 18 	call	0x3146	; 0x3146 <fputc>
    359c:	06 c0       	rjmp	.+12     	; 0x35aa <vfprintf+0x37a>
    359e:	80 e3       	ldi	r24, 0x30	; 48
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	b3 01       	movw	r22, r6
    35a4:	0e 94 a3 18 	call	0x3146	; 0x3146 <fputc>
    35a8:	fa 94       	dec	r15
    35aa:	df 14       	cp	r13, r15
    35ac:	c0 f3       	brcs	.-16     	; 0x359e <vfprintf+0x36e>
    35ae:	da 94       	dec	r13
    35b0:	f2 01       	movw	r30, r4
    35b2:	ed 0d       	add	r30, r13
    35b4:	f1 1d       	adc	r31, r1
    35b6:	80 81       	ld	r24, Z
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	b3 01       	movw	r22, r6
    35bc:	0e 94 a3 18 	call	0x3146	; 0x3146 <fputc>
    35c0:	dd 20       	and	r13, r13
    35c2:	a9 f7       	brne	.-22     	; 0x35ae <vfprintf+0x37e>
    35c4:	06 c0       	rjmp	.+12     	; 0x35d2 <vfprintf+0x3a2>
    35c6:	80 e2       	ldi	r24, 0x20	; 32
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	b3 01       	movw	r22, r6
    35cc:	0e 94 a3 18 	call	0x3146	; 0x3146 <fputc>
    35d0:	ea 94       	dec	r14
    35d2:	ee 20       	and	r14, r14
    35d4:	c1 f7       	brne	.-16     	; 0x35c6 <vfprintf+0x396>
    35d6:	40 ce       	rjmp	.-896    	; 0x3258 <vfprintf+0x28>
    35d8:	f3 01       	movw	r30, r6
    35da:	86 81       	ldd	r24, Z+6	; 0x06
    35dc:	97 81       	ldd	r25, Z+7	; 0x07
    35de:	02 c0       	rjmp	.+4      	; 0x35e4 <vfprintf+0x3b4>
    35e0:	8f ef       	ldi	r24, 0xFF	; 255
    35e2:	9f ef       	ldi	r25, 0xFF	; 255
    35e4:	2d 96       	adiw	r28, 0x0d	; 13
    35e6:	e2 e1       	ldi	r30, 0x12	; 18
    35e8:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__epilogue_restores__>

000035ec <__eerd_byte_m328p>:
    35ec:	f9 99       	sbic	0x1f, 1	; 31
    35ee:	fe cf       	rjmp	.-4      	; 0x35ec <__eerd_byte_m328p>
    35f0:	92 bd       	out	0x22, r25	; 34
    35f2:	81 bd       	out	0x21, r24	; 33
    35f4:	f8 9a       	sbi	0x1f, 0	; 31
    35f6:	99 27       	eor	r25, r25
    35f8:	80 b5       	in	r24, 0x20	; 32
    35fa:	08 95       	ret

000035fc <strnlen_P>:
    35fc:	fc 01       	movw	r30, r24
    35fe:	05 90       	lpm	r0, Z+
    3600:	61 50       	subi	r22, 0x01	; 1
    3602:	70 40       	sbci	r23, 0x00	; 0
    3604:	01 10       	cpse	r0, r1
    3606:	d8 f7       	brcc	.-10     	; 0x35fe <strnlen_P+0x2>
    3608:	80 95       	com	r24
    360a:	90 95       	com	r25
    360c:	8e 0f       	add	r24, r30
    360e:	9f 1f       	adc	r25, r31
    3610:	08 95       	ret

00003612 <strnlen>:
    3612:	fc 01       	movw	r30, r24
    3614:	61 50       	subi	r22, 0x01	; 1
    3616:	70 40       	sbci	r23, 0x00	; 0
    3618:	01 90       	ld	r0, Z+
    361a:	01 10       	cpse	r0, r1
    361c:	d8 f7       	brcc	.-10     	; 0x3614 <strnlen+0x2>
    361e:	80 95       	com	r24
    3620:	90 95       	com	r25
    3622:	8e 0f       	add	r24, r30
    3624:	9f 1f       	adc	r25, r31
    3626:	08 95       	ret

00003628 <__ultoa_invert>:
    3628:	fa 01       	movw	r30, r20
    362a:	aa 27       	eor	r26, r26
    362c:	28 30       	cpi	r18, 0x08	; 8
    362e:	51 f1       	breq	.+84     	; 0x3684 <__ultoa_invert+0x5c>
    3630:	20 31       	cpi	r18, 0x10	; 16
    3632:	81 f1       	breq	.+96     	; 0x3694 <__ultoa_invert+0x6c>
    3634:	e8 94       	clt
    3636:	6f 93       	push	r22
    3638:	6e 7f       	andi	r22, 0xFE	; 254
    363a:	6e 5f       	subi	r22, 0xFE	; 254
    363c:	7f 4f       	sbci	r23, 0xFF	; 255
    363e:	8f 4f       	sbci	r24, 0xFF	; 255
    3640:	9f 4f       	sbci	r25, 0xFF	; 255
    3642:	af 4f       	sbci	r26, 0xFF	; 255
    3644:	b1 e0       	ldi	r27, 0x01	; 1
    3646:	3e d0       	rcall	.+124    	; 0x36c4 <__ultoa_invert+0x9c>
    3648:	b4 e0       	ldi	r27, 0x04	; 4
    364a:	3c d0       	rcall	.+120    	; 0x36c4 <__ultoa_invert+0x9c>
    364c:	67 0f       	add	r22, r23
    364e:	78 1f       	adc	r23, r24
    3650:	89 1f       	adc	r24, r25
    3652:	9a 1f       	adc	r25, r26
    3654:	a1 1d       	adc	r26, r1
    3656:	68 0f       	add	r22, r24
    3658:	79 1f       	adc	r23, r25
    365a:	8a 1f       	adc	r24, r26
    365c:	91 1d       	adc	r25, r1
    365e:	a1 1d       	adc	r26, r1
    3660:	6a 0f       	add	r22, r26
    3662:	71 1d       	adc	r23, r1
    3664:	81 1d       	adc	r24, r1
    3666:	91 1d       	adc	r25, r1
    3668:	a1 1d       	adc	r26, r1
    366a:	20 d0       	rcall	.+64     	; 0x36ac <__ultoa_invert+0x84>
    366c:	09 f4       	brne	.+2      	; 0x3670 <__ultoa_invert+0x48>
    366e:	68 94       	set
    3670:	3f 91       	pop	r19
    3672:	2a e0       	ldi	r18, 0x0A	; 10
    3674:	26 9f       	mul	r18, r22
    3676:	11 24       	eor	r1, r1
    3678:	30 19       	sub	r19, r0
    367a:	30 5d       	subi	r19, 0xD0	; 208
    367c:	31 93       	st	Z+, r19
    367e:	de f6       	brtc	.-74     	; 0x3636 <__ultoa_invert+0xe>
    3680:	cf 01       	movw	r24, r30
    3682:	08 95       	ret
    3684:	46 2f       	mov	r20, r22
    3686:	47 70       	andi	r20, 0x07	; 7
    3688:	40 5d       	subi	r20, 0xD0	; 208
    368a:	41 93       	st	Z+, r20
    368c:	b3 e0       	ldi	r27, 0x03	; 3
    368e:	0f d0       	rcall	.+30     	; 0x36ae <__ultoa_invert+0x86>
    3690:	c9 f7       	brne	.-14     	; 0x3684 <__ultoa_invert+0x5c>
    3692:	f6 cf       	rjmp	.-20     	; 0x3680 <__ultoa_invert+0x58>
    3694:	46 2f       	mov	r20, r22
    3696:	4f 70       	andi	r20, 0x0F	; 15
    3698:	40 5d       	subi	r20, 0xD0	; 208
    369a:	4a 33       	cpi	r20, 0x3A	; 58
    369c:	18 f0       	brcs	.+6      	; 0x36a4 <__ultoa_invert+0x7c>
    369e:	49 5d       	subi	r20, 0xD9	; 217
    36a0:	31 fd       	sbrc	r19, 1
    36a2:	40 52       	subi	r20, 0x20	; 32
    36a4:	41 93       	st	Z+, r20
    36a6:	02 d0       	rcall	.+4      	; 0x36ac <__ultoa_invert+0x84>
    36a8:	a9 f7       	brne	.-22     	; 0x3694 <__ultoa_invert+0x6c>
    36aa:	ea cf       	rjmp	.-44     	; 0x3680 <__ultoa_invert+0x58>
    36ac:	b4 e0       	ldi	r27, 0x04	; 4
    36ae:	a6 95       	lsr	r26
    36b0:	97 95       	ror	r25
    36b2:	87 95       	ror	r24
    36b4:	77 95       	ror	r23
    36b6:	67 95       	ror	r22
    36b8:	ba 95       	dec	r27
    36ba:	c9 f7       	brne	.-14     	; 0x36ae <__ultoa_invert+0x86>
    36bc:	00 97       	sbiw	r24, 0x00	; 0
    36be:	61 05       	cpc	r22, r1
    36c0:	71 05       	cpc	r23, r1
    36c2:	08 95       	ret
    36c4:	9b 01       	movw	r18, r22
    36c6:	ac 01       	movw	r20, r24
    36c8:	0a 2e       	mov	r0, r26
    36ca:	06 94       	lsr	r0
    36cc:	57 95       	ror	r21
    36ce:	47 95       	ror	r20
    36d0:	37 95       	ror	r19
    36d2:	27 95       	ror	r18
    36d4:	ba 95       	dec	r27
    36d6:	c9 f7       	brne	.-14     	; 0x36ca <__ultoa_invert+0xa2>
    36d8:	62 0f       	add	r22, r18
    36da:	73 1f       	adc	r23, r19
    36dc:	84 1f       	adc	r24, r20
    36de:	95 1f       	adc	r25, r21
    36e0:	a0 1d       	adc	r26, r0
    36e2:	08 95       	ret

000036e4 <__prologue_saves__>:
    36e4:	2f 92       	push	r2
    36e6:	3f 92       	push	r3
    36e8:	4f 92       	push	r4
    36ea:	5f 92       	push	r5
    36ec:	6f 92       	push	r6
    36ee:	7f 92       	push	r7
    36f0:	8f 92       	push	r8
    36f2:	9f 92       	push	r9
    36f4:	af 92       	push	r10
    36f6:	bf 92       	push	r11
    36f8:	cf 92       	push	r12
    36fa:	df 92       	push	r13
    36fc:	ef 92       	push	r14
    36fe:	ff 92       	push	r15
    3700:	0f 93       	push	r16
    3702:	1f 93       	push	r17
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	ca 1b       	sub	r28, r26
    370e:	db 0b       	sbc	r29, r27
    3710:	0f b6       	in	r0, 0x3f	; 63
    3712:	f8 94       	cli
    3714:	de bf       	out	0x3e, r29	; 62
    3716:	0f be       	out	0x3f, r0	; 63
    3718:	cd bf       	out	0x3d, r28	; 61
    371a:	09 94       	ijmp

0000371c <__epilogue_restores__>:
    371c:	2a 88       	ldd	r2, Y+18	; 0x12
    371e:	39 88       	ldd	r3, Y+17	; 0x11
    3720:	48 88       	ldd	r4, Y+16	; 0x10
    3722:	5f 84       	ldd	r5, Y+15	; 0x0f
    3724:	6e 84       	ldd	r6, Y+14	; 0x0e
    3726:	7d 84       	ldd	r7, Y+13	; 0x0d
    3728:	8c 84       	ldd	r8, Y+12	; 0x0c
    372a:	9b 84       	ldd	r9, Y+11	; 0x0b
    372c:	aa 84       	ldd	r10, Y+10	; 0x0a
    372e:	b9 84       	ldd	r11, Y+9	; 0x09
    3730:	c8 84       	ldd	r12, Y+8	; 0x08
    3732:	df 80       	ldd	r13, Y+7	; 0x07
    3734:	ee 80       	ldd	r14, Y+6	; 0x06
    3736:	fd 80       	ldd	r15, Y+5	; 0x05
    3738:	0c 81       	ldd	r16, Y+4	; 0x04
    373a:	1b 81       	ldd	r17, Y+3	; 0x03
    373c:	aa 81       	ldd	r26, Y+2	; 0x02
    373e:	b9 81       	ldd	r27, Y+1	; 0x01
    3740:	ce 0f       	add	r28, r30
    3742:	d1 1d       	adc	r29, r1
    3744:	0f b6       	in	r0, 0x3f	; 63
    3746:	f8 94       	cli
    3748:	de bf       	out	0x3e, r29	; 62
    374a:	0f be       	out	0x3f, r0	; 63
    374c:	cd bf       	out	0x3d, r28	; 61
    374e:	ed 01       	movw	r28, r26
    3750:	08 95       	ret

00003752 <_exit>:
    3752:	f8 94       	cli

00003754 <__stop_program>:
    3754:	ff cf       	rjmp	.-2      	; 0x3754 <__stop_program>
